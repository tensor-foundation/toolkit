/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
} from '@solana/web3.js';
import { SPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type VerifyLeafInstruction<
  TProgram extends string = typeof SPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS,
  TAccountMerkleTree extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMerkleTree extends string
        ? ReadonlyAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      ...TRemainingAccounts,
    ]
  >;

export type VerifyLeafInstructionData = {
  discriminator: ReadonlyUint8Array;
  root: ReadonlyUint8Array;
  leaf: ReadonlyUint8Array;
  index: number;
};

export type VerifyLeafInstructionDataArgs = {
  root: ReadonlyUint8Array;
  leaf: ReadonlyUint8Array;
  index: number;
};

export function getVerifyLeafInstructionDataEncoder(): Encoder<VerifyLeafInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
      ['leaf', fixEncoderSize(getBytesEncoder(), 32)],
      ['index', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([124, 220, 22, 223, 104, 10, 250, 224]),
    })
  );
}

export function getVerifyLeafInstructionDataDecoder(): Decoder<VerifyLeafInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
    ['leaf', fixDecoderSize(getBytesDecoder(), 32)],
    ['index', getU32Decoder()],
  ]);
}

export function getVerifyLeafInstructionDataCodec(): Codec<
  VerifyLeafInstructionDataArgs,
  VerifyLeafInstructionData
> {
  return combineCodec(
    getVerifyLeafInstructionDataEncoder(),
    getVerifyLeafInstructionDataDecoder()
  );
}

export type VerifyLeafInput<TAccountMerkleTree extends string = string> = {
  merkleTree: Address<TAccountMerkleTree>;
  root: VerifyLeafInstructionDataArgs['root'];
  leaf: VerifyLeafInstructionDataArgs['leaf'];
  index: VerifyLeafInstructionDataArgs['index'];
};

export function getVerifyLeafInstruction<TAccountMerkleTree extends string>(
  input: VerifyLeafInput<TAccountMerkleTree>
): VerifyLeafInstruction<
  typeof SPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS,
  TAccountMerkleTree
> {
  // Program address.
  const programAddress = SPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    merkleTree: { value: input.merkleTree ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.merkleTree)],
    programAddress,
    data: getVerifyLeafInstructionDataEncoder().encode(
      args as VerifyLeafInstructionDataArgs
    ),
  } as VerifyLeafInstruction<
    typeof SPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS,
    TAccountMerkleTree
  >;

  return instruction;
}

export type ParsedVerifyLeafInstruction<
  TProgram extends string = typeof SPL_ACCOUNT_COMPRESSION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    merkleTree: TAccountMetas[0];
  };
  data: VerifyLeafInstructionData;
};

export function parseVerifyLeafInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedVerifyLeafInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      merkleTree: getNextAccount(),
    },
    data: getVerifyLeafInstructionDataDecoder().decode(instruction.data),
  };
}
