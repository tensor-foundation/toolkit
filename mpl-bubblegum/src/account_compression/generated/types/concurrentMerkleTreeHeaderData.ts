/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/web3.js';
import {
  ConcurrentMerkleTreeHeaderDataV1,
  ConcurrentMerkleTreeHeaderDataV1Args,
  getConcurrentMerkleTreeHeaderDataV1Decoder,
  getConcurrentMerkleTreeHeaderDataV1Encoder,
} from '.';

export type ConcurrentMerkleTreeHeaderData = {
  __kind: 'V1';
  fields: readonly [ConcurrentMerkleTreeHeaderDataV1];
};

export type ConcurrentMerkleTreeHeaderDataArgs = {
  __kind: 'V1';
  fields: readonly [ConcurrentMerkleTreeHeaderDataV1Args];
};

export function getConcurrentMerkleTreeHeaderDataEncoder(): Encoder<ConcurrentMerkleTreeHeaderDataArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'V1',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getConcurrentMerkleTreeHeaderDataV1Encoder()]),
        ],
      ]),
    ],
  ]);
}

export function getConcurrentMerkleTreeHeaderDataDecoder(): Decoder<ConcurrentMerkleTreeHeaderData> {
  return getDiscriminatedUnionDecoder([
    [
      'V1',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getConcurrentMerkleTreeHeaderDataV1Decoder()]),
        ],
      ]),
    ],
  ]);
}

export function getConcurrentMerkleTreeHeaderDataCodec(): Codec<
  ConcurrentMerkleTreeHeaderDataArgs,
  ConcurrentMerkleTreeHeaderData
> {
  return combineCodec(
    getConcurrentMerkleTreeHeaderDataEncoder(),
    getConcurrentMerkleTreeHeaderDataDecoder()
  );
}

// Data Enum Helpers.
export function concurrentMerkleTreeHeaderData(
  kind: 'V1',
  data: GetDiscriminatedUnionVariantContent<
    ConcurrentMerkleTreeHeaderDataArgs,
    '__kind',
    'V1'
  >['fields']
): GetDiscriminatedUnionVariant<
  ConcurrentMerkleTreeHeaderDataArgs,
  '__kind',
  'V1'
>;
export function concurrentMerkleTreeHeaderData<
  K extends ConcurrentMerkleTreeHeaderDataArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isConcurrentMerkleTreeHeaderData<
  K extends ConcurrentMerkleTreeHeaderData['__kind'],
>(
  kind: K,
  value: ConcurrentMerkleTreeHeaderData
): value is ConcurrentMerkleTreeHeaderData & { __kind: K } {
  return value.__kind === kind;
}
