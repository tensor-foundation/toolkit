/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/web3.js';
import {
  getApplicationDataEventV1Decoder,
  getApplicationDataEventV1Encoder,
  type ApplicationDataEventV1,
  type ApplicationDataEventV1Args,
} from '.';

export type ApplicationDataEvent = {
  __kind: 'V1';
  fields: readonly [ApplicationDataEventV1];
};

export type ApplicationDataEventArgs = {
  __kind: 'V1';
  fields: readonly [ApplicationDataEventV1Args];
};

export function getApplicationDataEventEncoder(): Encoder<ApplicationDataEventArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'V1',
      getStructEncoder([
        ['fields', getTupleEncoder([getApplicationDataEventV1Encoder()])],
      ]),
    ],
  ]);
}

export function getApplicationDataEventDecoder(): Decoder<ApplicationDataEvent> {
  return getDiscriminatedUnionDecoder([
    [
      'V1',
      getStructDecoder([
        ['fields', getTupleDecoder([getApplicationDataEventV1Decoder()])],
      ]),
    ],
  ]);
}

export function getApplicationDataEventCodec(): Codec<
  ApplicationDataEventArgs,
  ApplicationDataEvent
> {
  return combineCodec(
    getApplicationDataEventEncoder(),
    getApplicationDataEventDecoder()
  );
}

// Data Enum Helpers.
export function applicationDataEvent(
  kind: 'V1',
  data: GetDiscriminatedUnionVariantContent<
    ApplicationDataEventArgs,
    '__kind',
    'V1'
  >['fields']
): GetDiscriminatedUnionVariant<ApplicationDataEventArgs, '__kind', 'V1'>;
export function applicationDataEvent<
  K extends ApplicationDataEventArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isApplicationDataEvent<
  K extends ApplicationDataEvent['__kind'],
>(
  kind: K,
  value: ApplicationDataEvent
): value is ApplicationDataEvent & { __kind: K } {
  return value.__kind === kind;
}
