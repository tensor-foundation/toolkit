/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/web3.js';

export type ConcurrentMerkleTreeHeaderDataV1 = {
  /**
   * Buffer of changelogs stored on-chain.
   * Must be a power of 2; see above table for valid combinations.
   */
  maxBufferSize: number;
  /**
   * Depth of the SPL ConcurrentMerkleTree to store.
   * Tree capacity can be calculated as power(2, max_depth).
   * See above table for valid options.
   */
  maxDepth: number;
  /**
   * Authority that validates the content of the trees.
   * Typically a program, e.g., the Bubblegum contract validates that leaves are valid NFTs.
   */
  authority: Address;
  /**
   * Slot corresponding to when the Merkle tree was created.
   * Provides a lower-bound on what slot to start (re-)building a tree from.
   */
  creationSlot: bigint;
  /**
   * A flag indicating whether the tree has been initialized with a root.
   * This field was added together with the `finalize_tree_with_root` instruction.
   * It takes 1 byte of space taken from the previous padding for existing accounts.
   */
  isBatchInitialized: boolean;
  /**
   * Needs padding for the account to be 8-byte aligned
   * 8-byte alignment is necessary to zero-copy the SPL ConcurrentMerkleTree
   */
  padding: Array<number>;
};

export type ConcurrentMerkleTreeHeaderDataV1Args = {
  /**
   * Buffer of changelogs stored on-chain.
   * Must be a power of 2; see above table for valid combinations.
   */
  maxBufferSize: number;
  /**
   * Depth of the SPL ConcurrentMerkleTree to store.
   * Tree capacity can be calculated as power(2, max_depth).
   * See above table for valid options.
   */
  maxDepth: number;
  /**
   * Authority that validates the content of the trees.
   * Typically a program, e.g., the Bubblegum contract validates that leaves are valid NFTs.
   */
  authority: Address;
  /**
   * Slot corresponding to when the Merkle tree was created.
   * Provides a lower-bound on what slot to start (re-)building a tree from.
   */
  creationSlot: number | bigint;
  /**
   * A flag indicating whether the tree has been initialized with a root.
   * This field was added together with the `finalize_tree_with_root` instruction.
   * It takes 1 byte of space taken from the previous padding for existing accounts.
   */
  isBatchInitialized: boolean;
  /**
   * Needs padding for the account to be 8-byte aligned
   * 8-byte alignment is necessary to zero-copy the SPL ConcurrentMerkleTree
   */
  padding: Array<number>;
};

export function getConcurrentMerkleTreeHeaderDataV1Encoder(): Encoder<ConcurrentMerkleTreeHeaderDataV1Args> {
  return getStructEncoder([
    ['maxBufferSize', getU32Encoder()],
    ['maxDepth', getU32Encoder()],
    ['authority', getAddressEncoder()],
    ['creationSlot', getU64Encoder()],
    ['isBatchInitialized', getBooleanEncoder()],
    ['padding', getArrayEncoder(getU8Encoder(), { size: 5 })],
  ]);
}

export function getConcurrentMerkleTreeHeaderDataV1Decoder(): Decoder<ConcurrentMerkleTreeHeaderDataV1> {
  return getStructDecoder([
    ['maxBufferSize', getU32Decoder()],
    ['maxDepth', getU32Decoder()],
    ['authority', getAddressDecoder()],
    ['creationSlot', getU64Decoder()],
    ['isBatchInitialized', getBooleanDecoder()],
    ['padding', getArrayDecoder(getU8Decoder(), { size: 5 })],
  ]);
}

export function getConcurrentMerkleTreeHeaderDataV1Codec(): Codec<
  ConcurrentMerkleTreeHeaderDataV1Args,
  ConcurrentMerkleTreeHeaderDataV1
> {
  return combineCodec(
    getConcurrentMerkleTreeHeaderDataV1Encoder(),
    getConcurrentMerkleTreeHeaderDataV1Decoder()
  );
}
