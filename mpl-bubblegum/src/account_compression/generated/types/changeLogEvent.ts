/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/web3.js';
import {
  getChangeLogEventV1Decoder,
  getChangeLogEventV1Encoder,
  type ChangeLogEventV1,
  type ChangeLogEventV1Args,
} from '.';

export type ChangeLogEvent = {
  __kind: 'V1';
  fields: readonly [ChangeLogEventV1];
};

export type ChangeLogEventArgs = {
  __kind: 'V1';
  fields: readonly [ChangeLogEventV1Args];
};

export function getChangeLogEventEncoder(): Encoder<ChangeLogEventArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'V1',
      getStructEncoder([
        ['fields', getTupleEncoder([getChangeLogEventV1Encoder()])],
      ]),
    ],
  ]);
}

export function getChangeLogEventDecoder(): Decoder<ChangeLogEvent> {
  return getDiscriminatedUnionDecoder([
    [
      'V1',
      getStructDecoder([
        ['fields', getTupleDecoder([getChangeLogEventV1Decoder()])],
      ]),
    ],
  ]);
}

export function getChangeLogEventCodec(): Codec<
  ChangeLogEventArgs,
  ChangeLogEvent
> {
  return combineCodec(getChangeLogEventEncoder(), getChangeLogEventDecoder());
}

// Data Enum Helpers.
export function changeLogEvent(
  kind: 'V1',
  data: GetDiscriminatedUnionVariantContent<
    ChangeLogEventArgs,
    '__kind',
    'V1'
  >['fields']
): GetDiscriminatedUnionVariant<ChangeLogEventArgs, '__kind', 'V1'>;
export function changeLogEvent<K extends ChangeLogEventArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isChangeLogEvent<K extends ChangeLogEvent['__kind']>(
  kind: K,
  value: ChangeLogEvent
): value is ChangeLogEvent & { __kind: K } {
  return value.__kind === kind;
}
