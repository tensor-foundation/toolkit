/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

/** IncorrectLeafLength: Incorrect leaf length. Expected vec of 32 bytes */
export const SPL_ACCOUNT_COMPRESSION_ERROR__INCORRECT_LEAF_LENGTH = 0x1770; // 6000
/** ConcurrentMerkleTreeError: Concurrent merkle tree error */
export const SPL_ACCOUNT_COMPRESSION_ERROR__CONCURRENT_MERKLE_TREE_ERROR = 0x1771; // 6001
/** ZeroCopyError: Issue zero copying concurrent merkle tree data */
export const SPL_ACCOUNT_COMPRESSION_ERROR__ZERO_COPY_ERROR = 0x1772; // 6002
/** ConcurrentMerkleTreeConstantsError: An unsupported max depth or max buffer size constant was provided */
export const SPL_ACCOUNT_COMPRESSION_ERROR__CONCURRENT_MERKLE_TREE_CONSTANTS_ERROR = 0x1773; // 6003
/** CanopyLengthMismatch: Expected a different byte length for the merkle tree canopy */
export const SPL_ACCOUNT_COMPRESSION_ERROR__CANOPY_LENGTH_MISMATCH = 0x1774; // 6004
/** IncorrectAuthority: Provided authority does not match expected tree authority */
export const SPL_ACCOUNT_COMPRESSION_ERROR__INCORRECT_AUTHORITY = 0x1775; // 6005
/** IncorrectAccountOwner: Account is owned by a different program, expected it to be owned by this program */
export const SPL_ACCOUNT_COMPRESSION_ERROR__INCORRECT_ACCOUNT_OWNER = 0x1776; // 6006
/** IncorrectAccountType: Account provided has incorrect account type */
export const SPL_ACCOUNT_COMPRESSION_ERROR__INCORRECT_ACCOUNT_TYPE = 0x1777; // 6007
/** LeafIndexOutOfBounds: Leaf index of concurrent merkle tree is out of bounds */
export const SPL_ACCOUNT_COMPRESSION_ERROR__LEAF_INDEX_OUT_OF_BOUNDS = 0x1778; // 6008

export type SplAccountCompressionError =
  | typeof SPL_ACCOUNT_COMPRESSION_ERROR__CANOPY_LENGTH_MISMATCH
  | typeof SPL_ACCOUNT_COMPRESSION_ERROR__CONCURRENT_MERKLE_TREE_CONSTANTS_ERROR
  | typeof SPL_ACCOUNT_COMPRESSION_ERROR__CONCURRENT_MERKLE_TREE_ERROR
  | typeof SPL_ACCOUNT_COMPRESSION_ERROR__INCORRECT_ACCOUNT_OWNER
  | typeof SPL_ACCOUNT_COMPRESSION_ERROR__INCORRECT_ACCOUNT_TYPE
  | typeof SPL_ACCOUNT_COMPRESSION_ERROR__INCORRECT_AUTHORITY
  | typeof SPL_ACCOUNT_COMPRESSION_ERROR__INCORRECT_LEAF_LENGTH
  | typeof SPL_ACCOUNT_COMPRESSION_ERROR__LEAF_INDEX_OUT_OF_BOUNDS
  | typeof SPL_ACCOUNT_COMPRESSION_ERROR__ZERO_COPY_ERROR;

let splAccountCompressionErrorMessages:
  | Record<SplAccountCompressionError, string>
  | undefined;
if (__DEV__) {
  splAccountCompressionErrorMessages = {
    [SPL_ACCOUNT_COMPRESSION_ERROR__CANOPY_LENGTH_MISMATCH]: `Expected a different byte length for the merkle tree canopy`,
    [SPL_ACCOUNT_COMPRESSION_ERROR__CONCURRENT_MERKLE_TREE_CONSTANTS_ERROR]: `An unsupported max depth or max buffer size constant was provided`,
    [SPL_ACCOUNT_COMPRESSION_ERROR__CONCURRENT_MERKLE_TREE_ERROR]: `Concurrent merkle tree error`,
    [SPL_ACCOUNT_COMPRESSION_ERROR__INCORRECT_ACCOUNT_OWNER]: `Account is owned by a different program, expected it to be owned by this program`,
    [SPL_ACCOUNT_COMPRESSION_ERROR__INCORRECT_ACCOUNT_TYPE]: `Account provided has incorrect account type`,
    [SPL_ACCOUNT_COMPRESSION_ERROR__INCORRECT_AUTHORITY]: `Provided authority does not match expected tree authority`,
    [SPL_ACCOUNT_COMPRESSION_ERROR__INCORRECT_LEAF_LENGTH]: `Incorrect leaf length. Expected vec of 32 bytes`,
    [SPL_ACCOUNT_COMPRESSION_ERROR__LEAF_INDEX_OUT_OF_BOUNDS]: `Leaf index of concurrent merkle tree is out of bounds`,
    [SPL_ACCOUNT_COMPRESSION_ERROR__ZERO_COPY_ERROR]: `Issue zero copying concurrent merkle tree data`,
  };
}

export function getSplAccountCompressionErrorMessage(
  code: SplAccountCompressionError
): string {
  if (__DEV__) {
    return (
      splAccountCompressionErrorMessages as Record<
        SplAccountCompressionError,
        string
      >
    )[code];
  }

  return 'Error message not available in production bundles. Compile with `__DEV__` set to true to see more information.';
}
