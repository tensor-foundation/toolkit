/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from '@solana/web3.js';
import {
  DecompressibleState,
  DecompressibleStateArgs,
  getDecompressibleStateDecoder,
  getDecompressibleStateEncoder,
} from '../types';

export type TreeConfig = {
  discriminator: ReadonlyUint8Array;
  treeCreator: Address;
  treeDelegate: Address;
  totalMintCapacity: bigint;
  numMinted: bigint;
  isPublic: boolean;
  isDecompressible: DecompressibleState;
};

export type TreeConfigArgs = {
  treeCreator: Address;
  treeDelegate: Address;
  totalMintCapacity: number | bigint;
  numMinted: number | bigint;
  isPublic: boolean;
  isDecompressible: DecompressibleStateArgs;
};

export function getTreeConfigEncoder(): Encoder<TreeConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['treeCreator', getAddressEncoder()],
      ['treeDelegate', getAddressEncoder()],
      ['totalMintCapacity', getU64Encoder()],
      ['numMinted', getU64Encoder()],
      ['isPublic', getBooleanEncoder()],
      ['isDecompressible', getDecompressibleStateEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([122, 245, 175, 248, 171, 34, 0, 207]),
    })
  );
}

export function getTreeConfigDecoder(): Decoder<TreeConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['treeCreator', getAddressDecoder()],
    ['treeDelegate', getAddressDecoder()],
    ['totalMintCapacity', getU64Decoder()],
    ['numMinted', getU64Decoder()],
    ['isPublic', getBooleanDecoder()],
    ['isDecompressible', getDecompressibleStateDecoder()],
  ]);
}

export function getTreeConfigCodec(): Codec<TreeConfigArgs, TreeConfig> {
  return combineCodec(getTreeConfigEncoder(), getTreeConfigDecoder());
}

export function decodeTreeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TreeConfig, TAddress>;
export function decodeTreeConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TreeConfig, TAddress>;
export function decodeTreeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<TreeConfig, TAddress> | MaybeAccount<TreeConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTreeConfigDecoder()
  );
}

export async function fetchTreeConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TreeConfig, TAddress>> {
  const maybeAccount = await fetchMaybeTreeConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTreeConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TreeConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTreeConfig(maybeAccount);
}

export async function fetchAllTreeConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TreeConfig>[]> {
  const maybeAccounts = await fetchAllMaybeTreeConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTreeConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TreeConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTreeConfig(maybeAccount));
}

export function getTreeConfigSize(): number {
  return 90;
}
