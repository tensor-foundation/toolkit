/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

/** AssetOwnerMismatch: Asset Owner Does not match */
export const BUBBLEGUM_ERROR__ASSET_OWNER_MISMATCH = 0x1770; // 6000
/** PublicKeyMismatch: PublicKeyMismatch */
export const BUBBLEGUM_ERROR__PUBLIC_KEY_MISMATCH = 0x1771; // 6001
/** HashingMismatch: Hashing Mismatch Within Leaf Schema */
export const BUBBLEGUM_ERROR__HASHING_MISMATCH = 0x1772; // 6002
/** UnsupportedSchemaVersion: Unsupported Schema Version */
export const BUBBLEGUM_ERROR__UNSUPPORTED_SCHEMA_VERSION = 0x1773; // 6003
/** CreatorShareTotalMustBe100: Creator shares must sum to 100 */
export const BUBBLEGUM_ERROR__CREATOR_SHARE_TOTAL_MUST_BE100 = 0x1774; // 6004
/** DuplicateCreatorAddress: No duplicate creator addresses in metadata */
export const BUBBLEGUM_ERROR__DUPLICATE_CREATOR_ADDRESS = 0x1775; // 6005
/** CreatorDidNotVerify: Creator did not verify the metadata */
export const BUBBLEGUM_ERROR__CREATOR_DID_NOT_VERIFY = 0x1776; // 6006
/** CreatorNotFound: Creator not found in creator Vec */
export const BUBBLEGUM_ERROR__CREATOR_NOT_FOUND = 0x1777; // 6007
/** NoCreatorsPresent: No creators in creator Vec */
export const BUBBLEGUM_ERROR__NO_CREATORS_PRESENT = 0x1778; // 6008
/** CreatorHashMismatch: User-provided creator Vec must result in same user-provided creator hash */
export const BUBBLEGUM_ERROR__CREATOR_HASH_MISMATCH = 0x1779; // 6009
/** DataHashMismatch: User-provided metadata must result in same user-provided data hash */
export const BUBBLEGUM_ERROR__DATA_HASH_MISMATCH = 0x177a; // 6010
/** CreatorsTooLong: Creators list too long */
export const BUBBLEGUM_ERROR__CREATORS_TOO_LONG = 0x177b; // 6011
/** MetadataNameTooLong: Name in metadata is too long */
export const BUBBLEGUM_ERROR__METADATA_NAME_TOO_LONG = 0x177c; // 6012
/** MetadataSymbolTooLong: Symbol in metadata is too long */
export const BUBBLEGUM_ERROR__METADATA_SYMBOL_TOO_LONG = 0x177d; // 6013
/** MetadataUriTooLong: Uri in metadata is too long */
export const BUBBLEGUM_ERROR__METADATA_URI_TOO_LONG = 0x177e; // 6014
/** MetadataBasisPointsTooHigh: Basis points in metadata cannot exceed 10000 */
export const BUBBLEGUM_ERROR__METADATA_BASIS_POINTS_TOO_HIGH = 0x177f; // 6015
/** TreeAuthorityIncorrect: Tree creator or tree delegate must sign. */
export const BUBBLEGUM_ERROR__TREE_AUTHORITY_INCORRECT = 0x1780; // 6016
/** InsufficientMintCapacity: Not enough unapproved mints left */
export const BUBBLEGUM_ERROR__INSUFFICIENT_MINT_CAPACITY = 0x1781; // 6017
/** NumericalOverflowError: NumericalOverflowError */
export const BUBBLEGUM_ERROR__NUMERICAL_OVERFLOW_ERROR = 0x1782; // 6018
/** IncorrectOwner: Incorrect account owner */
export const BUBBLEGUM_ERROR__INCORRECT_OWNER = 0x1783; // 6019
/** CollectionCannotBeVerifiedInThisInstruction: Cannot Verify Collection in this Instruction */
export const BUBBLEGUM_ERROR__COLLECTION_CANNOT_BE_VERIFIED_IN_THIS_INSTRUCTION = 0x1784; // 6020
/** CollectionNotFound: Collection Not Found on Metadata */
export const BUBBLEGUM_ERROR__COLLECTION_NOT_FOUND = 0x1785; // 6021
/** AlreadyVerified: Collection item is already verified. */
export const BUBBLEGUM_ERROR__ALREADY_VERIFIED = 0x1786; // 6022
/** AlreadyUnverified: Collection item is already unverified. */
export const BUBBLEGUM_ERROR__ALREADY_UNVERIFIED = 0x1787; // 6023
/** UpdateAuthorityIncorrect: Incorrect leaf metadata update authority. */
export const BUBBLEGUM_ERROR__UPDATE_AUTHORITY_INCORRECT = 0x1788; // 6024
/** LeafAuthorityMustSign: This transaction must be signed by either the leaf owner or leaf delegate */
export const BUBBLEGUM_ERROR__LEAF_AUTHORITY_MUST_SIGN = 0x1789; // 6025
/** CollectionMustBeSized: Collection Not Compatable with Compression, Must be Sized */
export const BUBBLEGUM_ERROR__COLLECTION_MUST_BE_SIZED = 0x178a; // 6026
/** MetadataMintMismatch: Metadata mint does not match collection mint */
export const BUBBLEGUM_ERROR__METADATA_MINT_MISMATCH = 0x178b; // 6027
/** InvalidCollectionAuthority: Invalid collection authority */
export const BUBBLEGUM_ERROR__INVALID_COLLECTION_AUTHORITY = 0x178c; // 6028
/** InvalidDelegateRecord: Invalid delegate record pda derivation */
export const BUBBLEGUM_ERROR__INVALID_DELEGATE_RECORD = 0x178d; // 6029
/** CollectionMasterEditionAccountInvalid: Edition account doesnt match collection */
export const BUBBLEGUM_ERROR__COLLECTION_MASTER_EDITION_ACCOUNT_INVALID = 0x178e; // 6030
/** CollectionMustBeAUniqueMasterEdition: Collection Must Be a Unique Master Edition v2 */
export const BUBBLEGUM_ERROR__COLLECTION_MUST_BE_A_UNIQUE_MASTER_EDITION = 0x178f; // 6031
/** UnknownExternalError: Could not convert external error to BubblegumError */
export const BUBBLEGUM_ERROR__UNKNOWN_EXTERNAL_ERROR = 0x1790; // 6032
/** DecompressionDisabled: Decompression is disabled for this tree. */
export const BUBBLEGUM_ERROR__DECOMPRESSION_DISABLED = 0x1791; // 6033
/** MissingCollectionMintAccount: Missing collection mint account */
export const BUBBLEGUM_ERROR__MISSING_COLLECTION_MINT_ACCOUNT = 0x1792; // 6034
/** MissingCollectionMetadataAccount: Missing collection metadata account */
export const BUBBLEGUM_ERROR__MISSING_COLLECTION_METADATA_ACCOUNT = 0x1793; // 6035
/** CollectionMismatch: Collection mismatch */
export const BUBBLEGUM_ERROR__COLLECTION_MISMATCH = 0x1794; // 6036
/** MetadataImmutable: Metadata not mutable */
export const BUBBLEGUM_ERROR__METADATA_IMMUTABLE = 0x1795; // 6037
/** PrimarySaleCanOnlyBeFlippedToTrue: Can only update primary sale to true */
export const BUBBLEGUM_ERROR__PRIMARY_SALE_CAN_ONLY_BE_FLIPPED_TO_TRUE = 0x1796; // 6038
/** CreatorDidNotUnverify: Creator did not unverify the metadata */
export const BUBBLEGUM_ERROR__CREATOR_DID_NOT_UNVERIFY = 0x1797; // 6039
/** InvalidTokenStandard: Only NonFungible standard is supported */
export const BUBBLEGUM_ERROR__INVALID_TOKEN_STANDARD = 0x1798; // 6040
/** InvalidCanopySize: Canopy size should be set bigger for this tree */
export const BUBBLEGUM_ERROR__INVALID_CANOPY_SIZE = 0x1799; // 6041

export type BubblegumError =
  | typeof BUBBLEGUM_ERROR__ALREADY_UNVERIFIED
  | typeof BUBBLEGUM_ERROR__ALREADY_VERIFIED
  | typeof BUBBLEGUM_ERROR__ASSET_OWNER_MISMATCH
  | typeof BUBBLEGUM_ERROR__COLLECTION_CANNOT_BE_VERIFIED_IN_THIS_INSTRUCTION
  | typeof BUBBLEGUM_ERROR__COLLECTION_MASTER_EDITION_ACCOUNT_INVALID
  | typeof BUBBLEGUM_ERROR__COLLECTION_MISMATCH
  | typeof BUBBLEGUM_ERROR__COLLECTION_MUST_BE_A_UNIQUE_MASTER_EDITION
  | typeof BUBBLEGUM_ERROR__COLLECTION_MUST_BE_SIZED
  | typeof BUBBLEGUM_ERROR__COLLECTION_NOT_FOUND
  | typeof BUBBLEGUM_ERROR__CREATOR_DID_NOT_UNVERIFY
  | typeof BUBBLEGUM_ERROR__CREATOR_DID_NOT_VERIFY
  | typeof BUBBLEGUM_ERROR__CREATOR_HASH_MISMATCH
  | typeof BUBBLEGUM_ERROR__CREATOR_NOT_FOUND
  | typeof BUBBLEGUM_ERROR__CREATOR_SHARE_TOTAL_MUST_BE100
  | typeof BUBBLEGUM_ERROR__CREATORS_TOO_LONG
  | typeof BUBBLEGUM_ERROR__DATA_HASH_MISMATCH
  | typeof BUBBLEGUM_ERROR__DECOMPRESSION_DISABLED
  | typeof BUBBLEGUM_ERROR__DUPLICATE_CREATOR_ADDRESS
  | typeof BUBBLEGUM_ERROR__HASHING_MISMATCH
  | typeof BUBBLEGUM_ERROR__INCORRECT_OWNER
  | typeof BUBBLEGUM_ERROR__INSUFFICIENT_MINT_CAPACITY
  | typeof BUBBLEGUM_ERROR__INVALID_CANOPY_SIZE
  | typeof BUBBLEGUM_ERROR__INVALID_COLLECTION_AUTHORITY
  | typeof BUBBLEGUM_ERROR__INVALID_DELEGATE_RECORD
  | typeof BUBBLEGUM_ERROR__INVALID_TOKEN_STANDARD
  | typeof BUBBLEGUM_ERROR__LEAF_AUTHORITY_MUST_SIGN
  | typeof BUBBLEGUM_ERROR__METADATA_BASIS_POINTS_TOO_HIGH
  | typeof BUBBLEGUM_ERROR__METADATA_IMMUTABLE
  | typeof BUBBLEGUM_ERROR__METADATA_MINT_MISMATCH
  | typeof BUBBLEGUM_ERROR__METADATA_NAME_TOO_LONG
  | typeof BUBBLEGUM_ERROR__METADATA_SYMBOL_TOO_LONG
  | typeof BUBBLEGUM_ERROR__METADATA_URI_TOO_LONG
  | typeof BUBBLEGUM_ERROR__MISSING_COLLECTION_METADATA_ACCOUNT
  | typeof BUBBLEGUM_ERROR__MISSING_COLLECTION_MINT_ACCOUNT
  | typeof BUBBLEGUM_ERROR__NO_CREATORS_PRESENT
  | typeof BUBBLEGUM_ERROR__NUMERICAL_OVERFLOW_ERROR
  | typeof BUBBLEGUM_ERROR__PRIMARY_SALE_CAN_ONLY_BE_FLIPPED_TO_TRUE
  | typeof BUBBLEGUM_ERROR__PUBLIC_KEY_MISMATCH
  | typeof BUBBLEGUM_ERROR__TREE_AUTHORITY_INCORRECT
  | typeof BUBBLEGUM_ERROR__UNKNOWN_EXTERNAL_ERROR
  | typeof BUBBLEGUM_ERROR__UNSUPPORTED_SCHEMA_VERSION
  | typeof BUBBLEGUM_ERROR__UPDATE_AUTHORITY_INCORRECT;

let bubblegumErrorMessages: Record<BubblegumError, string> | undefined;
if (__DEV__) {
  bubblegumErrorMessages = {
    [BUBBLEGUM_ERROR__ALREADY_UNVERIFIED]: `Collection item is already unverified.`,
    [BUBBLEGUM_ERROR__ALREADY_VERIFIED]: `Collection item is already verified.`,
    [BUBBLEGUM_ERROR__ASSET_OWNER_MISMATCH]: `Asset Owner Does not match`,
    [BUBBLEGUM_ERROR__COLLECTION_CANNOT_BE_VERIFIED_IN_THIS_INSTRUCTION]: `Cannot Verify Collection in this Instruction`,
    [BUBBLEGUM_ERROR__COLLECTION_MASTER_EDITION_ACCOUNT_INVALID]: `Edition account doesnt match collection`,
    [BUBBLEGUM_ERROR__COLLECTION_MISMATCH]: `Collection mismatch`,
    [BUBBLEGUM_ERROR__COLLECTION_MUST_BE_A_UNIQUE_MASTER_EDITION]: `Collection Must Be a Unique Master Edition v2`,
    [BUBBLEGUM_ERROR__COLLECTION_MUST_BE_SIZED]: `Collection Not Compatable with Compression, Must be Sized`,
    [BUBBLEGUM_ERROR__COLLECTION_NOT_FOUND]: `Collection Not Found on Metadata`,
    [BUBBLEGUM_ERROR__CREATOR_DID_NOT_UNVERIFY]: `Creator did not unverify the metadata`,
    [BUBBLEGUM_ERROR__CREATOR_DID_NOT_VERIFY]: `Creator did not verify the metadata`,
    [BUBBLEGUM_ERROR__CREATOR_HASH_MISMATCH]: `User-provided creator Vec must result in same user-provided creator hash`,
    [BUBBLEGUM_ERROR__CREATOR_NOT_FOUND]: `Creator not found in creator Vec`,
    [BUBBLEGUM_ERROR__CREATOR_SHARE_TOTAL_MUST_BE100]: `Creator shares must sum to 100`,
    [BUBBLEGUM_ERROR__CREATORS_TOO_LONG]: `Creators list too long`,
    [BUBBLEGUM_ERROR__DATA_HASH_MISMATCH]: `User-provided metadata must result in same user-provided data hash`,
    [BUBBLEGUM_ERROR__DECOMPRESSION_DISABLED]: `Decompression is disabled for this tree.`,
    [BUBBLEGUM_ERROR__DUPLICATE_CREATOR_ADDRESS]: `No duplicate creator addresses in metadata`,
    [BUBBLEGUM_ERROR__HASHING_MISMATCH]: `Hashing Mismatch Within Leaf Schema`,
    [BUBBLEGUM_ERROR__INCORRECT_OWNER]: `Incorrect account owner`,
    [BUBBLEGUM_ERROR__INSUFFICIENT_MINT_CAPACITY]: `Not enough unapproved mints left`,
    [BUBBLEGUM_ERROR__INVALID_CANOPY_SIZE]: `Canopy size should be set bigger for this tree`,
    [BUBBLEGUM_ERROR__INVALID_COLLECTION_AUTHORITY]: `Invalid collection authority`,
    [BUBBLEGUM_ERROR__INVALID_DELEGATE_RECORD]: `Invalid delegate record pda derivation`,
    [BUBBLEGUM_ERROR__INVALID_TOKEN_STANDARD]: `Only NonFungible standard is supported`,
    [BUBBLEGUM_ERROR__LEAF_AUTHORITY_MUST_SIGN]: `This transaction must be signed by either the leaf owner or leaf delegate`,
    [BUBBLEGUM_ERROR__METADATA_BASIS_POINTS_TOO_HIGH]: `Basis points in metadata cannot exceed 10000`,
    [BUBBLEGUM_ERROR__METADATA_IMMUTABLE]: `Metadata not mutable`,
    [BUBBLEGUM_ERROR__METADATA_MINT_MISMATCH]: `Metadata mint does not match collection mint`,
    [BUBBLEGUM_ERROR__METADATA_NAME_TOO_LONG]: `Name in metadata is too long`,
    [BUBBLEGUM_ERROR__METADATA_SYMBOL_TOO_LONG]: `Symbol in metadata is too long`,
    [BUBBLEGUM_ERROR__METADATA_URI_TOO_LONG]: `Uri in metadata is too long`,
    [BUBBLEGUM_ERROR__MISSING_COLLECTION_METADATA_ACCOUNT]: `Missing collection metadata account`,
    [BUBBLEGUM_ERROR__MISSING_COLLECTION_MINT_ACCOUNT]: `Missing collection mint account`,
    [BUBBLEGUM_ERROR__NO_CREATORS_PRESENT]: `No creators in creator Vec`,
    [BUBBLEGUM_ERROR__NUMERICAL_OVERFLOW_ERROR]: `NumericalOverflowError`,
    [BUBBLEGUM_ERROR__PRIMARY_SALE_CAN_ONLY_BE_FLIPPED_TO_TRUE]: `Can only update primary sale to true`,
    [BUBBLEGUM_ERROR__PUBLIC_KEY_MISMATCH]: `PublicKeyMismatch`,
    [BUBBLEGUM_ERROR__TREE_AUTHORITY_INCORRECT]: `Tree creator or tree delegate must sign.`,
    [BUBBLEGUM_ERROR__UNKNOWN_EXTERNAL_ERROR]: `Could not convert external error to BubblegumError`,
    [BUBBLEGUM_ERROR__UNSUPPORTED_SCHEMA_VERSION]: `Unsupported Schema Version`,
    [BUBBLEGUM_ERROR__UPDATE_AUTHORITY_INCORRECT]: `Incorrect leaf metadata update authority.`,
  };
}

export function getBubblegumErrorMessage(code: BubblegumError): string {
  if (__DEV__) {
    return (bubblegumErrorMessages as Record<BubblegumError, string>)[code];
  }

  return 'Error message not available in production bundles. Compile with `__DEV__` set to true to see more information.';
}
