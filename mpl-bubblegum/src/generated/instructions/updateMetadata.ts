/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getCreatorDecoder,
  getCreatorEncoder,
  getMetadataArgsDecoder,
  getMetadataArgsEncoder,
  type Creator,
  type CreatorArgs,
  type MetadataArgs,
  type MetadataArgsArgs,
} from '../types';

export const UPDATE_METADATA_DISCRIMINATOR = new Uint8Array([
  170, 182, 43, 239, 97, 78, 225, 186,
]);

export function getUpdateMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_METADATA_DISCRIMINATOR
  );
}

export type UpdateMetadataInstruction<
  TProgram extends string = typeof BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeAuthority extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountCollectionMint extends string | IAccountMeta<string> = string,
  TAccountCollectionMetadata extends string | IAccountMeta<string> = string,
  TAccountCollectionAuthorityRecordPda extends
    | string
    | IAccountMeta<string> = string,
  TAccountLeafOwner extends string | IAccountMeta<string> = string,
  TAccountLeafDelegate extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountMerkleTree extends string | IAccountMeta<string> = string,
  TAccountLogWrapper extends string | IAccountMeta<string> = string,
  TAccountCompressionProgram extends string | IAccountMeta<string> = string,
  TAccountTokenMetadataProgram extends
    | string
    | IAccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTreeAuthority extends string
        ? ReadonlyAccount<TAccountTreeAuthority>
        : TAccountTreeAuthority,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountCollectionMint extends string
        ? ReadonlyAccount<TAccountCollectionMint>
        : TAccountCollectionMint,
      TAccountCollectionMetadata extends string
        ? ReadonlyAccount<TAccountCollectionMetadata>
        : TAccountCollectionMetadata,
      TAccountCollectionAuthorityRecordPda extends string
        ? ReadonlyAccount<TAccountCollectionAuthorityRecordPda>
        : TAccountCollectionAuthorityRecordPda,
      TAccountLeafOwner extends string
        ? ReadonlyAccount<TAccountLeafOwner>
        : TAccountLeafOwner,
      TAccountLeafDelegate extends string
        ? ReadonlyAccount<TAccountLeafDelegate>
        : TAccountLeafDelegate,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateMetadataInstructionData = {
  discriminator: ReadonlyUint8Array;
  root: ReadonlyUint8Array;
  nonce: bigint;
  index: number;
  currentMetadata: MetadataArgs;
  name: Option<string>;
  symbol: Option<string>;
  uri: Option<string>;
  creators: Option<Array<Creator>>;
  sellerFeeBasisPoints: Option<number>;
  primarySaleHappened: Option<boolean>;
  isMutable: Option<boolean>;
};

export type UpdateMetadataInstructionDataArgs = {
  root: ReadonlyUint8Array;
  nonce: number | bigint;
  index: number;
  currentMetadata: MetadataArgsArgs;
  name: OptionOrNullable<string>;
  symbol: OptionOrNullable<string>;
  uri: OptionOrNullable<string>;
  creators: OptionOrNullable<Array<CreatorArgs>>;
  sellerFeeBasisPoints: OptionOrNullable<number>;
  primarySaleHappened: OptionOrNullable<boolean>;
  isMutable: OptionOrNullable<boolean>;
};

export function getUpdateMetadataInstructionDataEncoder(): Encoder<UpdateMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
      ['nonce', getU64Encoder()],
      ['index', getU32Encoder()],
      ['currentMetadata', getMetadataArgsEncoder()],
      [
        'name',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      [
        'symbol',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      [
        'uri',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['creators', getOptionEncoder(getArrayEncoder(getCreatorEncoder()))],
      ['sellerFeeBasisPoints', getOptionEncoder(getU16Encoder())],
      ['primarySaleHappened', getOptionEncoder(getBooleanEncoder())],
      ['isMutable', getOptionEncoder(getBooleanEncoder())],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_METADATA_DISCRIMINATOR })
  );
}

export function getUpdateMetadataInstructionDataDecoder(): Decoder<UpdateMetadataInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
    ['nonce', getU64Decoder()],
    ['index', getU32Decoder()],
    ['currentMetadata', getMetadataArgsDecoder()],
    [
      'name',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'symbol',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'uri',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['creators', getOptionDecoder(getArrayDecoder(getCreatorDecoder()))],
    ['sellerFeeBasisPoints', getOptionDecoder(getU16Decoder())],
    ['primarySaleHappened', getOptionDecoder(getBooleanDecoder())],
    ['isMutable', getOptionDecoder(getBooleanDecoder())],
  ]);
}

export function getUpdateMetadataInstructionDataCodec(): Codec<
  UpdateMetadataInstructionDataArgs,
  UpdateMetadataInstructionData
> {
  return combineCodec(
    getUpdateMetadataInstructionDataEncoder(),
    getUpdateMetadataInstructionDataDecoder()
  );
}

export type UpdateMetadataInput<
  TAccountTreeAuthority extends string = string,
  TAccountAuthority extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountCollectionAuthorityRecordPda extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountPayer extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeAuthority: Address<TAccountTreeAuthority>;
  /**
   * Either collection authority or tree owner/delegate, depending
   * on whether the item is in a verified collection
   */
  authority: TransactionSigner<TAccountAuthority>;
  /** Used when item is in a verified collection */
  collectionMint?: Address<TAccountCollectionMint>;
  /** Used when item is in a verified collection */
  collectionMetadata?: Address<TAccountCollectionMetadata>;
  collectionAuthorityRecordPda?: Address<TAccountCollectionAuthorityRecordPda>;
  leafOwner: Address<TAccountLeafOwner>;
  leafDelegate: Address<TAccountLeafDelegate>;
  payer: TransactionSigner<TAccountPayer>;
  merkleTree: Address<TAccountMerkleTree>;
  logWrapper: Address<TAccountLogWrapper>;
  compressionProgram: Address<TAccountCompressionProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: UpdateMetadataInstructionDataArgs['root'];
  nonce: UpdateMetadataInstructionDataArgs['nonce'];
  index: UpdateMetadataInstructionDataArgs['index'];
  currentMetadata: UpdateMetadataInstructionDataArgs['currentMetadata'];
  name: UpdateMetadataInstructionDataArgs['name'];
  symbol: UpdateMetadataInstructionDataArgs['symbol'];
  uri: UpdateMetadataInstructionDataArgs['uri'];
  creators: UpdateMetadataInstructionDataArgs['creators'];
  sellerFeeBasisPoints: UpdateMetadataInstructionDataArgs['sellerFeeBasisPoints'];
  primarySaleHappened: UpdateMetadataInstructionDataArgs['primarySaleHappened'];
  isMutable: UpdateMetadataInstructionDataArgs['isMutable'];
};

export function getUpdateMetadataInstruction<
  TAccountTreeAuthority extends string,
  TAccountAuthority extends string,
  TAccountCollectionMint extends string,
  TAccountCollectionMetadata extends string,
  TAccountCollectionAuthorityRecordPda extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountPayer extends string,
  TAccountMerkleTree extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: UpdateMetadataInput<
    TAccountTreeAuthority,
    TAccountAuthority,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionAuthorityRecordPda,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountPayer,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateMetadataInstruction<
  TProgramAddress,
  TAccountTreeAuthority,
  TAccountAuthority,
  TAccountCollectionMint,
  TAccountCollectionMetadata,
  TAccountCollectionAuthorityRecordPda,
  TAccountLeafOwner,
  TAccountLeafDelegate,
  TAccountPayer,
  TAccountMerkleTree,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountTokenMetadataProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeAuthority: { value: input.treeAuthority ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    collectionMint: { value: input.collectionMint ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: false,
    },
    collectionAuthorityRecordPda: {
      value: input.collectionAuthorityRecordPda ?? null,
      isWritable: false,
    },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeAuthority),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.collectionMint),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.collectionAuthorityRecordPda),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUpdateMetadataInstructionDataEncoder().encode(
      args as UpdateMetadataInstructionDataArgs
    ),
  } as UpdateMetadataInstruction<
    TProgramAddress,
    TAccountTreeAuthority,
    TAccountAuthority,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionAuthorityRecordPda,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountPayer,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedUpdateMetadataInstruction<
  TProgram extends string = typeof BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeAuthority: TAccountMetas[0];
    /**
     * Either collection authority or tree owner/delegate, depending
     * on whether the item is in a verified collection
     */

    authority: TAccountMetas[1];
    /** Used when item is in a verified collection */
    collectionMint?: TAccountMetas[2] | undefined;
    /** Used when item is in a verified collection */
    collectionMetadata?: TAccountMetas[3] | undefined;
    collectionAuthorityRecordPda?: TAccountMetas[4] | undefined;
    leafOwner: TAccountMetas[5];
    leafDelegate: TAccountMetas[6];
    payer: TAccountMetas[7];
    merkleTree: TAccountMetas[8];
    logWrapper: TAccountMetas[9];
    compressionProgram: TAccountMetas[10];
    tokenMetadataProgram: TAccountMetas[11];
    systemProgram: TAccountMetas[12];
  };
  data: UpdateMetadataInstructionData;
};

export function parseUpdateMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === BUBBLEGUM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeAuthority: getNextAccount(),
      authority: getNextAccount(),
      collectionMint: getNextOptionalAccount(),
      collectionMetadata: getNextOptionalAccount(),
      collectionAuthorityRecordPda: getNextOptionalAccount(),
      leafOwner: getNextAccount(),
      leafDelegate: getNextAccount(),
      payer: getNextAccount(),
      merkleTree: getNextAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpdateMetadataInstructionDataDecoder().decode(instruction.data),
  };
}
