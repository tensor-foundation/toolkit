/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  IAccountMeta,
  IAccountSignerMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from '@solana/web3.js';
import { BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';
import {
  MetadataArgs,
  MetadataArgsArgs,
  getMetadataArgsDecoder,
  getMetadataArgsEncoder,
} from '../types';

export type MintToCollectionV1Instruction<
  TProgram extends string = typeof BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeAuthority extends string | IAccountMeta<string> = string,
  TAccountLeafOwner extends string | IAccountMeta<string> = string,
  TAccountLeafDelegate extends string | IAccountMeta<string> = string,
  TAccountMerkleTree extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTreeDelegate extends string | IAccountMeta<string> = string,
  TAccountCollectionAuthority extends string | IAccountMeta<string> = string,
  TAccountCollectionAuthorityRecordPda extends
    | string
    | IAccountMeta<string> = string,
  TAccountCollectionMint extends string | IAccountMeta<string> = string,
  TAccountCollectionMetadata extends string | IAccountMeta<string> = string,
  TAccountEditionAccount extends string | IAccountMeta<string> = string,
  TAccountBubblegumSigner extends string | IAccountMeta<string> = string,
  TAccountLogWrapper extends string | IAccountMeta<string> = string,
  TAccountCompressionProgram extends string | IAccountMeta<string> = string,
  TAccountTokenMetadataProgram extends
    | string
    | IAccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTreeAuthority extends string
        ? WritableAccount<TAccountTreeAuthority>
        : TAccountTreeAuthority,
      TAccountLeafOwner extends string
        ? ReadonlyAccount<TAccountLeafOwner>
        : TAccountLeafOwner,
      TAccountLeafDelegate extends string
        ? ReadonlyAccount<TAccountLeafDelegate>
        : TAccountLeafDelegate,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTreeDelegate extends string
        ? ReadonlySignerAccount<TAccountTreeDelegate> &
            IAccountSignerMeta<TAccountTreeDelegate>
        : TAccountTreeDelegate,
      TAccountCollectionAuthority extends string
        ? ReadonlySignerAccount<TAccountCollectionAuthority> &
            IAccountSignerMeta<TAccountCollectionAuthority>
        : TAccountCollectionAuthority,
      TAccountCollectionAuthorityRecordPda extends string
        ? ReadonlyAccount<TAccountCollectionAuthorityRecordPda>
        : TAccountCollectionAuthorityRecordPda,
      TAccountCollectionMint extends string
        ? ReadonlyAccount<TAccountCollectionMint>
        : TAccountCollectionMint,
      TAccountCollectionMetadata extends string
        ? WritableAccount<TAccountCollectionMetadata>
        : TAccountCollectionMetadata,
      TAccountEditionAccount extends string
        ? ReadonlyAccount<TAccountEditionAccount>
        : TAccountEditionAccount,
      TAccountBubblegumSigner extends string
        ? ReadonlyAccount<TAccountBubblegumSigner>
        : TAccountBubblegumSigner,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintToCollectionV1InstructionData = {
  discriminator: ReadonlyUint8Array;
  metadataArgs: MetadataArgs;
};

export type MintToCollectionV1InstructionDataArgs = {
  metadataArgs: MetadataArgsArgs;
};

export function getMintToCollectionV1InstructionDataEncoder(): Encoder<MintToCollectionV1InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['metadataArgs', getMetadataArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([153, 18, 178, 47, 197, 158, 86, 15]),
    })
  );
}

export function getMintToCollectionV1InstructionDataDecoder(): Decoder<MintToCollectionV1InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['metadataArgs', getMetadataArgsDecoder()],
  ]);
}

export function getMintToCollectionV1InstructionDataCodec(): Codec<
  MintToCollectionV1InstructionDataArgs,
  MintToCollectionV1InstructionData
> {
  return combineCodec(
    getMintToCollectionV1InstructionDataEncoder(),
    getMintToCollectionV1InstructionDataDecoder()
  );
}

export type MintToCollectionV1Input<
  TAccountTreeAuthority extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountPayer extends string = string,
  TAccountTreeDelegate extends string = string,
  TAccountCollectionAuthority extends string = string,
  TAccountCollectionAuthorityRecordPda extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountEditionAccount extends string = string,
  TAccountBubblegumSigner extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeAuthority: Address<TAccountTreeAuthority>;
  leafOwner: Address<TAccountLeafOwner>;
  leafDelegate: Address<TAccountLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  payer: TransactionSigner<TAccountPayer>;
  treeDelegate: TransactionSigner<TAccountTreeDelegate>;
  collectionAuthority: TransactionSigner<TAccountCollectionAuthority>;
  /**
   * If there is no collecton authority record PDA then
   * this must be the Bubblegum program address.
   */
  collectionAuthorityRecordPda: Address<TAccountCollectionAuthorityRecordPda>;
  collectionMint: Address<TAccountCollectionMint>;
  collectionMetadata: Address<TAccountCollectionMetadata>;
  editionAccount: Address<TAccountEditionAccount>;
  bubblegumSigner: Address<TAccountBubblegumSigner>;
  logWrapper: Address<TAccountLogWrapper>;
  compressionProgram: Address<TAccountCompressionProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  metadataArgs: MintToCollectionV1InstructionDataArgs['metadataArgs'];
};

export function getMintToCollectionV1Instruction<
  TAccountTreeAuthority extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountPayer extends string,
  TAccountTreeDelegate extends string,
  TAccountCollectionAuthority extends string,
  TAccountCollectionAuthorityRecordPda extends string,
  TAccountCollectionMint extends string,
  TAccountCollectionMetadata extends string,
  TAccountEditionAccount extends string,
  TAccountBubblegumSigner extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountSystemProgram extends string,
>(
  input: MintToCollectionV1Input<
    TAccountTreeAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountPayer,
    TAccountTreeDelegate,
    TAccountCollectionAuthority,
    TAccountCollectionAuthorityRecordPda,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountEditionAccount,
    TAccountBubblegumSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >
): MintToCollectionV1Instruction<
  typeof BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeAuthority,
  TAccountLeafOwner,
  TAccountLeafDelegate,
  TAccountMerkleTree,
  TAccountPayer,
  TAccountTreeDelegate,
  TAccountCollectionAuthority,
  TAccountCollectionAuthorityRecordPda,
  TAccountCollectionMint,
  TAccountCollectionMetadata,
  TAccountEditionAccount,
  TAccountBubblegumSigner,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountTokenMetadataProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeAuthority: { value: input.treeAuthority ?? null, isWritable: true },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: false },
    treeDelegate: { value: input.treeDelegate ?? null, isWritable: false },
    collectionAuthority: {
      value: input.collectionAuthority ?? null,
      isWritable: false,
    },
    collectionAuthorityRecordPda: {
      value: input.collectionAuthorityRecordPda ?? null,
      isWritable: false,
    },
    collectionMint: { value: input.collectionMint ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    editionAccount: { value: input.editionAccount ?? null, isWritable: false },
    bubblegumSigner: {
      value: input.bubblegumSigner ?? null,
      isWritable: false,
    },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeAuthority),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.treeDelegate),
      getAccountMeta(accounts.collectionAuthority),
      getAccountMeta(accounts.collectionAuthorityRecordPda),
      getAccountMeta(accounts.collectionMint),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.editionAccount),
      getAccountMeta(accounts.bubblegumSigner),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMintToCollectionV1InstructionDataEncoder().encode(
      args as MintToCollectionV1InstructionDataArgs
    ),
  } as MintToCollectionV1Instruction<
    typeof BUBBLEGUM_PROGRAM_ADDRESS,
    TAccountTreeAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountPayer,
    TAccountTreeDelegate,
    TAccountCollectionAuthority,
    TAccountCollectionAuthorityRecordPda,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountEditionAccount,
    TAccountBubblegumSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMintToCollectionV1Instruction<
  TProgram extends string = typeof BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeAuthority: TAccountMetas[0];
    leafOwner: TAccountMetas[1];
    leafDelegate: TAccountMetas[2];
    merkleTree: TAccountMetas[3];
    payer: TAccountMetas[4];
    treeDelegate: TAccountMetas[5];
    collectionAuthority: TAccountMetas[6];
    /**
     * If there is no collecton authority record PDA then
     * this must be the Bubblegum program address.
     */

    collectionAuthorityRecordPda: TAccountMetas[7];
    collectionMint: TAccountMetas[8];
    collectionMetadata: TAccountMetas[9];
    editionAccount: TAccountMetas[10];
    bubblegumSigner: TAccountMetas[11];
    logWrapper: TAccountMetas[12];
    compressionProgram: TAccountMetas[13];
    tokenMetadataProgram: TAccountMetas[14];
    systemProgram: TAccountMetas[15];
  };
  data: MintToCollectionV1InstructionData;
};

export function parseMintToCollectionV1Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMintToCollectionV1Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeAuthority: getNextAccount(),
      leafOwner: getNextAccount(),
      leafDelegate: getNextAccount(),
      merkleTree: getNextAccount(),
      payer: getNextAccount(),
      treeDelegate: getNextAccount(),
      collectionAuthority: getNextAccount(),
      collectionAuthorityRecordPda: getNextAccount(),
      collectionMint: getNextAccount(),
      collectionMetadata: getNextAccount(),
      editionAccount: getNextAccount(),
      bubblegumSigner: getNextAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMintToCollectionV1InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
