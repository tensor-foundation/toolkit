/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
  ReadonlyUint8Array,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
} from '@solana/web3.js';

export type LeafSchema = {
  __kind: 'V1';
  id: Address;
  owner: Address;
  delegate: Address;
  nonce: bigint;
  dataHash: ReadonlyUint8Array;
  creatorHash: ReadonlyUint8Array;
};

export type LeafSchemaArgs = {
  __kind: 'V1';
  id: Address;
  owner: Address;
  delegate: Address;
  nonce: number | bigint;
  dataHash: ReadonlyUint8Array;
  creatorHash: ReadonlyUint8Array;
};

export function getLeafSchemaEncoder(): Encoder<LeafSchemaArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'V1',
      getStructEncoder([
        ['id', getAddressEncoder()],
        ['owner', getAddressEncoder()],
        ['delegate', getAddressEncoder()],
        ['nonce', getU64Encoder()],
        ['dataHash', fixEncoderSize(getBytesEncoder(), 32)],
        ['creatorHash', fixEncoderSize(getBytesEncoder(), 32)],
      ]),
    ],
  ]);
}

export function getLeafSchemaDecoder(): Decoder<LeafSchema> {
  return getDiscriminatedUnionDecoder([
    [
      'V1',
      getStructDecoder([
        ['id', getAddressDecoder()],
        ['owner', getAddressDecoder()],
        ['delegate', getAddressDecoder()],
        ['nonce', getU64Decoder()],
        ['dataHash', fixDecoderSize(getBytesDecoder(), 32)],
        ['creatorHash', fixDecoderSize(getBytesDecoder(), 32)],
      ]),
    ],
  ]);
}

export function getLeafSchemaCodec(): Codec<LeafSchemaArgs, LeafSchema> {
  return combineCodec(getLeafSchemaEncoder(), getLeafSchemaDecoder());
}

// Data Enum Helpers.
export function leafSchema(
  kind: 'V1',
  data: GetDiscriminatedUnionVariantContent<LeafSchemaArgs, '__kind', 'V1'>
): GetDiscriminatedUnionVariant<LeafSchemaArgs, '__kind', 'V1'>;
export function leafSchema<K extends LeafSchemaArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isLeafSchema<K extends LeafSchema['__kind']>(
  kind: K,
  value: LeafSchema
): value is LeafSchema & { __kind: K } {
  return value.__kind === kind;
}
