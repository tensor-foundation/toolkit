/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  Option,
  OptionOrNullable,
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  mapEncoder,
} from '@solana/codecs';
import { MasterEditionSeeds, findMasterEditionPda } from '../pdas';
import { Key, getKeyDecoder, getKeyEncoder } from '../types';

export type MasterEdition<TAddress extends string = string> = Account<
  MasterEditionAccountData,
  TAddress
>;

export type MaybeMasterEdition<TAddress extends string = string> = MaybeAccount<
  MasterEditionAccountData,
  TAddress
>;

export type MasterEditionAccountData = {
  key: Key;
  supply: bigint;
  maxSupply: Option<bigint>;
};

export type MasterEditionAccountDataArgs = {
  supply: number | bigint;
  maxSupply: OptionOrNullable<number | bigint>;
};

export function getMasterEditionAccountDataEncoder(): Encoder<MasterEditionAccountDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['key', getKeyEncoder()],
      ['supply', getU64Encoder()],
      ['maxSupply', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, key: Key.MasterEditionV2 })
  );
}

export function getMasterEditionAccountDataDecoder(): Decoder<MasterEditionAccountData> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['supply', getU64Decoder()],
    ['maxSupply', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getMasterEditionAccountDataCodec(): Codec<
  MasterEditionAccountDataArgs,
  MasterEditionAccountData
> {
  return combineCodec(
    getMasterEditionAccountDataEncoder(),
    getMasterEditionAccountDataDecoder()
  );
}

export function decodeMasterEdition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): MasterEdition<TAddress>;
export function decodeMasterEdition<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeMasterEdition<TAddress>;
export function decodeMasterEdition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): MasterEdition<TAddress> | MaybeMasterEdition<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMasterEditionAccountDataDecoder()
  );
}

export async function fetchMasterEdition<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MasterEdition<TAddress>> {
  const maybeAccount = await fetchMaybeMasterEdition(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMasterEdition<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeMasterEdition<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMasterEdition(maybeAccount);
}

export async function fetchAllMasterEdition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MasterEdition[]> {
  const maybeAccounts = await fetchAllMaybeMasterEdition(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMasterEdition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeMasterEdition[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMasterEdition(maybeAccount));
}

export async function fetchMasterEditionFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MasterEditionSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MasterEdition> {
  const maybeAccount = await fetchMaybeMasterEditionFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMasterEditionFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MasterEditionSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeMasterEdition> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findMasterEditionPda(seeds, { programAddress });
  return fetchMaybeMasterEdition(rpc, address, fetchConfig);
}
