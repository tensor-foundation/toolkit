/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  Option,
  OptionOrNullable,
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import { TokenRecordSeeds, findTokenRecordPda } from '../pdas';
import {
  Key,
  TokenDelegateRole,
  TokenDelegateRoleArgs,
  TokenState,
  TokenStateArgs,
  getKeyDecoder,
  getKeyEncoder,
  getTokenDelegateRoleDecoder,
  getTokenDelegateRoleEncoder,
  getTokenStateDecoder,
  getTokenStateEncoder,
} from '../types';

export type TokenRecord<TAddress extends string = string> = Account<
  TokenRecordAccountData,
  TAddress
>;

export type MaybeTokenRecord<TAddress extends string = string> = MaybeAccount<
  TokenRecordAccountData,
  TAddress
>;

export type TokenRecordAccountData = {
  key: Key;
  bump: number;
  state: TokenState;
  ruleSetRevision: Option<bigint>;
  delegate: Option<Address>;
  delegateRole: Option<TokenDelegateRole>;
  lockedTransfer: Option<Address>;
};

export type TokenRecordAccountDataArgs = {
  bump: number;
  state: TokenStateArgs;
  ruleSetRevision: OptionOrNullable<number | bigint>;
  delegate: OptionOrNullable<Address>;
  delegateRole: OptionOrNullable<TokenDelegateRoleArgs>;
  lockedTransfer: OptionOrNullable<Address>;
};

export function getTokenRecordAccountDataEncoder(): Encoder<TokenRecordAccountDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['key', getKeyEncoder()],
      ['bump', getU8Encoder()],
      ['state', getTokenStateEncoder()],
      ['ruleSetRevision', getOptionEncoder(getU64Encoder())],
      ['delegate', getOptionEncoder(getAddressEncoder())],
      ['delegateRole', getOptionEncoder(getTokenDelegateRoleEncoder())],
      ['lockedTransfer', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, key: Key.TokenRecord })
  );
}

export function getTokenRecordAccountDataDecoder(): Decoder<TokenRecordAccountData> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['bump', getU8Decoder()],
    ['state', getTokenStateDecoder()],
    ['ruleSetRevision', getOptionDecoder(getU64Decoder())],
    ['delegate', getOptionDecoder(getAddressDecoder())],
    ['delegateRole', getOptionDecoder(getTokenDelegateRoleDecoder())],
    ['lockedTransfer', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getTokenRecordAccountDataCodec(): Codec<
  TokenRecordAccountDataArgs,
  TokenRecordAccountData
> {
  return combineCodec(
    getTokenRecordAccountDataEncoder(),
    getTokenRecordAccountDataDecoder()
  );
}

export function decodeTokenRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): TokenRecord<TAddress>;
export function decodeTokenRecord<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeTokenRecord<TAddress>;
export function decodeTokenRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): TokenRecord<TAddress> | MaybeTokenRecord<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTokenRecordAccountDataDecoder()
  );
}

export async function fetchTokenRecord<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<TokenRecord<TAddress>> {
  const maybeAccount = await fetchMaybeTokenRecord(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenRecord<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeTokenRecord<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTokenRecord(maybeAccount);
}

export async function fetchAllTokenRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<TokenRecord[]> {
  const maybeAccounts = await fetchAllMaybeTokenRecord(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTokenRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeTokenRecord[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTokenRecord(maybeAccount));
}

export function getTokenRecordSize(): number {
  return 80;
}

export async function fetchTokenRecordFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: TokenRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<TokenRecord> {
  const maybeAccount = await fetchMaybeTokenRecordFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenRecordFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: TokenRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeTokenRecord> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findTokenRecordPda(seeds, { programAddress });
  return fetchMaybeTokenRecord(rpc, address, fetchConfig);
}
