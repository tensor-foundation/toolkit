/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
} from '@solana/codecs';
import { EditionMarkerV2Seeds, findEditionMarkerV2Pda } from '../pdas';
import { Key, KeyArgs, getKeyDecoder, getKeyEncoder } from '../types';

export type EditionMarkerV2<TAddress extends string = string> = Account<
  EditionMarkerV2AccountData,
  TAddress
>;

export type MaybeEditionMarkerV2<TAddress extends string = string> =
  MaybeAccount<EditionMarkerV2AccountData, TAddress>;

export type EditionMarkerV2AccountData = { key: Key; ledger: Uint8Array };

export type EditionMarkerV2AccountDataArgs = {
  key: KeyArgs;
  ledger: Uint8Array;
};

export function getEditionMarkerV2AccountDataEncoder(): Encoder<EditionMarkerV2AccountDataArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['ledger', getBytesEncoder({ size: getU32Encoder() })],
  ]);
}

export function getEditionMarkerV2AccountDataDecoder(): Decoder<EditionMarkerV2AccountData> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['ledger', getBytesDecoder({ size: getU32Decoder() })],
  ]);
}

export function getEditionMarkerV2AccountDataCodec(): Codec<
  EditionMarkerV2AccountDataArgs,
  EditionMarkerV2AccountData
> {
  return combineCodec(
    getEditionMarkerV2AccountDataEncoder(),
    getEditionMarkerV2AccountDataDecoder()
  );
}

export function decodeEditionMarkerV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): EditionMarkerV2<TAddress>;
export function decodeEditionMarkerV2<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeEditionMarkerV2<TAddress>;
export function decodeEditionMarkerV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): EditionMarkerV2<TAddress> | MaybeEditionMarkerV2<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEditionMarkerV2AccountDataDecoder()
  );
}

export async function fetchEditionMarkerV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<EditionMarkerV2<TAddress>> {
  const maybeAccount = await fetchMaybeEditionMarkerV2(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEditionMarkerV2<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeEditionMarkerV2<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEditionMarkerV2(maybeAccount);
}

export async function fetchAllEditionMarkerV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<EditionMarkerV2[]> {
  const maybeAccounts = await fetchAllMaybeEditionMarkerV2(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEditionMarkerV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeEditionMarkerV2[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeEditionMarkerV2(maybeAccount)
  );
}

export async function fetchEditionMarkerV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: EditionMarkerV2Seeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<EditionMarkerV2> {
  const maybeAccount = await fetchMaybeEditionMarkerV2FromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEditionMarkerV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: EditionMarkerV2Seeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeEditionMarkerV2> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findEditionMarkerV2Pda(seeds, { programAddress });
  return fetchMaybeEditionMarkerV2(rpc, address, fetchConfig);
}
