/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  GetDataEnumKind,
  GetDataEnumKindContent,
  Option,
  OptionOrNullable,
  combineCodec,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  mapEncoder,
  none,
} from '@solana/codecs';
import {
  AuthorizationData,
  AuthorizationDataArgs,
  getAuthorizationDataDecoder,
  getAuthorizationDataEncoder,
} from '.';

export type DelegateArgs =
  | { __kind: 'CollectionV1'; authorizationData: Option<AuthorizationData> }
  | {
      __kind: 'SaleV1';
      amount: bigint;
      authorizationData: Option<AuthorizationData>;
    }
  | {
      __kind: 'TransferV1';
      amount: bigint;
      authorizationData: Option<AuthorizationData>;
    }
  | { __kind: 'DataV1'; authorizationData: Option<AuthorizationData> }
  | {
      __kind: 'UtilityV1';
      amount: bigint;
      authorizationData: Option<AuthorizationData>;
    }
  | {
      __kind: 'StakingV1';
      amount: bigint;
      authorizationData: Option<AuthorizationData>;
    }
  | { __kind: 'StandardV1'; amount: bigint }
  | {
      __kind: 'LockedTransferV1';
      amount: bigint;
      lockedAddress: Address;
      authorizationData: Option<AuthorizationData>;
    }
  | {
      __kind: 'ProgrammableConfigV1';
      authorizationData: Option<AuthorizationData>;
    }
  | { __kind: 'AuthorityItemV1'; authorizationData: Option<AuthorizationData> }
  | { __kind: 'DataItemV1'; authorizationData: Option<AuthorizationData> }
  | { __kind: 'CollectionItemV1'; authorizationData: Option<AuthorizationData> }
  | {
      __kind: 'ProgrammableConfigItemV1';
      authorizationData: Option<AuthorizationData>;
    };

export type DelegateArgsArgs =
  | {
      __kind: 'CollectionV1';
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'SaleV1';
      amount?: number | bigint;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'TransferV1';
      amount?: number | bigint;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'DataV1';
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'UtilityV1';
      amount?: number | bigint;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'StakingV1';
      amount?: number | bigint;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | { __kind: 'StandardV1'; amount?: number | bigint }
  | {
      __kind: 'LockedTransferV1';
      amount?: number | bigint;
      lockedAddress: Address;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'ProgrammableConfigV1';
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'AuthorityItemV1';
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'DataItemV1';
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'CollectionItemV1';
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'ProgrammableConfigItemV1';
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    };

export function getDelegateArgsEncoder(): Encoder<DelegateArgsArgs> {
  return getDataEnumEncoder([
    [
      'CollectionV1',
      mapEncoder(
        getStructEncoder([
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'SaleV1',
      mapEncoder(
        getStructEncoder([
          ['amount', getU64Encoder()],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          amount: value.amount ?? 1,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'TransferV1',
      mapEncoder(
        getStructEncoder([
          ['amount', getU64Encoder()],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          amount: value.amount ?? 1,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'DataV1',
      mapEncoder(
        getStructEncoder([
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'UtilityV1',
      mapEncoder(
        getStructEncoder([
          ['amount', getU64Encoder()],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          amount: value.amount ?? 1,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'StakingV1',
      mapEncoder(
        getStructEncoder([
          ['amount', getU64Encoder()],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          amount: value.amount ?? 1,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'StandardV1',
      mapEncoder(getStructEncoder([['amount', getU64Encoder()]]), (value) => ({
        ...value,
        amount: value.amount ?? 1,
      })),
    ],
    [
      'LockedTransferV1',
      mapEncoder(
        getStructEncoder([
          ['amount', getU64Encoder()],
          ['lockedAddress', getAddressEncoder()],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          amount: value.amount ?? 1,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'ProgrammableConfigV1',
      mapEncoder(
        getStructEncoder([
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'AuthorityItemV1',
      mapEncoder(
        getStructEncoder([
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'DataItemV1',
      mapEncoder(
        getStructEncoder([
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'CollectionItemV1',
      mapEncoder(
        getStructEncoder([
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'ProgrammableConfigItemV1',
      mapEncoder(
        getStructEncoder([
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
  ]);
}

export function getDelegateArgsDecoder(): Decoder<DelegateArgs> {
  return getDataEnumDecoder([
    [
      'CollectionV1',
      getStructDecoder([
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'SaleV1',
      getStructDecoder([
        ['amount', getU64Decoder()],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'TransferV1',
      getStructDecoder([
        ['amount', getU64Decoder()],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'DataV1',
      getStructDecoder([
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'UtilityV1',
      getStructDecoder([
        ['amount', getU64Decoder()],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'StakingV1',
      getStructDecoder([
        ['amount', getU64Decoder()],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    ['StandardV1', getStructDecoder([['amount', getU64Decoder()]])],
    [
      'LockedTransferV1',
      getStructDecoder([
        ['amount', getU64Decoder()],
        ['lockedAddress', getAddressDecoder()],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'ProgrammableConfigV1',
      getStructDecoder([
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'AuthorityItemV1',
      getStructDecoder([
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'DataItemV1',
      getStructDecoder([
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'CollectionItemV1',
      getStructDecoder([
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'ProgrammableConfigItemV1',
      getStructDecoder([
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
  ]);
}

export function getDelegateArgsCodec(): Codec<DelegateArgsArgs, DelegateArgs> {
  return combineCodec(getDelegateArgsEncoder(), getDelegateArgsDecoder());
}

// Data Enum Helpers.
export function delegateArgs(
  kind: 'CollectionV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'CollectionV1'>
): GetDataEnumKind<DelegateArgsArgs, 'CollectionV1'>;
export function delegateArgs(
  kind: 'SaleV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'SaleV1'>
): GetDataEnumKind<DelegateArgsArgs, 'SaleV1'>;
export function delegateArgs(
  kind: 'TransferV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'TransferV1'>
): GetDataEnumKind<DelegateArgsArgs, 'TransferV1'>;
export function delegateArgs(
  kind: 'DataV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'DataV1'>
): GetDataEnumKind<DelegateArgsArgs, 'DataV1'>;
export function delegateArgs(
  kind: 'UtilityV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'UtilityV1'>
): GetDataEnumKind<DelegateArgsArgs, 'UtilityV1'>;
export function delegateArgs(
  kind: 'StakingV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'StakingV1'>
): GetDataEnumKind<DelegateArgsArgs, 'StakingV1'>;
export function delegateArgs(
  kind: 'StandardV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'StandardV1'>
): GetDataEnumKind<DelegateArgsArgs, 'StandardV1'>;
export function delegateArgs(
  kind: 'LockedTransferV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'LockedTransferV1'>
): GetDataEnumKind<DelegateArgsArgs, 'LockedTransferV1'>;
export function delegateArgs(
  kind: 'ProgrammableConfigV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'ProgrammableConfigV1'>
): GetDataEnumKind<DelegateArgsArgs, 'ProgrammableConfigV1'>;
export function delegateArgs(
  kind: 'AuthorityItemV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'AuthorityItemV1'>
): GetDataEnumKind<DelegateArgsArgs, 'AuthorityItemV1'>;
export function delegateArgs(
  kind: 'DataItemV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'DataItemV1'>
): GetDataEnumKind<DelegateArgsArgs, 'DataItemV1'>;
export function delegateArgs(
  kind: 'CollectionItemV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'CollectionItemV1'>
): GetDataEnumKind<DelegateArgsArgs, 'CollectionItemV1'>;
export function delegateArgs(
  kind: 'ProgrammableConfigItemV1',
  data: GetDataEnumKindContent<DelegateArgsArgs, 'ProgrammableConfigItemV1'>
): GetDataEnumKind<DelegateArgsArgs, 'ProgrammableConfigItemV1'>;
export function delegateArgs<K extends DelegateArgsArgs['__kind']>(
  kind: K,
  data?: any
): Extract<DelegateArgsArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isDelegateArgs<K extends DelegateArgs['__kind']>(
  kind: K,
  value: DelegateArgs
): value is DelegateArgs & { __kind: K } {
  return value.__kind === kind;
}
