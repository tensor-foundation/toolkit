/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import {
  findMasterEditionPda,
  findMetadataPda,
  findTokenRecordPda,
} from '../pdas';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  expectAddress,
  getAccountMetasWithSigners,
} from '../shared';
import { TokenStandard, TokenStandardArgs } from '../types';

export type BurnV1Instruction<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountCollectionMetadata extends string | IAccountMeta<string> = string,
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountEdition extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountToken extends string | IAccountMeta<string> = string,
  TAccountMasterEdition extends string | IAccountMeta<string> = string,
  TAccountMasterEditionMint extends string | IAccountMeta<string> = string,
  TAccountMasterEditionToken extends string | IAccountMeta<string> = string,
  TAccountEditionMarker extends string | IAccountMeta<string> = string,
  TAccountTokenRecord extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountSysvarInstructions extends
    | string
    | IAccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TAccountSplTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends Array<IAccountMeta<string>> = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountCollectionMetadata extends string
        ? WritableAccount<TAccountCollectionMetadata>
        : TAccountCollectionMetadata,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountEdition extends string
        ? WritableAccount<TAccountEdition>
        : TAccountEdition,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountToken extends string
        ? WritableAccount<TAccountToken>
        : TAccountToken,
      TAccountMasterEdition extends string
        ? WritableAccount<TAccountMasterEdition>
        : TAccountMasterEdition,
      TAccountMasterEditionMint extends string
        ? ReadonlyAccount<TAccountMasterEditionMint>
        : TAccountMasterEditionMint,
      TAccountMasterEditionToken extends string
        ? ReadonlyAccount<TAccountMasterEditionToken>
        : TAccountMasterEditionToken,
      TAccountEditionMarker extends string
        ? WritableAccount<TAccountEditionMarker>
        : TAccountEditionMarker,
      TAccountTokenRecord extends string
        ? WritableAccount<TAccountTokenRecord>
        : TAccountTokenRecord,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSysvarInstructions extends string
        ? ReadonlyAccount<TAccountSysvarInstructions>
        : TAccountSysvarInstructions,
      TAccountSplTokenProgram extends string
        ? ReadonlyAccount<TAccountSplTokenProgram>
        : TAccountSplTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BurnV1InstructionWithSigners<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountCollectionMetadata extends string | IAccountMeta<string> = string,
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountEdition extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountToken extends string | IAccountMeta<string> = string,
  TAccountMasterEdition extends string | IAccountMeta<string> = string,
  TAccountMasterEditionMint extends string | IAccountMeta<string> = string,
  TAccountMasterEditionToken extends string | IAccountMeta<string> = string,
  TAccountEditionMarker extends string | IAccountMeta<string> = string,
  TAccountTokenRecord extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountSysvarInstructions extends
    | string
    | IAccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TAccountSplTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends Array<IAccountMeta<string>> = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountCollectionMetadata extends string
        ? WritableAccount<TAccountCollectionMetadata>
        : TAccountCollectionMetadata,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountEdition extends string
        ? WritableAccount<TAccountEdition>
        : TAccountEdition,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountToken extends string
        ? WritableAccount<TAccountToken>
        : TAccountToken,
      TAccountMasterEdition extends string
        ? WritableAccount<TAccountMasterEdition>
        : TAccountMasterEdition,
      TAccountMasterEditionMint extends string
        ? ReadonlyAccount<TAccountMasterEditionMint>
        : TAccountMasterEditionMint,
      TAccountMasterEditionToken extends string
        ? ReadonlyAccount<TAccountMasterEditionToken>
        : TAccountMasterEditionToken,
      TAccountEditionMarker extends string
        ? WritableAccount<TAccountEditionMarker>
        : TAccountEditionMarker,
      TAccountTokenRecord extends string
        ? WritableAccount<TAccountTokenRecord>
        : TAccountTokenRecord,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSysvarInstructions extends string
        ? ReadonlyAccount<TAccountSysvarInstructions>
        : TAccountSysvarInstructions,
      TAccountSplTokenProgram extends string
        ? ReadonlyAccount<TAccountSplTokenProgram>
        : TAccountSplTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BurnV1InstructionData = {
  discriminator: number;
  burnV1Discriminator: number;
  amount: bigint;
};

export type BurnV1InstructionDataArgs = { amount?: number | bigint };

export function getBurnV1InstructionDataEncoder(): Encoder<BurnV1InstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['burnV1Discriminator', getU8Encoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: 41,
      burnV1Discriminator: 0,
      amount: value.amount ?? 1,
    })
  );
}

export function getBurnV1InstructionDataDecoder(): Decoder<BurnV1InstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['burnV1Discriminator', getU8Decoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getBurnV1InstructionDataCodec(): Codec<
  BurnV1InstructionDataArgs,
  BurnV1InstructionData
> {
  return combineCodec(
    getBurnV1InstructionDataEncoder(),
    getBurnV1InstructionDataDecoder()
  );
}

export type BurnV1InstructionExtraArgs = {
  tokenOwner: Address;
  tokenStandard: TokenStandardArgs;
};

export type BurnV1AsyncInput<
  TAccountAuthority extends string,
  TAccountCollectionMetadata extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountToken extends string,
  TAccountMasterEdition extends string,
  TAccountMasterEditionMint extends string,
  TAccountMasterEditionToken extends string,
  TAccountEditionMarker extends string,
  TAccountTokenRecord extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
> = {
  /** Asset owner or Utility delegate */
  authority: Address<TAccountAuthority>;
  /** Metadata of the Collection */
  collectionMetadata?: Address<TAccountCollectionMetadata>;
  /** Metadata (pda of ['metadata', program id, mint id]) */
  metadata?: Address<TAccountMetadata>;
  /** Edition of the asset */
  edition?: Address<TAccountEdition>;
  /** Mint of token asset */
  mint: Address<TAccountMint>;
  /** Token account to close */
  token: Address<TAccountToken>;
  /** Master edition account */
  masterEdition?: Address<TAccountMasterEdition>;
  /** Master edition mint of the asset */
  masterEditionMint?: Address<TAccountMasterEditionMint>;
  /** Master edition token account */
  masterEditionToken?: Address<TAccountMasterEditionToken>;
  /** Edition marker account */
  editionMarker?: Address<TAccountEditionMarker>;
  /** Token record account */
  tokenRecord?: Address<TAccountTokenRecord>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Instructions sysvar account */
  sysvarInstructions?: Address<TAccountSysvarInstructions>;
  /** SPL Token Program */
  splTokenProgram?: Address<TAccountSplTokenProgram>;
  amount?: BurnV1InstructionDataArgs['amount'];
  tokenOwner?: BurnV1InstructionExtraArgs['tokenOwner'];
  tokenStandard: BurnV1InstructionExtraArgs['tokenStandard'];
};

export type BurnV1AsyncInputWithSigners<
  TAccountAuthority extends string,
  TAccountCollectionMetadata extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountToken extends string,
  TAccountMasterEdition extends string,
  TAccountMasterEditionMint extends string,
  TAccountMasterEditionToken extends string,
  TAccountEditionMarker extends string,
  TAccountTokenRecord extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
> = {
  /** Asset owner or Utility delegate */
  authority: TransactionSigner<TAccountAuthority>;
  /** Metadata of the Collection */
  collectionMetadata?: Address<TAccountCollectionMetadata>;
  /** Metadata (pda of ['metadata', program id, mint id]) */
  metadata?: Address<TAccountMetadata>;
  /** Edition of the asset */
  edition?: Address<TAccountEdition>;
  /** Mint of token asset */
  mint: Address<TAccountMint>;
  /** Token account to close */
  token: Address<TAccountToken>;
  /** Master edition account */
  masterEdition?: Address<TAccountMasterEdition>;
  /** Master edition mint of the asset */
  masterEditionMint?: Address<TAccountMasterEditionMint>;
  /** Master edition token account */
  masterEditionToken?: Address<TAccountMasterEditionToken>;
  /** Edition marker account */
  editionMarker?: Address<TAccountEditionMarker>;
  /** Token record account */
  tokenRecord?: Address<TAccountTokenRecord>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Instructions sysvar account */
  sysvarInstructions?: Address<TAccountSysvarInstructions>;
  /** SPL Token Program */
  splTokenProgram?: Address<TAccountSplTokenProgram>;
  amount?: BurnV1InstructionDataArgs['amount'];
  tokenOwner?: BurnV1InstructionExtraArgs['tokenOwner'];
  tokenStandard: BurnV1InstructionExtraArgs['tokenStandard'];
};

export async function getBurnV1InstructionAsync<
  TAccountAuthority extends string,
  TAccountCollectionMetadata extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountToken extends string,
  TAccountMasterEdition extends string,
  TAccountMasterEditionMint extends string,
  TAccountMasterEditionToken extends string,
  TAccountEditionMarker extends string,
  TAccountTokenRecord extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
>(
  input: BurnV1AsyncInputWithSigners<
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountToken,
    TAccountMasterEdition,
    TAccountMasterEditionMint,
    TAccountMasterEditionToken,
    TAccountEditionMarker,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram
  >
): Promise<
  BurnV1InstructionWithSigners<
    TProgram,
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountToken,
    TAccountMasterEdition,
    TAccountMasterEditionMint,
    TAccountMasterEditionToken,
    TAccountEditionMarker,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram
  >
>;
export async function getBurnV1InstructionAsync<
  TAccountAuthority extends string,
  TAccountCollectionMetadata extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountToken extends string,
  TAccountMasterEdition extends string,
  TAccountMasterEditionMint extends string,
  TAccountMasterEditionToken extends string,
  TAccountEditionMarker extends string,
  TAccountTokenRecord extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
>(
  input: BurnV1AsyncInput<
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountToken,
    TAccountMasterEdition,
    TAccountMasterEditionMint,
    TAccountMasterEditionToken,
    TAccountEditionMarker,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram
  >
): Promise<
  BurnV1Instruction<
    TProgram,
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountToken,
    TAccountMasterEdition,
    TAccountMasterEditionMint,
    TAccountMasterEditionToken,
    TAccountEditionMarker,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram
  >
>;
export async function getBurnV1InstructionAsync<
  TAccountAuthority extends string,
  TAccountCollectionMetadata extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountToken extends string,
  TAccountMasterEdition extends string,
  TAccountMasterEditionMint extends string,
  TAccountMasterEditionToken extends string,
  TAccountEditionMarker extends string,
  TAccountTokenRecord extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
>(
  input: BurnV1AsyncInput<
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountToken,
    TAccountMasterEdition,
    TAccountMasterEditionMint,
    TAccountMasterEditionToken,
    TAccountEditionMarker,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram
  >
): Promise<IInstruction> {
  // Program address.
  const programAddress =
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getBurnV1InstructionRaw<
      TProgram,
      TAccountAuthority,
      TAccountCollectionMetadata,
      TAccountMetadata,
      TAccountEdition,
      TAccountMint,
      TAccountToken,
      TAccountMasterEdition,
      TAccountMasterEditionMint,
      TAccountMasterEditionToken,
      TAccountEditionMarker,
      TAccountTokenRecord,
      TAccountSystemProgram,
      TAccountSysvarInstructions,
      TAccountSplTokenProgram
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    authority: { value: input.authority ?? null, isWritable: true },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    metadata: { value: input.metadata ?? null, isWritable: true },
    edition: { value: input.edition ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    token: { value: input.token ?? null, isWritable: true },
    masterEdition: { value: input.masterEdition ?? null, isWritable: true },
    masterEditionMint: {
      value: input.masterEditionMint ?? null,
      isWritable: false,
    },
    masterEditionToken: {
      value: input.masterEditionToken ?? null,
      isWritable: false,
    },
    editionMarker: { value: input.editionMarker ?? null, isWritable: true },
    tokenRecord: { value: input.tokenRecord ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    sysvarInstructions: {
      value: input.sysvarInstructions ?? null,
      isWritable: false,
    },
    splTokenProgram: {
      value: input.splTokenProgram ?? null,
      isWritable: false,
    },
  };

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.metadata.value) {
    accounts.metadata.value = await findMetadataPda({
      mint: expectAddress(accounts.mint.value),
    });
  }
  if (!accounts.masterEdition.value) {
    if (accounts.masterEditionMint.value) {
      accounts.masterEdition.value = await findMasterEditionPda({
        mint: expectAddress(accounts.masterEditionMint.value),
      });
    }
  }
  if (!accounts.tokenRecord.value) {
    if (args.tokenStandard === TokenStandard.ProgrammableNonFungible) {
      accounts.tokenRecord.value = await findTokenRecordPda({
        mint: expectAddress(accounts.mint.value),
        token: expectAddress(accounts.token.value),
      });
    }
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.sysvarInstructions.value) {
    accounts.sysvarInstructions.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }
  if (!accounts.splTokenProgram.value) {
    accounts.splTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getBurnV1InstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as BurnV1InstructionDataArgs,
    programAddress
  );

  return instruction;
}

export type BurnV1Input<
  TAccountAuthority extends string,
  TAccountCollectionMetadata extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountToken extends string,
  TAccountMasterEdition extends string,
  TAccountMasterEditionMint extends string,
  TAccountMasterEditionToken extends string,
  TAccountEditionMarker extends string,
  TAccountTokenRecord extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
> = {
  /** Asset owner or Utility delegate */
  authority: Address<TAccountAuthority>;
  /** Metadata of the Collection */
  collectionMetadata?: Address<TAccountCollectionMetadata>;
  /** Metadata (pda of ['metadata', program id, mint id]) */
  metadata: Address<TAccountMetadata>;
  /** Edition of the asset */
  edition?: Address<TAccountEdition>;
  /** Mint of token asset */
  mint: Address<TAccountMint>;
  /** Token account to close */
  token: Address<TAccountToken>;
  /** Master edition account */
  masterEdition?: Address<TAccountMasterEdition>;
  /** Master edition mint of the asset */
  masterEditionMint?: Address<TAccountMasterEditionMint>;
  /** Master edition token account */
  masterEditionToken?: Address<TAccountMasterEditionToken>;
  /** Edition marker account */
  editionMarker?: Address<TAccountEditionMarker>;
  /** Token record account */
  tokenRecord?: Address<TAccountTokenRecord>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Instructions sysvar account */
  sysvarInstructions?: Address<TAccountSysvarInstructions>;
  /** SPL Token Program */
  splTokenProgram?: Address<TAccountSplTokenProgram>;
  amount?: BurnV1InstructionDataArgs['amount'];
  tokenOwner?: BurnV1InstructionExtraArgs['tokenOwner'];
  tokenStandard: BurnV1InstructionExtraArgs['tokenStandard'];
};

export type BurnV1InputWithSigners<
  TAccountAuthority extends string,
  TAccountCollectionMetadata extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountToken extends string,
  TAccountMasterEdition extends string,
  TAccountMasterEditionMint extends string,
  TAccountMasterEditionToken extends string,
  TAccountEditionMarker extends string,
  TAccountTokenRecord extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
> = {
  /** Asset owner or Utility delegate */
  authority: TransactionSigner<TAccountAuthority>;
  /** Metadata of the Collection */
  collectionMetadata?: Address<TAccountCollectionMetadata>;
  /** Metadata (pda of ['metadata', program id, mint id]) */
  metadata: Address<TAccountMetadata>;
  /** Edition of the asset */
  edition?: Address<TAccountEdition>;
  /** Mint of token asset */
  mint: Address<TAccountMint>;
  /** Token account to close */
  token: Address<TAccountToken>;
  /** Master edition account */
  masterEdition?: Address<TAccountMasterEdition>;
  /** Master edition mint of the asset */
  masterEditionMint?: Address<TAccountMasterEditionMint>;
  /** Master edition token account */
  masterEditionToken?: Address<TAccountMasterEditionToken>;
  /** Edition marker account */
  editionMarker?: Address<TAccountEditionMarker>;
  /** Token record account */
  tokenRecord?: Address<TAccountTokenRecord>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Instructions sysvar account */
  sysvarInstructions?: Address<TAccountSysvarInstructions>;
  /** SPL Token Program */
  splTokenProgram?: Address<TAccountSplTokenProgram>;
  amount?: BurnV1InstructionDataArgs['amount'];
  tokenOwner?: BurnV1InstructionExtraArgs['tokenOwner'];
  tokenStandard: BurnV1InstructionExtraArgs['tokenStandard'];
};

export function getBurnV1Instruction<
  TAccountAuthority extends string,
  TAccountCollectionMetadata extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountToken extends string,
  TAccountMasterEdition extends string,
  TAccountMasterEditionMint extends string,
  TAccountMasterEditionToken extends string,
  TAccountEditionMarker extends string,
  TAccountTokenRecord extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
>(
  input: BurnV1InputWithSigners<
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountToken,
    TAccountMasterEdition,
    TAccountMasterEditionMint,
    TAccountMasterEditionToken,
    TAccountEditionMarker,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram
  >
): BurnV1InstructionWithSigners<
  TProgram,
  TAccountAuthority,
  TAccountCollectionMetadata,
  TAccountMetadata,
  TAccountEdition,
  TAccountMint,
  TAccountToken,
  TAccountMasterEdition,
  TAccountMasterEditionMint,
  TAccountMasterEditionToken,
  TAccountEditionMarker,
  TAccountTokenRecord,
  TAccountSystemProgram,
  TAccountSysvarInstructions,
  TAccountSplTokenProgram
>;
export function getBurnV1Instruction<
  TAccountAuthority extends string,
  TAccountCollectionMetadata extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountToken extends string,
  TAccountMasterEdition extends string,
  TAccountMasterEditionMint extends string,
  TAccountMasterEditionToken extends string,
  TAccountEditionMarker extends string,
  TAccountTokenRecord extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
>(
  input: BurnV1Input<
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountToken,
    TAccountMasterEdition,
    TAccountMasterEditionMint,
    TAccountMasterEditionToken,
    TAccountEditionMarker,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram
  >
): BurnV1Instruction<
  TProgram,
  TAccountAuthority,
  TAccountCollectionMetadata,
  TAccountMetadata,
  TAccountEdition,
  TAccountMint,
  TAccountToken,
  TAccountMasterEdition,
  TAccountMasterEditionMint,
  TAccountMasterEditionToken,
  TAccountEditionMarker,
  TAccountTokenRecord,
  TAccountSystemProgram,
  TAccountSysvarInstructions,
  TAccountSplTokenProgram
>;
export function getBurnV1Instruction<
  TAccountAuthority extends string,
  TAccountCollectionMetadata extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountToken extends string,
  TAccountMasterEdition extends string,
  TAccountMasterEditionMint extends string,
  TAccountMasterEditionToken extends string,
  TAccountEditionMarker extends string,
  TAccountTokenRecord extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
>(
  input: BurnV1Input<
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountToken,
    TAccountMasterEdition,
    TAccountMasterEditionMint,
    TAccountMasterEditionToken,
    TAccountEditionMarker,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram
  >
): IInstruction {
  // Program address.
  const programAddress =
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getBurnV1InstructionRaw<
      TProgram,
      TAccountAuthority,
      TAccountCollectionMetadata,
      TAccountMetadata,
      TAccountEdition,
      TAccountMint,
      TAccountToken,
      TAccountMasterEdition,
      TAccountMasterEditionMint,
      TAccountMasterEditionToken,
      TAccountEditionMarker,
      TAccountTokenRecord,
      TAccountSystemProgram,
      TAccountSysvarInstructions,
      TAccountSplTokenProgram
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    authority: { value: input.authority ?? null, isWritable: true },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    metadata: { value: input.metadata ?? null, isWritable: true },
    edition: { value: input.edition ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    token: { value: input.token ?? null, isWritable: true },
    masterEdition: { value: input.masterEdition ?? null, isWritable: true },
    masterEditionMint: {
      value: input.masterEditionMint ?? null,
      isWritable: false,
    },
    masterEditionToken: {
      value: input.masterEditionToken ?? null,
      isWritable: false,
    },
    editionMarker: { value: input.editionMarker ?? null, isWritable: true },
    tokenRecord: { value: input.tokenRecord ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    sysvarInstructions: {
      value: input.sysvarInstructions ?? null,
      isWritable: false,
    },
    splTokenProgram: {
      value: input.splTokenProgram ?? null,
      isWritable: false,
    },
  };

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.sysvarInstructions.value) {
    accounts.sysvarInstructions.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }
  if (!accounts.splTokenProgram.value) {
    accounts.splTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getBurnV1InstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as BurnV1InstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getBurnV1InstructionRaw<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountCollectionMetadata extends string | IAccountMeta<string> = string,
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountEdition extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountToken extends string | IAccountMeta<string> = string,
  TAccountMasterEdition extends string | IAccountMeta<string> = string,
  TAccountMasterEditionMint extends string | IAccountMeta<string> = string,
  TAccountMasterEditionToken extends string | IAccountMeta<string> = string,
  TAccountEditionMarker extends string | IAccountMeta<string> = string,
  TAccountTokenRecord extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountSysvarInstructions extends
    | string
    | IAccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TAccountSplTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends Array<IAccountMeta<string>> = [],
>(
  accounts: {
    authority: TAccountAuthority extends string
      ? Address<TAccountAuthority>
      : TAccountAuthority;
    collectionMetadata?: TAccountCollectionMetadata extends string
      ? Address<TAccountCollectionMetadata>
      : TAccountCollectionMetadata;
    metadata: TAccountMetadata extends string
      ? Address<TAccountMetadata>
      : TAccountMetadata;
    edition?: TAccountEdition extends string
      ? Address<TAccountEdition>
      : TAccountEdition;
    mint: TAccountMint extends string ? Address<TAccountMint> : TAccountMint;
    token: TAccountToken extends string
      ? Address<TAccountToken>
      : TAccountToken;
    masterEdition?: TAccountMasterEdition extends string
      ? Address<TAccountMasterEdition>
      : TAccountMasterEdition;
    masterEditionMint?: TAccountMasterEditionMint extends string
      ? Address<TAccountMasterEditionMint>
      : TAccountMasterEditionMint;
    masterEditionToken?: TAccountMasterEditionToken extends string
      ? Address<TAccountMasterEditionToken>
      : TAccountMasterEditionToken;
    editionMarker?: TAccountEditionMarker extends string
      ? Address<TAccountEditionMarker>
      : TAccountEditionMarker;
    tokenRecord?: TAccountTokenRecord extends string
      ? Address<TAccountTokenRecord>
      : TAccountTokenRecord;
    systemProgram?: TAccountSystemProgram extends string
      ? Address<TAccountSystemProgram>
      : TAccountSystemProgram;
    sysvarInstructions?: TAccountSysvarInstructions extends string
      ? Address<TAccountSysvarInstructions>
      : TAccountSysvarInstructions;
    splTokenProgram?: TAccountSplTokenProgram extends string
      ? Address<TAccountSplTokenProgram>
      : TAccountSplTokenProgram;
  },
  args: BurnV1InstructionDataArgs,
  programAddress: Address<TProgram> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.authority, AccountRole.WRITABLE_SIGNER),
      accountMetaWithDefault(
        accounts.collectionMetadata ?? {
          address:
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
          role: AccountRole.READONLY,
        },
        AccountRole.WRITABLE
      ),
      accountMetaWithDefault(accounts.metadata, AccountRole.WRITABLE),
      accountMetaWithDefault(
        accounts.edition ?? {
          address:
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
          role: AccountRole.READONLY,
        },
        AccountRole.WRITABLE
      ),
      accountMetaWithDefault(accounts.mint, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.token, AccountRole.WRITABLE),
      accountMetaWithDefault(
        accounts.masterEdition ?? {
          address:
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
          role: AccountRole.READONLY,
        },
        AccountRole.WRITABLE
      ),
      accountMetaWithDefault(
        accounts.masterEditionMint ?? {
          address:
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
          role: AccountRole.READONLY,
        },
        AccountRole.READONLY
      ),
      accountMetaWithDefault(
        accounts.masterEditionToken ?? {
          address:
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
          role: AccountRole.READONLY,
        },
        AccountRole.READONLY
      ),
      accountMetaWithDefault(
        accounts.editionMarker ?? {
          address:
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
          role: AccountRole.READONLY,
        },
        AccountRole.WRITABLE
      ),
      accountMetaWithDefault(
        accounts.tokenRecord ?? {
          address:
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
          role: AccountRole.READONLY,
        },
        AccountRole.WRITABLE
      ),
      accountMetaWithDefault(
        accounts.systemProgram ??
          ('11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>),
        AccountRole.READONLY
      ),
      accountMetaWithDefault(
        accounts.sysvarInstructions ??
          ('Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>),
        AccountRole.READONLY
      ),
      accountMetaWithDefault(
        accounts.splTokenProgram ??
          ('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>),
        AccountRole.READONLY
      ),
      ...(remainingAccounts ?? []),
    ],
    data: getBurnV1InstructionDataEncoder().encode(args),
    programAddress,
  } as BurnV1Instruction<
    TProgram,
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountToken,
    TAccountMasterEdition,
    TAccountMasterEditionMint,
    TAccountMasterEditionToken,
    TAccountEditionMarker,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram,
    TRemainingAccounts
  >;
}

export type ParsedBurnV1Instruction<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Asset owner or Utility delegate */
    authority: TAccountMetas[0];
    /** Metadata of the Collection */
    collectionMetadata?: TAccountMetas[1] | undefined;
    /** Metadata (pda of ['metadata', program id, mint id]) */
    metadata: TAccountMetas[2];
    /** Edition of the asset */
    edition?: TAccountMetas[3] | undefined;
    /** Mint of token asset */
    mint: TAccountMetas[4];
    /** Token account to close */
    token: TAccountMetas[5];
    /** Master edition account */
    masterEdition?: TAccountMetas[6] | undefined;
    /** Master edition mint of the asset */
    masterEditionMint?: TAccountMetas[7] | undefined;
    /** Master edition token account */
    masterEditionToken?: TAccountMetas[8] | undefined;
    /** Edition marker account */
    editionMarker?: TAccountMetas[9] | undefined;
    /** Token record account */
    tokenRecord?: TAccountMetas[10] | undefined;
    /** System program */
    systemProgram: TAccountMetas[11];
    /** Instructions sysvar account */
    sysvarInstructions: TAccountMetas[12];
    /** SPL Token Program */
    splTokenProgram: TAccountMetas[13];
  };
  data: BurnV1InstructionData;
};

export function parseBurnV1Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedBurnV1Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      collectionMetadata: getNextOptionalAccount(),
      metadata: getNextAccount(),
      edition: getNextOptionalAccount(),
      mint: getNextAccount(),
      token: getNextAccount(),
      masterEdition: getNextOptionalAccount(),
      masterEditionMint: getNextOptionalAccount(),
      masterEditionToken: getNextOptionalAccount(),
      editionMarker: getNextOptionalAccount(),
      tokenRecord: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      sysvarInstructions: getNextAccount(),
      splTokenProgram: getNextAccount(),
    },
    data: getBurnV1InstructionDataDecoder().decode(instruction.data),
  };
}
