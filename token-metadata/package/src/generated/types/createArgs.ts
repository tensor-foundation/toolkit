/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  GetDataEnumKind,
  GetDataEnumKindContent,
  Option,
  OptionOrNullable,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStringDecoder,
  getStringEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
  none,
} from '@solana/codecs';
import {
  Collection,
  CollectionArgs,
  CollectionDetails,
  CollectionDetailsArgs,
  Creator,
  CreatorArgs,
  PrintSupply,
  PrintSupplyArgs,
  TokenStandard,
  TokenStandardArgs,
  Uses,
  UsesArgs,
  getCollectionDecoder,
  getCollectionDetailsDecoder,
  getCollectionDetailsEncoder,
  getCollectionEncoder,
  getCreatorDecoder,
  getCreatorEncoder,
  getPrintSupplyDecoder,
  getPrintSupplyEncoder,
  getTokenStandardDecoder,
  getTokenStandardEncoder,
  getUsesDecoder,
  getUsesEncoder,
} from '.';

export type CreateArgs = {
  __kind: 'V1';
  name: string;
  symbol: string;
  uri: string;
  sellerFeeBasisPoints: number;
  creators: Option<Array<Creator>>;
  primarySaleHappened: boolean;
  isMutable: boolean;
  tokenStandard: TokenStandard;
  collection: Option<Collection>;
  uses: Option<Uses>;
  collectionDetails: Option<CollectionDetails>;
  ruleSet: Option<Address>;
  decimals: Option<number>;
  printSupply: Option<PrintSupply>;
};

export type CreateArgsArgs = {
  __kind: 'V1';
  name: string;
  symbol?: string;
  uri: string;
  sellerFeeBasisPoints: number;
  creators: OptionOrNullable<Array<CreatorArgs>>;
  primarySaleHappened?: boolean;
  isMutable?: boolean;
  tokenStandard: TokenStandardArgs;
  collection?: OptionOrNullable<CollectionArgs>;
  uses?: OptionOrNullable<UsesArgs>;
  collectionDetails?: OptionOrNullable<CollectionDetailsArgs>;
  ruleSet?: OptionOrNullable<Address>;
  decimals?: OptionOrNullable<number>;
  printSupply?: OptionOrNullable<PrintSupplyArgs>;
};

export function getCreateArgsEncoder(): Encoder<CreateArgsArgs> {
  return getDataEnumEncoder([
    [
      'V1',
      mapEncoder(
        getStructEncoder([
          ['name', getStringEncoder()],
          ['symbol', getStringEncoder()],
          ['uri', getStringEncoder()],
          ['sellerFeeBasisPoints', getU16Encoder()],
          ['creators', getOptionEncoder(getArrayEncoder(getCreatorEncoder()))],
          ['primarySaleHappened', getBooleanEncoder()],
          ['isMutable', getBooleanEncoder()],
          ['tokenStandard', getTokenStandardEncoder()],
          ['collection', getOptionEncoder(getCollectionEncoder())],
          ['uses', getOptionEncoder(getUsesEncoder())],
          [
            'collectionDetails',
            getOptionEncoder(getCollectionDetailsEncoder()),
          ],
          ['ruleSet', getOptionEncoder(getAddressEncoder())],
          ['decimals', getOptionEncoder(getU8Encoder())],
          ['printSupply', getOptionEncoder(getPrintSupplyEncoder())],
        ]),
        (value) => ({
          ...value,
          symbol: value.symbol ?? '',
          primarySaleHappened: value.primarySaleHappened ?? false,
          isMutable: value.isMutable ?? true,
          collection: value.collection ?? none(),
          uses: value.uses ?? none(),
          collectionDetails: value.collectionDetails ?? none(),
          ruleSet: value.ruleSet ?? none(),
          decimals: value.decimals ?? none(),
          printSupply: value.printSupply ?? none(),
        })
      ),
    ],
  ]);
}

export function getCreateArgsDecoder(): Decoder<CreateArgs> {
  return getDataEnumDecoder([
    [
      'V1',
      getStructDecoder([
        ['name', getStringDecoder()],
        ['symbol', getStringDecoder()],
        ['uri', getStringDecoder()],
        ['sellerFeeBasisPoints', getU16Decoder()],
        ['creators', getOptionDecoder(getArrayDecoder(getCreatorDecoder()))],
        ['primarySaleHappened', getBooleanDecoder()],
        ['isMutable', getBooleanDecoder()],
        ['tokenStandard', getTokenStandardDecoder()],
        ['collection', getOptionDecoder(getCollectionDecoder())],
        ['uses', getOptionDecoder(getUsesDecoder())],
        ['collectionDetails', getOptionDecoder(getCollectionDetailsDecoder())],
        ['ruleSet', getOptionDecoder(getAddressDecoder())],
        ['decimals', getOptionDecoder(getU8Decoder())],
        ['printSupply', getOptionDecoder(getPrintSupplyDecoder())],
      ]),
    ],
  ]);
}

export function getCreateArgsCodec(): Codec<CreateArgsArgs, CreateArgs> {
  return combineCodec(getCreateArgsEncoder(), getCreateArgsDecoder());
}

// Data Enum Helpers.
export function createArgs(
  kind: 'V1',
  data: GetDataEnumKindContent<CreateArgsArgs, 'V1'>
): GetDataEnumKind<CreateArgsArgs, 'V1'>;
export function createArgs<K extends CreateArgsArgs['__kind']>(
  kind: K,
  data?: any
): Extract<CreateArgsArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isCreateArgs<K extends CreateArgs['__kind']>(
  kind: K,
  value: CreateArgs
): value is CreateArgs & { __kind: K } {
  return value.__kind === kind;
}
