/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import { EditionMarkerSeeds, findEditionMarkerPda } from '../pdas';
import { Key, getKeyDecoder, getKeyEncoder } from '../types';

export type EditionMarker<TAddress extends string = string> = Account<
  EditionMarkerAccountData,
  TAddress
>;

export type MaybeEditionMarker<TAddress extends string = string> = MaybeAccount<
  EditionMarkerAccountData,
  TAddress
>;

export type EditionMarkerAccountData = { key: Key; ledger: Array<number> };

export type EditionMarkerAccountDataArgs = { ledger: Array<number> };

export function getEditionMarkerAccountDataEncoder(): Encoder<EditionMarkerAccountDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['key', getKeyEncoder()],
      ['ledger', getArrayEncoder(getU8Encoder(), { size: 31 })],
    ]),
    (value) => ({ ...value, key: Key.EditionMarker })
  );
}

export function getEditionMarkerAccountDataDecoder(): Decoder<EditionMarkerAccountData> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['ledger', getArrayDecoder(getU8Decoder(), { size: 31 })],
  ]);
}

export function getEditionMarkerAccountDataCodec(): Codec<
  EditionMarkerAccountDataArgs,
  EditionMarkerAccountData
> {
  return combineCodec(
    getEditionMarkerAccountDataEncoder(),
    getEditionMarkerAccountDataDecoder()
  );
}

export function decodeEditionMarker<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): EditionMarker<TAddress>;
export function decodeEditionMarker<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeEditionMarker<TAddress>;
export function decodeEditionMarker<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): EditionMarker<TAddress> | MaybeEditionMarker<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEditionMarkerAccountDataDecoder()
  );
}

export async function fetchEditionMarker<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<EditionMarker<TAddress>> {
  const maybeAccount = await fetchMaybeEditionMarker(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEditionMarker<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeEditionMarker<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEditionMarker(maybeAccount);
}

export async function fetchAllEditionMarker(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<EditionMarker[]> {
  const maybeAccounts = await fetchAllMaybeEditionMarker(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEditionMarker(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeEditionMarker[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeEditionMarker(maybeAccount));
}

export function getEditionMarkerSize(): number {
  return 32;
}

export async function fetchEditionMarkerFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: EditionMarkerSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<EditionMarker> {
  const maybeAccount = await fetchMaybeEditionMarkerFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEditionMarkerFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: EditionMarkerSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeEditionMarker> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findEditionMarkerPda(seeds, { programAddress });
  return fetchMaybeEditionMarker(rpc, address, fetchConfig);
}
