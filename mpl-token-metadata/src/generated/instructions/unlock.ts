/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  IAccountMeta,
  IAccountSignerMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/web3.js';
import { TOKEN_METADATA_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';
import {
  UnlockArgs,
  UnlockArgsArgs,
  getUnlockArgsDecoder,
  getUnlockArgsEncoder,
} from '../types';

export type UnlockInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTokenOwner extends string | IAccountMeta<string> = string,
  TAccountToken extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountEdition extends string | IAccountMeta<string> = string,
  TAccountTokenRecord extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountSysvarInstructions extends
    | string
    | IAccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TAccountSplTokenProgram extends string | IAccountMeta<string> = string,
  TAccountAuthorizationRulesProgram extends
    | string
    | IAccountMeta<string> = string,
  TAccountAuthorizationRules extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTokenOwner extends string
        ? ReadonlyAccount<TAccountTokenOwner>
        : TAccountTokenOwner,
      TAccountToken extends string
        ? WritableAccount<TAccountToken>
        : TAccountToken,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountEdition extends string
        ? ReadonlyAccount<TAccountEdition>
        : TAccountEdition,
      TAccountTokenRecord extends string
        ? WritableAccount<TAccountTokenRecord>
        : TAccountTokenRecord,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSysvarInstructions extends string
        ? ReadonlyAccount<TAccountSysvarInstructions>
        : TAccountSysvarInstructions,
      TAccountSplTokenProgram extends string
        ? ReadonlyAccount<TAccountSplTokenProgram>
        : TAccountSplTokenProgram,
      TAccountAuthorizationRulesProgram extends string
        ? ReadonlyAccount<TAccountAuthorizationRulesProgram>
        : TAccountAuthorizationRulesProgram,
      TAccountAuthorizationRules extends string
        ? ReadonlyAccount<TAccountAuthorizationRules>
        : TAccountAuthorizationRules,
      ...TRemainingAccounts,
    ]
  >;

export type UnlockInstructionData = {
  discriminator: number;
  unlockArgs: UnlockArgs;
};

export type UnlockInstructionDataArgs = { unlockArgs: UnlockArgsArgs };

export function getUnlockInstructionDataEncoder(): Encoder<UnlockInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['unlockArgs', getUnlockArgsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: 47 })
  );
}

export function getUnlockInstructionDataDecoder(): Decoder<UnlockInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['unlockArgs', getUnlockArgsDecoder()],
  ]);
}

export function getUnlockInstructionDataCodec(): Codec<
  UnlockInstructionDataArgs,
  UnlockInstructionData
> {
  return combineCodec(
    getUnlockInstructionDataEncoder(),
    getUnlockInstructionDataDecoder()
  );
}

export type UnlockInput<
  TAccountAuthority extends string = string,
  TAccountTokenOwner extends string = string,
  TAccountToken extends string = string,
  TAccountMint extends string = string,
  TAccountMetadata extends string = string,
  TAccountEdition extends string = string,
  TAccountTokenRecord extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSysvarInstructions extends string = string,
  TAccountSplTokenProgram extends string = string,
  TAccountAuthorizationRulesProgram extends string = string,
  TAccountAuthorizationRules extends string = string,
> = {
  /** Delegate or freeze authority */
  authority: TransactionSigner<TAccountAuthority>;
  /** Token owner account */
  tokenOwner?: Address<TAccountTokenOwner>;
  /** Token account */
  token: Address<TAccountToken>;
  /** Mint account */
  mint: Address<TAccountMint>;
  /** Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Edition account */
  edition?: Address<TAccountEdition>;
  /** Token record account */
  tokenRecord?: Address<TAccountTokenRecord>;
  /** Payer */
  payer: TransactionSigner<TAccountPayer>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** System program */
  sysvarInstructions?: Address<TAccountSysvarInstructions>;
  /** SPL Token Program */
  splTokenProgram?: Address<TAccountSplTokenProgram>;
  /** Token Authorization Rules Program */
  authorizationRulesProgram?: Address<TAccountAuthorizationRulesProgram>;
  /** Token Authorization Rules account */
  authorizationRules?: Address<TAccountAuthorizationRules>;
  unlockArgs: UnlockInstructionDataArgs['unlockArgs'];
};

export function getUnlockInstruction<
  TAccountAuthority extends string,
  TAccountTokenOwner extends string,
  TAccountToken extends string,
  TAccountMint extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountTokenRecord extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
  TAccountAuthorizationRulesProgram extends string,
  TAccountAuthorizationRules extends string,
>(
  input: UnlockInput<
    TAccountAuthority,
    TAccountTokenOwner,
    TAccountToken,
    TAccountMint,
    TAccountMetadata,
    TAccountEdition,
    TAccountTokenRecord,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram,
    TAccountAuthorizationRulesProgram,
    TAccountAuthorizationRules
  >
): UnlockInstruction<
  typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountAuthority,
  TAccountTokenOwner,
  TAccountToken,
  TAccountMint,
  TAccountMetadata,
  TAccountEdition,
  TAccountTokenRecord,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountSysvarInstructions,
  TAccountSplTokenProgram,
  TAccountAuthorizationRulesProgram,
  TAccountAuthorizationRules
> {
  // Program address.
  const programAddress = TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    tokenOwner: { value: input.tokenOwner ?? null, isWritable: false },
    token: { value: input.token ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    metadata: { value: input.metadata ?? null, isWritable: true },
    edition: { value: input.edition ?? null, isWritable: false },
    tokenRecord: { value: input.tokenRecord ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    sysvarInstructions: {
      value: input.sysvarInstructions ?? null,
      isWritable: false,
    },
    splTokenProgram: {
      value: input.splTokenProgram ?? null,
      isWritable: false,
    },
    authorizationRulesProgram: {
      value: input.authorizationRulesProgram ?? null,
      isWritable: false,
    },
    authorizationRules: {
      value: input.authorizationRules ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.sysvarInstructions.value) {
    accounts.sysvarInstructions.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tokenOwner),
      getAccountMeta(accounts.token),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.edition),
      getAccountMeta(accounts.tokenRecord),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.sysvarInstructions),
      getAccountMeta(accounts.splTokenProgram),
      getAccountMeta(accounts.authorizationRulesProgram),
      getAccountMeta(accounts.authorizationRules),
    ],
    programAddress,
    data: getUnlockInstructionDataEncoder().encode(
      args as UnlockInstructionDataArgs
    ),
  } as UnlockInstruction<
    typeof TOKEN_METADATA_PROGRAM_ADDRESS,
    TAccountAuthority,
    TAccountTokenOwner,
    TAccountToken,
    TAccountMint,
    TAccountMetadata,
    TAccountEdition,
    TAccountTokenRecord,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram,
    TAccountAuthorizationRulesProgram,
    TAccountAuthorizationRules
  >;

  return instruction;
}

export type ParsedUnlockInstruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Delegate or freeze authority */
    authority: TAccountMetas[0];
    /** Token owner account */
    tokenOwner?: TAccountMetas[1] | undefined;
    /** Token account */
    token: TAccountMetas[2];
    /** Mint account */
    mint: TAccountMetas[3];
    /** Metadata account */
    metadata: TAccountMetas[4];
    /** Edition account */
    edition?: TAccountMetas[5] | undefined;
    /** Token record account */
    tokenRecord?: TAccountMetas[6] | undefined;
    /** Payer */
    payer: TAccountMetas[7];
    /** System program */
    systemProgram: TAccountMetas[8];
    /** System program */
    sysvarInstructions: TAccountMetas[9];
    /** SPL Token Program */
    splTokenProgram?: TAccountMetas[10] | undefined;
    /** Token Authorization Rules Program */
    authorizationRulesProgram?: TAccountMetas[11] | undefined;
    /** Token Authorization Rules account */
    authorizationRules?: TAccountMetas[12] | undefined;
  };
  data: UnlockInstructionData;
};

export function parseUnlockInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUnlockInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === TOKEN_METADATA_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      tokenOwner: getNextOptionalAccount(),
      token: getNextAccount(),
      mint: getNextAccount(),
      metadata: getNextAccount(),
      edition: getNextOptionalAccount(),
      tokenRecord: getNextOptionalAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      sysvarInstructions: getNextAccount(),
      splTokenProgram: getNextOptionalAccount(),
      authorizationRulesProgram: getNextOptionalAccount(),
      authorizationRules: getNextOptionalAccount(),
    },
    data: getUnlockInstructionDataDecoder().decode(instruction.data),
  };
}
