/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Address, containsBytes, getU8Encoder } from '@solana/web3.js';
import {
  ParsedCreateInstruction,
  ParsedIncrementInstruction,
} from '../instructions';

export const SOLANA_PROGRAM_COUNTER_PROGRAM_ADDRESS =
  'CounterProgram111111111111111111111111111111' as Address<'CounterProgram111111111111111111111111111111'>;

export enum SolanaProgramCounterAccount {
  Counter,
}

export enum SolanaProgramCounterInstruction {
  Create,
  Increment,
}

export function identifySolanaProgramCounterInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): SolanaProgramCounterInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return SolanaProgramCounterInstruction.Create;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return SolanaProgramCounterInstruction.Increment;
  }
  throw new Error(
    'The provided instruction could not be identified as a solanaProgramCounter instruction.'
  );
}

export type ParsedSolanaProgramCounterInstruction<
  TProgram extends string = 'CounterProgram111111111111111111111111111111',
> =
  | ({
      instructionType: SolanaProgramCounterInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: SolanaProgramCounterInstruction.Increment;
    } & ParsedIncrementInstruction<TProgram>);
