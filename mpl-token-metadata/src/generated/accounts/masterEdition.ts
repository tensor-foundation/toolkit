/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  Option,
  OptionOrNullable,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
} from '@solana/web3.js';
import { MasterEditionSeeds, findMasterEditionPda } from '../pdas';
import { Key, KeyArgs, getKeyDecoder, getKeyEncoder } from '../types';

export type MasterEdition = {
  key: Key;
  supply: bigint;
  maxSupply: Option<bigint>;
};

export type MasterEditionArgs = {
  key: KeyArgs;
  supply: number | bigint;
  maxSupply: OptionOrNullable<number | bigint>;
};

export function getMasterEditionEncoder(): Encoder<MasterEditionArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['supply', getU64Encoder()],
    ['maxSupply', getOptionEncoder(getU64Encoder())],
  ]);
}

export function getMasterEditionDecoder(): Decoder<MasterEdition> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['supply', getU64Decoder()],
    ['maxSupply', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getMasterEditionCodec(): Codec<
  MasterEditionArgs,
  MasterEdition
> {
  return combineCodec(getMasterEditionEncoder(), getMasterEditionDecoder());
}

export function decodeMasterEdition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MasterEdition, TAddress>;
export function decodeMasterEdition<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MasterEdition, TAddress>;
export function decodeMasterEdition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MasterEdition, TAddress> | MaybeAccount<MasterEdition, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMasterEditionDecoder()
  );
}

export async function fetchMasterEdition<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MasterEdition, TAddress>> {
  const maybeAccount = await fetchMaybeMasterEdition(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMasterEdition<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MasterEdition, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMasterEdition(maybeAccount);
}

export async function fetchAllMasterEdition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MasterEdition>[]> {
  const maybeAccounts = await fetchAllMaybeMasterEdition(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMasterEdition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MasterEdition>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMasterEdition(maybeAccount));
}

export async function fetchMasterEditionFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MasterEditionSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<MasterEdition>> {
  const maybeAccount = await fetchMaybeMasterEditionFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMasterEditionFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MasterEditionSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<MasterEdition>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findMasterEditionPda(seeds, { programAddress });
  return await fetchMaybeMasterEdition(rpc, address, fetchConfig);
}
