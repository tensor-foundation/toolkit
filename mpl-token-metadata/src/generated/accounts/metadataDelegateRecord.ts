/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import { getKeyDecoder, getKeyEncoder, type Key, type KeyArgs } from '../types';

export type MetadataDelegateRecord = {
  key: Key;
  bump: number;
  mint: Address;
  delegate: Address;
  updateAuthority: Address;
};

export type MetadataDelegateRecordArgs = {
  key: KeyArgs;
  bump: number;
  mint: Address;
  delegate: Address;
  updateAuthority: Address;
};

export function getMetadataDelegateRecordEncoder(): Encoder<MetadataDelegateRecordArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['bump', getU8Encoder()],
    ['mint', getAddressEncoder()],
    ['delegate', getAddressEncoder()],
    ['updateAuthority', getAddressEncoder()],
  ]);
}

export function getMetadataDelegateRecordDecoder(): Decoder<MetadataDelegateRecord> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['bump', getU8Decoder()],
    ['mint', getAddressDecoder()],
    ['delegate', getAddressDecoder()],
    ['updateAuthority', getAddressDecoder()],
  ]);
}

export function getMetadataDelegateRecordCodec(): Codec<
  MetadataDelegateRecordArgs,
  MetadataDelegateRecord
> {
  return combineCodec(
    getMetadataDelegateRecordEncoder(),
    getMetadataDelegateRecordDecoder()
  );
}

export function decodeMetadataDelegateRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MetadataDelegateRecord, TAddress>;
export function decodeMetadataDelegateRecord<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MetadataDelegateRecord, TAddress>;
export function decodeMetadataDelegateRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<MetadataDelegateRecord, TAddress>
  | MaybeAccount<MetadataDelegateRecord, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMetadataDelegateRecordDecoder()
  );
}

export async function fetchMetadataDelegateRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MetadataDelegateRecord, TAddress>> {
  const maybeAccount = await fetchMaybeMetadataDelegateRecord(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMetadataDelegateRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MetadataDelegateRecord, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMetadataDelegateRecord(maybeAccount);
}

export async function fetchAllMetadataDelegateRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MetadataDelegateRecord>[]> {
  const maybeAccounts = await fetchAllMaybeMetadataDelegateRecord(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMetadataDelegateRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MetadataDelegateRecord>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeMetadataDelegateRecord(maybeAccount)
  );
}

export function getMetadataDelegateRecordSize(): number {
  return 98;
}
