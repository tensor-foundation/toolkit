/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
} from '@solana/web3.js';
import { Key, KeyArgs, getKeyDecoder, getKeyEncoder } from '../types';

export type EditionMarkerV2 = { key: Key; ledger: ReadonlyUint8Array };

export type EditionMarkerV2Args = { key: KeyArgs; ledger: ReadonlyUint8Array };

export function getEditionMarkerV2Encoder(): Encoder<EditionMarkerV2Args> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['ledger', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
  ]);
}

export function getEditionMarkerV2Decoder(): Decoder<EditionMarkerV2> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['ledger', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getEditionMarkerV2Codec(): Codec<
  EditionMarkerV2Args,
  EditionMarkerV2
> {
  return combineCodec(getEditionMarkerV2Encoder(), getEditionMarkerV2Decoder());
}

export function decodeEditionMarkerV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<EditionMarkerV2, TAddress>;
export function decodeEditionMarkerV2<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<EditionMarkerV2, TAddress>;
export function decodeEditionMarkerV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<EditionMarkerV2, TAddress>
  | MaybeAccount<EditionMarkerV2, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEditionMarkerV2Decoder()
  );
}

export async function fetchEditionMarkerV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<EditionMarkerV2, TAddress>> {
  const maybeAccount = await fetchMaybeEditionMarkerV2(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEditionMarkerV2<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<EditionMarkerV2, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEditionMarkerV2(maybeAccount);
}

export async function fetchAllEditionMarkerV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<EditionMarkerV2>[]> {
  const maybeAccounts = await fetchAllMaybeEditionMarkerV2(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEditionMarkerV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<EditionMarkerV2>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeEditionMarkerV2(maybeAccount)
  );
}
