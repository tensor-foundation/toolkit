/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
} from '@solana/web3.js';
import {
  getKeyDecoder,
  getKeyEncoder,
  getReservationV1Decoder,
  getReservationV1Encoder,
  type Key,
  type KeyArgs,
  type ReservationV1,
  type ReservationV1Args,
} from '../types';

export type ReservationListV1 = {
  key: Key;
  masterEdition: Address;
  supplySnapshot: Option<bigint>;
  reservations: Array<ReservationV1>;
};

export type ReservationListV1Args = {
  key: KeyArgs;
  masterEdition: Address;
  supplySnapshot: OptionOrNullable<number | bigint>;
  reservations: Array<ReservationV1Args>;
};

export function getReservationListV1Encoder(): Encoder<ReservationListV1Args> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['masterEdition', getAddressEncoder()],
    ['supplySnapshot', getOptionEncoder(getU64Encoder())],
    ['reservations', getArrayEncoder(getReservationV1Encoder())],
  ]);
}

export function getReservationListV1Decoder(): Decoder<ReservationListV1> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['masterEdition', getAddressDecoder()],
    ['supplySnapshot', getOptionDecoder(getU64Decoder())],
    ['reservations', getArrayDecoder(getReservationV1Decoder())],
  ]);
}

export function getReservationListV1Codec(): Codec<
  ReservationListV1Args,
  ReservationListV1
> {
  return combineCodec(
    getReservationListV1Encoder(),
    getReservationListV1Decoder()
  );
}

export function decodeReservationListV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ReservationListV1, TAddress>;
export function decodeReservationListV1<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ReservationListV1, TAddress>;
export function decodeReservationListV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ReservationListV1, TAddress>
  | MaybeAccount<ReservationListV1, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getReservationListV1Decoder()
  );
}

export async function fetchReservationListV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ReservationListV1, TAddress>> {
  const maybeAccount = await fetchMaybeReservationListV1(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeReservationListV1<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ReservationListV1, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeReservationListV1(maybeAccount);
}

export async function fetchAllReservationListV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ReservationListV1>[]> {
  const maybeAccounts = await fetchAllMaybeReservationListV1(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeReservationListV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ReservationListV1>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeReservationListV1(maybeAccount)
  );
}
