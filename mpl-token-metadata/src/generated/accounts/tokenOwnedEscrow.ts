/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/web3.js';
import {
  EscrowAuthority,
  EscrowAuthorityArgs,
  Key,
  KeyArgs,
  getEscrowAuthorityDecoder,
  getEscrowAuthorityEncoder,
  getKeyDecoder,
  getKeyEncoder,
} from '../types';

export type TokenOwnedEscrow = {
  key: Key;
  baseToken: Address;
  authority: EscrowAuthority;
  bump: number;
};

export type TokenOwnedEscrowArgs = {
  key: KeyArgs;
  baseToken: Address;
  authority: EscrowAuthorityArgs;
  bump: number;
};

export function getTokenOwnedEscrowEncoder(): Encoder<TokenOwnedEscrowArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['baseToken', getAddressEncoder()],
    ['authority', getEscrowAuthorityEncoder()],
    ['bump', getU8Encoder()],
  ]);
}

export function getTokenOwnedEscrowDecoder(): Decoder<TokenOwnedEscrow> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['baseToken', getAddressDecoder()],
    ['authority', getEscrowAuthorityDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getTokenOwnedEscrowCodec(): Codec<
  TokenOwnedEscrowArgs,
  TokenOwnedEscrow
> {
  return combineCodec(
    getTokenOwnedEscrowEncoder(),
    getTokenOwnedEscrowDecoder()
  );
}

export function decodeTokenOwnedEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TokenOwnedEscrow, TAddress>;
export function decodeTokenOwnedEscrow<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TokenOwnedEscrow, TAddress>;
export function decodeTokenOwnedEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<TokenOwnedEscrow, TAddress>
  | MaybeAccount<TokenOwnedEscrow, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTokenOwnedEscrowDecoder()
  );
}

export async function fetchTokenOwnedEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TokenOwnedEscrow, TAddress>> {
  const maybeAccount = await fetchMaybeTokenOwnedEscrow(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenOwnedEscrow<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TokenOwnedEscrow, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTokenOwnedEscrow(maybeAccount);
}

export async function fetchAllTokenOwnedEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TokenOwnedEscrow>[]> {
  const maybeAccounts = await fetchAllMaybeTokenOwnedEscrow(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTokenOwnedEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TokenOwnedEscrow>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeTokenOwnedEscrow(maybeAccount)
  );
}
