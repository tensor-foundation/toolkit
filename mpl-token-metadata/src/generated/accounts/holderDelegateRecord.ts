/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/web3.js';
import { Key, KeyArgs, getKeyDecoder, getKeyEncoder } from '../types';

export type HolderDelegateRecord = {
  key: Key;
  bump: number;
  mint: Address;
  delegate: Address;
  updateAuthority: Address;
};

export type HolderDelegateRecordArgs = {
  key: KeyArgs;
  bump: number;
  mint: Address;
  delegate: Address;
  updateAuthority: Address;
};

export function getHolderDelegateRecordEncoder(): Encoder<HolderDelegateRecordArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['bump', getU8Encoder()],
    ['mint', getAddressEncoder()],
    ['delegate', getAddressEncoder()],
    ['updateAuthority', getAddressEncoder()],
  ]);
}

export function getHolderDelegateRecordDecoder(): Decoder<HolderDelegateRecord> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['bump', getU8Decoder()],
    ['mint', getAddressDecoder()],
    ['delegate', getAddressDecoder()],
    ['updateAuthority', getAddressDecoder()],
  ]);
}

export function getHolderDelegateRecordCodec(): Codec<
  HolderDelegateRecordArgs,
  HolderDelegateRecord
> {
  return combineCodec(
    getHolderDelegateRecordEncoder(),
    getHolderDelegateRecordDecoder()
  );
}

export function decodeHolderDelegateRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<HolderDelegateRecord, TAddress>;
export function decodeHolderDelegateRecord<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<HolderDelegateRecord, TAddress>;
export function decodeHolderDelegateRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<HolderDelegateRecord, TAddress>
  | MaybeAccount<HolderDelegateRecord, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getHolderDelegateRecordDecoder()
  );
}

export async function fetchHolderDelegateRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<HolderDelegateRecord, TAddress>> {
  const maybeAccount = await fetchMaybeHolderDelegateRecord(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeHolderDelegateRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<HolderDelegateRecord, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeHolderDelegateRecord(maybeAccount);
}

export async function fetchAllHolderDelegateRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<HolderDelegateRecord>[]> {
  const maybeAccounts = await fetchAllMaybeHolderDelegateRecord(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeHolderDelegateRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<HolderDelegateRecord>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeHolderDelegateRecord(maybeAccount)
  );
}

export function getHolderDelegateRecordSize(): number {
  return 98;
}
