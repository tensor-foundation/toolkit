/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import { getKeyDecoder, getKeyEncoder, type Key, type KeyArgs } from '../types';

export type UseAuthorityRecord = {
  key: Key;
  allowedUses: bigint;
  bump: number;
};

export type UseAuthorityRecordArgs = {
  key: KeyArgs;
  allowedUses: number | bigint;
  bump: number;
};

export function getUseAuthorityRecordEncoder(): Encoder<UseAuthorityRecordArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['allowedUses', getU64Encoder()],
    ['bump', getU8Encoder()],
  ]);
}

export function getUseAuthorityRecordDecoder(): Decoder<UseAuthorityRecord> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['allowedUses', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getUseAuthorityRecordCodec(): Codec<
  UseAuthorityRecordArgs,
  UseAuthorityRecord
> {
  return combineCodec(
    getUseAuthorityRecordEncoder(),
    getUseAuthorityRecordDecoder()
  );
}

export function decodeUseAuthorityRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UseAuthorityRecord, TAddress>;
export function decodeUseAuthorityRecord<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UseAuthorityRecord, TAddress>;
export function decodeUseAuthorityRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<UseAuthorityRecord, TAddress>
  | MaybeAccount<UseAuthorityRecord, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUseAuthorityRecordDecoder()
  );
}

export async function fetchUseAuthorityRecord<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UseAuthorityRecord, TAddress>> {
  const maybeAccount = await fetchMaybeUseAuthorityRecord(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUseAuthorityRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UseAuthorityRecord, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUseAuthorityRecord(maybeAccount);
}

export async function fetchAllUseAuthorityRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UseAuthorityRecord>[]> {
  const maybeAccounts = await fetchAllMaybeUseAuthorityRecord(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUseAuthorityRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UseAuthorityRecord>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeUseAuthorityRecord(maybeAccount)
  );
}

export function getUseAuthorityRecordSize(): number {
  return 10;
}
