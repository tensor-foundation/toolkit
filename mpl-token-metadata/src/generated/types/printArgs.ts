/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/web3.js';

export type PrintArgs =
  | { __kind: 'V1'; edition: bigint }
  | { __kind: 'V2'; edition: bigint };

export type PrintArgsArgs =
  | { __kind: 'V1'; edition: number | bigint }
  | { __kind: 'V2'; edition: number | bigint };

export function getPrintArgsEncoder(): Encoder<PrintArgsArgs> {
  return getDiscriminatedUnionEncoder([
    ['V1', getStructEncoder([['edition', getU64Encoder()]])],
    ['V2', getStructEncoder([['edition', getU64Encoder()]])],
  ]);
}

export function getPrintArgsDecoder(): Decoder<PrintArgs> {
  return getDiscriminatedUnionDecoder([
    ['V1', getStructDecoder([['edition', getU64Decoder()]])],
    ['V2', getStructDecoder([['edition', getU64Decoder()]])],
  ]);
}

export function getPrintArgsCodec(): Codec<PrintArgsArgs, PrintArgs> {
  return combineCodec(getPrintArgsEncoder(), getPrintArgsDecoder());
}

// Data Enum Helpers.
export function printArgs(
  kind: 'V1',
  data: GetDiscriminatedUnionVariantContent<PrintArgsArgs, '__kind', 'V1'>
): GetDiscriminatedUnionVariant<PrintArgsArgs, '__kind', 'V1'>;
export function printArgs(
  kind: 'V2',
  data: GetDiscriminatedUnionVariantContent<PrintArgsArgs, '__kind', 'V2'>
): GetDiscriminatedUnionVariant<PrintArgsArgs, '__kind', 'V2'>;
export function printArgs<K extends PrintArgsArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isPrintArgs<K extends PrintArgs['__kind']>(
  kind: K,
  value: PrintArgs
): value is PrintArgs & { __kind: K } {
  return value.__kind === kind;
}
