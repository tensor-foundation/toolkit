/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type Option,
  type OptionOrNullable,
} from '@solana/web3.js';
import {
  getAuthorizationDataDecoder,
  getAuthorizationDataEncoder,
  type AuthorizationData,
  type AuthorizationDataArgs,
} from '.';

export type LockArgs = {
  __kind: 'V1';
  authorizationData: Option<AuthorizationData>;
};

export type LockArgsArgs = {
  __kind: 'V1';
  authorizationData: OptionOrNullable<AuthorizationDataArgs>;
};

export function getLockArgsEncoder(): Encoder<LockArgsArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'V1',
      getStructEncoder([
        ['authorizationData', getOptionEncoder(getAuthorizationDataEncoder())],
      ]),
    ],
  ]);
}

export function getLockArgsDecoder(): Decoder<LockArgs> {
  return getDiscriminatedUnionDecoder([
    [
      'V1',
      getStructDecoder([
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
  ]);
}

export function getLockArgsCodec(): Codec<LockArgsArgs, LockArgs> {
  return combineCodec(getLockArgsEncoder(), getLockArgsDecoder());
}

// Data Enum Helpers.
export function lockArgs(
  kind: 'V1',
  data: GetDiscriminatedUnionVariantContent<LockArgsArgs, '__kind', 'V1'>
): GetDiscriminatedUnionVariant<LockArgsArgs, '__kind', 'V1'>;
export function lockArgs<K extends LockArgsArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isLockArgs<K extends LockArgs['__kind']>(
  kind: K,
  value: LockArgs
): value is LockArgs & { __kind: K } {
  return value.__kind === kind;
}
