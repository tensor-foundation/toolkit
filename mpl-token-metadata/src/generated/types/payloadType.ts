/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/web3.js';
import {
  getProofInfoDecoder,
  getProofInfoEncoder,
  getSeedsVecDecoder,
  getSeedsVecEncoder,
  type ProofInfo,
  type ProofInfoArgs,
  type SeedsVec,
  type SeedsVecArgs,
} from '.';

export type PayloadType =
  | { __kind: 'Pubkey'; fields: readonly [Address] }
  | { __kind: 'Seeds'; fields: readonly [SeedsVec] }
  | { __kind: 'MerkleProof'; fields: readonly [ProofInfo] }
  | { __kind: 'Number'; fields: readonly [bigint] };

export type PayloadTypeArgs =
  | { __kind: 'Pubkey'; fields: readonly [Address] }
  | { __kind: 'Seeds'; fields: readonly [SeedsVecArgs] }
  | { __kind: 'MerkleProof'; fields: readonly [ProofInfoArgs] }
  | { __kind: 'Number'; fields: readonly [number | bigint] };

export function getPayloadTypeEncoder(): Encoder<PayloadTypeArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Pubkey',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
    [
      'Seeds',
      getStructEncoder([['fields', getTupleEncoder([getSeedsVecEncoder()])]]),
    ],
    [
      'MerkleProof',
      getStructEncoder([['fields', getTupleEncoder([getProofInfoEncoder()])]]),
    ],
    [
      'Number',
      getStructEncoder([['fields', getTupleEncoder([getU64Encoder()])]]),
    ],
  ]);
}

export function getPayloadTypeDecoder(): Decoder<PayloadType> {
  return getDiscriminatedUnionDecoder([
    [
      'Pubkey',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
    [
      'Seeds',
      getStructDecoder([['fields', getTupleDecoder([getSeedsVecDecoder()])]]),
    ],
    [
      'MerkleProof',
      getStructDecoder([['fields', getTupleDecoder([getProofInfoDecoder()])]]),
    ],
    [
      'Number',
      getStructDecoder([['fields', getTupleDecoder([getU64Decoder()])]]),
    ],
  ]);
}

export function getPayloadTypeCodec(): Codec<PayloadTypeArgs, PayloadType> {
  return combineCodec(getPayloadTypeEncoder(), getPayloadTypeDecoder());
}

// Data Enum Helpers.
export function payloadType(
  kind: 'Pubkey',
  data: GetDiscriminatedUnionVariantContent<
    PayloadTypeArgs,
    '__kind',
    'Pubkey'
  >['fields']
): GetDiscriminatedUnionVariant<PayloadTypeArgs, '__kind', 'Pubkey'>;
export function payloadType(
  kind: 'Seeds',
  data: GetDiscriminatedUnionVariantContent<
    PayloadTypeArgs,
    '__kind',
    'Seeds'
  >['fields']
): GetDiscriminatedUnionVariant<PayloadTypeArgs, '__kind', 'Seeds'>;
export function payloadType(
  kind: 'MerkleProof',
  data: GetDiscriminatedUnionVariantContent<
    PayloadTypeArgs,
    '__kind',
    'MerkleProof'
  >['fields']
): GetDiscriminatedUnionVariant<PayloadTypeArgs, '__kind', 'MerkleProof'>;
export function payloadType(
  kind: 'Number',
  data: GetDiscriminatedUnionVariantContent<
    PayloadTypeArgs,
    '__kind',
    'Number'
  >['fields']
): GetDiscriminatedUnionVariant<PayloadTypeArgs, '__kind', 'Number'>;
export function payloadType<K extends PayloadTypeArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isPayloadType<K extends PayloadType['__kind']>(
  kind: K,
  value: PayloadType
): value is PayloadType & { __kind: K } {
  return value.__kind === kind;
}
