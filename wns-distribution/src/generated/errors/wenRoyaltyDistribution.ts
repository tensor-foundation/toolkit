/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS } from '../programs';

/** InvalidGroupAuthority: Invalid Group Authority for collection account */
export const WEN_ROYALTY_DISTRIBUTION_ERROR__INVALID_GROUP_AUTHORITY = 0x1770; // 6000
/** InvalidCreatorPctAmount: Invalid creator pct amount. Must add up to 100 */
export const WEN_ROYALTY_DISTRIBUTION_ERROR__INVALID_CREATOR_PCT_AMOUNT = 0x1771; // 6001
/** InvalidPaymentTokenAccount: Invalid payment token account */
export const WEN_ROYALTY_DISTRIBUTION_ERROR__INVALID_PAYMENT_TOKEN_ACCOUNT = 0x1772; // 6002
/** InvalidPaymentTokenProgram: Invalid payment token program */
export const WEN_ROYALTY_DISTRIBUTION_ERROR__INVALID_PAYMENT_TOKEN_PROGRAM = 0x1773; // 6003
/** ArithmeticOverflow: Arithmetic overflow */
export const WEN_ROYALTY_DISTRIBUTION_ERROR__ARITHMETIC_OVERFLOW = 0x1774; // 6004

export type WenRoyaltyDistributionError =
  | typeof WEN_ROYALTY_DISTRIBUTION_ERROR__ARITHMETIC_OVERFLOW
  | typeof WEN_ROYALTY_DISTRIBUTION_ERROR__INVALID_CREATOR_PCT_AMOUNT
  | typeof WEN_ROYALTY_DISTRIBUTION_ERROR__INVALID_GROUP_AUTHORITY
  | typeof WEN_ROYALTY_DISTRIBUTION_ERROR__INVALID_PAYMENT_TOKEN_ACCOUNT
  | typeof WEN_ROYALTY_DISTRIBUTION_ERROR__INVALID_PAYMENT_TOKEN_PROGRAM;

let wenRoyaltyDistributionErrorMessages:
  | Record<WenRoyaltyDistributionError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  wenRoyaltyDistributionErrorMessages = {
    [WEN_ROYALTY_DISTRIBUTION_ERROR__ARITHMETIC_OVERFLOW]: `Arithmetic overflow`,
    [WEN_ROYALTY_DISTRIBUTION_ERROR__INVALID_CREATOR_PCT_AMOUNT]: `Invalid creator pct amount. Must add up to 100`,
    [WEN_ROYALTY_DISTRIBUTION_ERROR__INVALID_GROUP_AUTHORITY]: `Invalid Group Authority for collection account`,
    [WEN_ROYALTY_DISTRIBUTION_ERROR__INVALID_PAYMENT_TOKEN_ACCOUNT]: `Invalid payment token account`,
    [WEN_ROYALTY_DISTRIBUTION_ERROR__INVALID_PAYMENT_TOKEN_PROGRAM]: `Invalid payment token program`,
  };
}

export function getWenRoyaltyDistributionErrorMessage(
  code: WenRoyaltyDistributionError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      wenRoyaltyDistributionErrorMessages as Record<
        WenRoyaltyDistributionError,
        string
      >
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isWenRoyaltyDistributionError<
  TProgramErrorCode extends WenRoyaltyDistributionError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS,
    code
  );
}
