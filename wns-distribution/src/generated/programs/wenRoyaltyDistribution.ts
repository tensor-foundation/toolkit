/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedClaimDistributionInstruction,
  type ParsedInitializeDistributionInstruction,
  type ParsedUpdateDistributionInstruction,
} from '../instructions';

export const WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS =
  'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay' as Address<'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay'>;

export enum WenRoyaltyDistributionAccount {
  DistributionAccount,
}

export function identifyWenRoyaltyDistributionAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): WenRoyaltyDistributionAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([98, 90, 112, 65, 49, 161, 198, 154])
      ),
      0
    )
  ) {
    return WenRoyaltyDistributionAccount.DistributionAccount;
  }
  throw new Error(
    'The provided account could not be identified as a wenRoyaltyDistribution account.'
  );
}

export enum WenRoyaltyDistributionInstruction {
  ClaimDistribution,
  InitializeDistribution,
  UpdateDistribution,
}

export function identifyWenRoyaltyDistributionInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): WenRoyaltyDistributionInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([204, 156, 94, 85, 2, 125, 232, 180])
      ),
      0
    )
  ) {
    return WenRoyaltyDistributionInstruction.ClaimDistribution;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([146, 158, 129, 53, 22, 89, 86, 207])
      ),
      0
    )
  ) {
    return WenRoyaltyDistributionInstruction.InitializeDistribution;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([128, 196, 209, 174, 42, 209, 164, 222])
      ),
      0
    )
  ) {
    return WenRoyaltyDistributionInstruction.UpdateDistribution;
  }
  throw new Error(
    'The provided instruction could not be identified as a wenRoyaltyDistribution instruction.'
  );
}

export type ParsedWenRoyaltyDistributionInstruction<
  TProgram extends string = 'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay',
> =
  | ({
      instructionType: WenRoyaltyDistributionInstruction.ClaimDistribution;
    } & ParsedClaimDistributionInstruction<TProgram>)
  | ({
      instructionType: WenRoyaltyDistributionInstruction.InitializeDistribution;
    } & ParsedInitializeDistributionInstruction<TProgram>)
  | ({
      instructionType: WenRoyaltyDistributionInstruction.UpdateDistribution;
    } & ParsedUpdateDistributionInstruction<TProgram>);
