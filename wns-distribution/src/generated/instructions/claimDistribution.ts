/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type ClaimDistributionInstruction<
  TProgram extends string = typeof WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountDistribution extends string | IAccountMeta<string> = string,
  TAccountPaymentMint extends string | IAccountMeta<string> = string,
  TAccountDistributionTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountCreatorTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountDistribution extends string
        ? WritableAccount<TAccountDistribution>
        : TAccountDistribution,
      TAccountPaymentMint extends string
        ? ReadonlyAccount<TAccountPaymentMint>
        : TAccountPaymentMint,
      TAccountDistributionTokenAccount extends string
        ? WritableAccount<TAccountDistributionTokenAccount>
        : TAccountDistributionTokenAccount,
      TAccountCreatorTokenAccount extends string
        ? WritableAccount<TAccountCreatorTokenAccount>
        : TAccountCreatorTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimDistributionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClaimDistributionInstructionDataArgs = {};

export function getClaimDistributionInstructionDataEncoder(): Encoder<ClaimDistributionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([204, 156, 94, 85, 2, 125, 232, 180]),
    })
  );
}

export function getClaimDistributionInstructionDataDecoder(): Decoder<ClaimDistributionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimDistributionInstructionDataCodec(): Codec<
  ClaimDistributionInstructionDataArgs,
  ClaimDistributionInstructionData
> {
  return combineCodec(
    getClaimDistributionInstructionDataEncoder(),
    getClaimDistributionInstructionDataDecoder()
  );
}

export type ClaimDistributionInput<
  TAccountCreator extends string = string,
  TAccountDistribution extends string = string,
  TAccountPaymentMint extends string = string,
  TAccountDistributionTokenAccount extends string = string,
  TAccountCreatorTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator: TransactionSigner<TAccountCreator>;
  distribution: Address<TAccountDistribution>;
  paymentMint: Address<TAccountPaymentMint>;
  distributionTokenAccount?: Address<TAccountDistributionTokenAccount>;
  creatorTokenAccount?: Address<TAccountCreatorTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getClaimDistributionInstruction<
  TAccountCreator extends string,
  TAccountDistribution extends string,
  TAccountPaymentMint extends string,
  TAccountDistributionTokenAccount extends string,
  TAccountCreatorTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
>(
  input: ClaimDistributionInput<
    TAccountCreator,
    TAccountDistribution,
    TAccountPaymentMint,
    TAccountDistributionTokenAccount,
    TAccountCreatorTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
): ClaimDistributionInstruction<
  typeof WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS,
  TAccountCreator,
  TAccountDistribution,
  TAccountPaymentMint,
  TAccountDistributionTokenAccount,
  TAccountCreatorTokenAccount,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    distribution: { value: input.distribution ?? null, isWritable: true },
    paymentMint: { value: input.paymentMint ?? null, isWritable: false },
    distributionTokenAccount: {
      value: input.distributionTokenAccount ?? null,
      isWritable: true,
    },
    creatorTokenAccount: {
      value: input.creatorTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.distribution),
      getAccountMeta(accounts.paymentMint),
      getAccountMeta(accounts.distributionTokenAccount),
      getAccountMeta(accounts.creatorTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimDistributionInstructionDataEncoder().encode({}),
  } as ClaimDistributionInstruction<
    typeof WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS,
    TAccountCreator,
    TAccountDistribution,
    TAccountPaymentMint,
    TAccountDistributionTokenAccount,
    TAccountCreatorTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedClaimDistributionInstruction<
  TProgram extends string = typeof WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    creator: TAccountMetas[0];
    distribution: TAccountMetas[1];
    paymentMint: TAccountMetas[2];
    distributionTokenAccount?: TAccountMetas[3] | undefined;
    creatorTokenAccount?: TAccountMetas[4] | undefined;
    tokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: ClaimDistributionInstructionData;
};

export function parseClaimDistributionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimDistributionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      creator: getNextAccount(),
      distribution: getNextAccount(),
      paymentMint: getNextAccount(),
      distributionTokenAccount: getNextOptionalAccount(),
      creatorTokenAccount: getNextOptionalAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimDistributionInstructionDataDecoder().decode(instruction.data),
  };
}
