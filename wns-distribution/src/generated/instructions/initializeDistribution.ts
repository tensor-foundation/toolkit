/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export type InitializeDistributionInstruction<
  TProgram extends string = typeof WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountGroupMint extends string | IAccountMeta<string> = string,
  TAccountDistributionAccount extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountGroupMint extends string
        ? ReadonlyAccount<TAccountGroupMint>
        : TAccountGroupMint,
      TAccountDistributionAccount extends string
        ? WritableAccount<TAccountDistributionAccount>
        : TAccountDistributionAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeDistributionInstructionData = {
  discriminator: ReadonlyUint8Array;
  paymentMint: Address;
};

export type InitializeDistributionInstructionDataArgs = {
  paymentMint: Address;
};

export function getInitializeDistributionInstructionDataEncoder(): Encoder<InitializeDistributionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['paymentMint', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([146, 158, 129, 53, 22, 89, 86, 207]),
    })
  );
}

export function getInitializeDistributionInstructionDataDecoder(): Decoder<InitializeDistributionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['paymentMint', getAddressDecoder()],
  ]);
}

export function getInitializeDistributionInstructionDataCodec(): Codec<
  InitializeDistributionInstructionDataArgs,
  InitializeDistributionInstructionData
> {
  return combineCodec(
    getInitializeDistributionInstructionDataEncoder(),
    getInitializeDistributionInstructionDataDecoder()
  );
}

export type InitializeDistributionAsyncInput<
  TAccountPayer extends string = string,
  TAccountGroupMint extends string = string,
  TAccountDistributionAccount extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  groupMint: Address<TAccountGroupMint>;
  distributionAccount?: Address<TAccountDistributionAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  paymentMint: InitializeDistributionInstructionDataArgs['paymentMint'];
};

export async function getInitializeDistributionInstructionAsync<
  TAccountPayer extends string,
  TAccountGroupMint extends string,
  TAccountDistributionAccount extends string,
  TAccountSystemProgram extends string,
>(
  input: InitializeDistributionAsyncInput<
    TAccountPayer,
    TAccountGroupMint,
    TAccountDistributionAccount,
    TAccountSystemProgram
  >
): Promise<
  InitializeDistributionInstruction<
    typeof WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS,
    TAccountPayer,
    TAccountGroupMint,
    TAccountDistributionAccount,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    groupMint: { value: input.groupMint ?? null, isWritable: false },
    distributionAccount: {
      value: input.distributionAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.distributionAccount.value) {
    accounts.distributionAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.groupMint.value)),
        getAddressEncoder().encode(expectSome(args.paymentMint)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.groupMint),
      getAccountMeta(accounts.distributionAccount),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeDistributionInstructionDataEncoder().encode(
      args as InitializeDistributionInstructionDataArgs
    ),
  } as InitializeDistributionInstruction<
    typeof WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS,
    TAccountPayer,
    TAccountGroupMint,
    TAccountDistributionAccount,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeDistributionInput<
  TAccountPayer extends string = string,
  TAccountGroupMint extends string = string,
  TAccountDistributionAccount extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  groupMint: Address<TAccountGroupMint>;
  distributionAccount: Address<TAccountDistributionAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  paymentMint: InitializeDistributionInstructionDataArgs['paymentMint'];
};

export function getInitializeDistributionInstruction<
  TAccountPayer extends string,
  TAccountGroupMint extends string,
  TAccountDistributionAccount extends string,
  TAccountSystemProgram extends string,
>(
  input: InitializeDistributionInput<
    TAccountPayer,
    TAccountGroupMint,
    TAccountDistributionAccount,
    TAccountSystemProgram
  >
): InitializeDistributionInstruction<
  typeof WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS,
  TAccountPayer,
  TAccountGroupMint,
  TAccountDistributionAccount,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    groupMint: { value: input.groupMint ?? null, isWritable: false },
    distributionAccount: {
      value: input.distributionAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.groupMint),
      getAccountMeta(accounts.distributionAccount),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeDistributionInstructionDataEncoder().encode(
      args as InitializeDistributionInstructionDataArgs
    ),
  } as InitializeDistributionInstruction<
    typeof WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS,
    TAccountPayer,
    TAccountGroupMint,
    TAccountDistributionAccount,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeDistributionInstruction<
  TProgram extends string = typeof WEN_ROYALTY_DISTRIBUTION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    groupMint: TAccountMetas[1];
    distributionAccount: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitializeDistributionInstructionData;
};

export function parseInitializeDistributionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeDistributionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      groupMint: getNextAccount(),
      distributionAccount: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeDistributionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
