/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  getCreatorDecoder,
  getCreatorEncoder,
  type Creator,
  type CreatorArgs,
} from '../types';

export type DistributionAccount = {
  discriminator: ReadonlyUint8Array;
  /** distribution version */
  version: number;
  /** group to which the distribution account belongs to */
  groupMint: Address;
  /** payment mint for the distribution account */
  paymentMint: Address;
  claimData: Array<Creator>;
};

export type DistributionAccountArgs = {
  /** distribution version */
  version: number;
  /** group to which the distribution account belongs to */
  groupMint: Address;
  /** payment mint for the distribution account */
  paymentMint: Address;
  claimData: Array<CreatorArgs>;
};

export function getDistributionAccountEncoder(): Encoder<DistributionAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU8Encoder()],
      ['groupMint', getAddressEncoder()],
      ['paymentMint', getAddressEncoder()],
      ['claimData', getArrayEncoder(getCreatorEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([98, 90, 112, 65, 49, 161, 198, 154]),
    })
  );
}

export function getDistributionAccountDecoder(): Decoder<DistributionAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU8Decoder()],
    ['groupMint', getAddressDecoder()],
    ['paymentMint', getAddressDecoder()],
    ['claimData', getArrayDecoder(getCreatorDecoder())],
  ]);
}

export function getDistributionAccountCodec(): Codec<
  DistributionAccountArgs,
  DistributionAccount
> {
  return combineCodec(
    getDistributionAccountEncoder(),
    getDistributionAccountDecoder()
  );
}

export function decodeDistributionAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<DistributionAccount, TAddress>;
export function decodeDistributionAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<DistributionAccount, TAddress>;
export function decodeDistributionAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<DistributionAccount, TAddress>
  | MaybeAccount<DistributionAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDistributionAccountDecoder()
  );
}

export async function fetchDistributionAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<DistributionAccount, TAddress>> {
  const maybeAccount = await fetchMaybeDistributionAccount(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDistributionAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<DistributionAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDistributionAccount(maybeAccount);
}

export async function fetchAllDistributionAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<DistributionAccount>[]> {
  const maybeAccounts = await fetchAllMaybeDistributionAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDistributionAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<DistributionAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeDistributionAccount(maybeAccount)
  );
}
