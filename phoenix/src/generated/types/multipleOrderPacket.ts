/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  Option,
  OptionOrNullable,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
} from '@solana/web3.js';
import {
  CondensedOrder,
  CondensedOrderArgs,
  FailedMultipleLimitOrderBehavior,
  FailedMultipleLimitOrderBehaviorArgs,
  getCondensedOrderDecoder,
  getCondensedOrderEncoder,
  getFailedMultipleLimitOrderBehaviorDecoder,
  getFailedMultipleLimitOrderBehaviorEncoder,
} from '.';

export type MultipleOrderPacket = {
  bids: Array<CondensedOrder>;
  asks: Array<CondensedOrder>;
  clientOrderId: Option<bigint>;
  failedMultipleLimitOrderBehavior: FailedMultipleLimitOrderBehavior;
};

export type MultipleOrderPacketArgs = {
  bids: Array<CondensedOrderArgs>;
  asks: Array<CondensedOrderArgs>;
  clientOrderId: OptionOrNullable<number | bigint>;
  failedMultipleLimitOrderBehavior: FailedMultipleLimitOrderBehaviorArgs;
};

export function getMultipleOrderPacketEncoder(): Encoder<MultipleOrderPacketArgs> {
  return getStructEncoder([
    ['bids', getArrayEncoder(getCondensedOrderEncoder())],
    ['asks', getArrayEncoder(getCondensedOrderEncoder())],
    ['clientOrderId', getOptionEncoder(getU128Encoder())],
    [
      'failedMultipleLimitOrderBehavior',
      getFailedMultipleLimitOrderBehaviorEncoder(),
    ],
  ]);
}

export function getMultipleOrderPacketDecoder(): Decoder<MultipleOrderPacket> {
  return getStructDecoder([
    ['bids', getArrayDecoder(getCondensedOrderDecoder())],
    ['asks', getArrayDecoder(getCondensedOrderDecoder())],
    ['clientOrderId', getOptionDecoder(getU128Decoder())],
    [
      'failedMultipleLimitOrderBehavior',
      getFailedMultipleLimitOrderBehaviorDecoder(),
    ],
  ]);
}

export function getMultipleOrderPacketCodec(): Codec<
  MultipleOrderPacketArgs,
  MultipleOrderPacket
> {
  return combineCodec(
    getMultipleOrderPacketEncoder(),
    getMultipleOrderPacketDecoder()
  );
}
