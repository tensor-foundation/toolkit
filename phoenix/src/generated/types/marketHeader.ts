/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/web3.js';
import {
  getMarketSizeParamsDecoder,
  getMarketSizeParamsEncoder,
  getTokenParamsDecoder,
  getTokenParamsEncoder,
  type MarketSizeParams,
  type MarketSizeParamsArgs,
  type TokenParams,
  type TokenParamsArgs,
} from '.';

export type MarketHeader = {
  discriminant: bigint;
  status: bigint;
  marketSizeParams: MarketSizeParams;
  baseParams: TokenParams;
  baseLotSize: bigint;
  quoteParams: TokenParams;
  quoteLotSize: bigint;
  tickSizeInQuoteAtomsPerBaseUnit: bigint;
  authority: Address;
  feeRecipient: Address;
  marketSequenceNumber: bigint;
  successor: Address;
  rawBaseUnitsPerBaseUnit: number;
  padding1: number;
  padding2: Array<bigint>;
};

export type MarketHeaderArgs = {
  discriminant: number | bigint;
  status: number | bigint;
  marketSizeParams: MarketSizeParamsArgs;
  baseParams: TokenParamsArgs;
  baseLotSize: number | bigint;
  quoteParams: TokenParamsArgs;
  quoteLotSize: number | bigint;
  tickSizeInQuoteAtomsPerBaseUnit: number | bigint;
  authority: Address;
  feeRecipient: Address;
  marketSequenceNumber: number | bigint;
  successor: Address;
  rawBaseUnitsPerBaseUnit: number;
  padding1: number;
  padding2: Array<number | bigint>;
};

export function getMarketHeaderEncoder(): Encoder<MarketHeaderArgs> {
  return getStructEncoder([
    ['discriminant', getU64Encoder()],
    ['status', getU64Encoder()],
    ['marketSizeParams', getMarketSizeParamsEncoder()],
    ['baseParams', getTokenParamsEncoder()],
    ['baseLotSize', getU64Encoder()],
    ['quoteParams', getTokenParamsEncoder()],
    ['quoteLotSize', getU64Encoder()],
    ['tickSizeInQuoteAtomsPerBaseUnit', getU64Encoder()],
    ['authority', getAddressEncoder()],
    ['feeRecipient', getAddressEncoder()],
    ['marketSequenceNumber', getU64Encoder()],
    ['successor', getAddressEncoder()],
    ['rawBaseUnitsPerBaseUnit', getU32Encoder()],
    ['padding1', getU32Encoder()],
    ['padding2', getArrayEncoder(getU64Encoder(), { size: 32 })],
  ]);
}

export function getMarketHeaderDecoder(): Decoder<MarketHeader> {
  return getStructDecoder([
    ['discriminant', getU64Decoder()],
    ['status', getU64Decoder()],
    ['marketSizeParams', getMarketSizeParamsDecoder()],
    ['baseParams', getTokenParamsDecoder()],
    ['baseLotSize', getU64Decoder()],
    ['quoteParams', getTokenParamsDecoder()],
    ['quoteLotSize', getU64Decoder()],
    ['tickSizeInQuoteAtomsPerBaseUnit', getU64Decoder()],
    ['authority', getAddressDecoder()],
    ['feeRecipient', getAddressDecoder()],
    ['marketSequenceNumber', getU64Decoder()],
    ['successor', getAddressDecoder()],
    ['rawBaseUnitsPerBaseUnit', getU32Decoder()],
    ['padding1', getU32Decoder()],
    ['padding2', getArrayDecoder(getU64Decoder(), { size: 32 })],
  ]);
}

export function getMarketHeaderCodec(): Codec<MarketHeaderArgs, MarketHeader> {
  return combineCodec(getMarketHeaderEncoder(), getMarketHeaderDecoder());
}
