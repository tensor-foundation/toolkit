/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { PHOENIX_V1_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getCancelUpToParamsDecoder,
  getCancelUpToParamsEncoder,
  type CancelUpToParams,
  type CancelUpToParamsArgs,
} from '../types';

export const CANCEL_UP_TO_WITH_FREE_FUNDS_DISCRIMINATOR = 9;

export function getCancelUpToWithFreeFundsDiscriminatorBytes() {
  return getU8Encoder().encode(CANCEL_UP_TO_WITH_FREE_FUNDS_DISCRIMINATOR);
}

export type CancelUpToWithFreeFundsInstruction<
  TProgram extends string = typeof PHOENIX_V1_PROGRAM_ADDRESS,
  TAccountPhoenixProgram extends string | IAccountMeta<string> = string,
  TAccountLogAuthority extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountTrader extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPhoenixProgram extends string
        ? ReadonlyAccount<TAccountPhoenixProgram>
        : TAccountPhoenixProgram,
      TAccountLogAuthority extends string
        ? ReadonlyAccount<TAccountLogAuthority>
        : TAccountLogAuthority,
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountTrader extends string
        ? ReadonlyAccount<TAccountTrader>
        : TAccountTrader,
      ...TRemainingAccounts,
    ]
  >;

export type CancelUpToWithFreeFundsInstructionData = {
  discriminator: number;
  params: CancelUpToParams;
};

export type CancelUpToWithFreeFundsInstructionDataArgs = {
  params: CancelUpToParamsArgs;
};

export function getCancelUpToWithFreeFundsInstructionDataEncoder(): Encoder<CancelUpToWithFreeFundsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['params', getCancelUpToParamsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CANCEL_UP_TO_WITH_FREE_FUNDS_DISCRIMINATOR,
    })
  );
}

export function getCancelUpToWithFreeFundsInstructionDataDecoder(): Decoder<CancelUpToWithFreeFundsInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['params', getCancelUpToParamsDecoder()],
  ]);
}

export function getCancelUpToWithFreeFundsInstructionDataCodec(): Codec<
  CancelUpToWithFreeFundsInstructionDataArgs,
  CancelUpToWithFreeFundsInstructionData
> {
  return combineCodec(
    getCancelUpToWithFreeFundsInstructionDataEncoder(),
    getCancelUpToWithFreeFundsInstructionDataDecoder()
  );
}

export type CancelUpToWithFreeFundsInput<
  TAccountPhoenixProgram extends string = string,
  TAccountLogAuthority extends string = string,
  TAccountMarket extends string = string,
  TAccountTrader extends string = string,
> = {
  /** Phoenix program */
  phoenixProgram: Address<TAccountPhoenixProgram>;
  /** Phoenix log authority */
  logAuthority: Address<TAccountLogAuthority>;
  /** This account holds the market state */
  market: Address<TAccountMarket>;
  trader: Address<TAccountTrader> | TransactionSigner<TAccountTrader>;
  params: CancelUpToWithFreeFundsInstructionDataArgs['params'];
};

export function getCancelUpToWithFreeFundsInstruction<
  TAccountPhoenixProgram extends string,
  TAccountLogAuthority extends string,
  TAccountMarket extends string,
  TAccountTrader extends string,
  TProgramAddress extends Address = typeof PHOENIX_V1_PROGRAM_ADDRESS,
>(
  input: CancelUpToWithFreeFundsInput<
    TAccountPhoenixProgram,
    TAccountLogAuthority,
    TAccountMarket,
    TAccountTrader
  >,
  config?: { programAddress?: TProgramAddress }
): CancelUpToWithFreeFundsInstruction<
  TProgramAddress,
  TAccountPhoenixProgram,
  TAccountLogAuthority,
  TAccountMarket,
  (typeof input)['trader'] extends TransactionSigner<TAccountTrader>
    ? ReadonlySignerAccount<TAccountTrader> & IAccountSignerMeta<TAccountTrader>
    : TAccountTrader
> {
  // Program address.
  const programAddress = config?.programAddress ?? PHOENIX_V1_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    phoenixProgram: { value: input.phoenixProgram ?? null, isWritable: false },
    logAuthority: { value: input.logAuthority ?? null, isWritable: false },
    market: { value: input.market ?? null, isWritable: true },
    trader: { value: input.trader ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.phoenixProgram),
      getAccountMeta(accounts.logAuthority),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.trader),
    ],
    programAddress,
    data: getCancelUpToWithFreeFundsInstructionDataEncoder().encode(
      args as CancelUpToWithFreeFundsInstructionDataArgs
    ),
  } as CancelUpToWithFreeFundsInstruction<
    TProgramAddress,
    TAccountPhoenixProgram,
    TAccountLogAuthority,
    TAccountMarket,
    (typeof input)['trader'] extends TransactionSigner<TAccountTrader>
      ? ReadonlySignerAccount<TAccountTrader> &
          IAccountSignerMeta<TAccountTrader>
      : TAccountTrader
  >;

  return instruction;
}

export type ParsedCancelUpToWithFreeFundsInstruction<
  TProgram extends string = typeof PHOENIX_V1_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Phoenix program */
    phoenixProgram: TAccountMetas[0];
    /** Phoenix log authority */
    logAuthority: TAccountMetas[1];
    /** This account holds the market state */
    market: TAccountMetas[2];
    trader: TAccountMetas[3];
  };
  data: CancelUpToWithFreeFundsInstructionData;
};

export function parseCancelUpToWithFreeFundsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCancelUpToWithFreeFundsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      phoenixProgram: getNextAccount(),
      logAuthority: getNextAccount(),
      market: getNextAccount(),
      trader: getNextAccount(),
    },
    data: getCancelUpToWithFreeFundsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
