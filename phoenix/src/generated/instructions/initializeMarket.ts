/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { PHOENIX_V1_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getMarketSizeParamsDecoder,
  getMarketSizeParamsEncoder,
  type MarketSizeParams,
  type MarketSizeParamsArgs,
} from '../types';

export const INITIALIZE_MARKET_DISCRIMINATOR = 100;

export function getInitializeMarketDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_MARKET_DISCRIMINATOR);
}

export type InitializeMarketInstruction<
  TProgram extends string = typeof PHOENIX_V1_PROGRAM_ADDRESS,
  TAccountPhoenixProgram extends string | IAccountMeta<string> = string,
  TAccountLogAuthority extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountMarketCreator extends string | IAccountMeta<string> = string,
  TAccountBaseMint extends string | IAccountMeta<string> = string,
  TAccountQuoteMint extends string | IAccountMeta<string> = string,
  TAccountBaseVault extends string | IAccountMeta<string> = string,
  TAccountQuoteVault extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPhoenixProgram extends string
        ? ReadonlyAccount<TAccountPhoenixProgram>
        : TAccountPhoenixProgram,
      TAccountLogAuthority extends string
        ? ReadonlyAccount<TAccountLogAuthority>
        : TAccountLogAuthority,
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountMarketCreator extends string
        ? WritableAccount<TAccountMarketCreator>
        : TAccountMarketCreator,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeMarketInstructionData = {
  discriminator: number;
  marketSizeParams: MarketSizeParams;
  numQuoteLotsPerQuoteUnit: bigint;
  tickSizeInQuoteLotsPerBaseUnit: bigint;
  numBaseLotsPerBaseUnit: bigint;
  takerFeeBps: number;
  feeCollector: Address;
  rawBaseUnitsPerBaseUnit: Option<number>;
};

export type InitializeMarketInstructionDataArgs = {
  marketSizeParams: MarketSizeParamsArgs;
  numQuoteLotsPerQuoteUnit: number | bigint;
  tickSizeInQuoteLotsPerBaseUnit: number | bigint;
  numBaseLotsPerBaseUnit: number | bigint;
  takerFeeBps: number;
  feeCollector: Address;
  rawBaseUnitsPerBaseUnit: OptionOrNullable<number>;
};

export function getInitializeMarketInstructionDataEncoder(): Encoder<InitializeMarketInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['marketSizeParams', getMarketSizeParamsEncoder()],
      ['numQuoteLotsPerQuoteUnit', getU64Encoder()],
      ['tickSizeInQuoteLotsPerBaseUnit', getU64Encoder()],
      ['numBaseLotsPerBaseUnit', getU64Encoder()],
      ['takerFeeBps', getU16Encoder()],
      ['feeCollector', getAddressEncoder()],
      ['rawBaseUnitsPerBaseUnit', getOptionEncoder(getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_MARKET_DISCRIMINATOR })
  );
}

export function getInitializeMarketInstructionDataDecoder(): Decoder<InitializeMarketInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['marketSizeParams', getMarketSizeParamsDecoder()],
    ['numQuoteLotsPerQuoteUnit', getU64Decoder()],
    ['tickSizeInQuoteLotsPerBaseUnit', getU64Decoder()],
    ['numBaseLotsPerBaseUnit', getU64Decoder()],
    ['takerFeeBps', getU16Decoder()],
    ['feeCollector', getAddressDecoder()],
    ['rawBaseUnitsPerBaseUnit', getOptionDecoder(getU32Decoder())],
  ]);
}

export function getInitializeMarketInstructionDataCodec(): Codec<
  InitializeMarketInstructionDataArgs,
  InitializeMarketInstructionData
> {
  return combineCodec(
    getInitializeMarketInstructionDataEncoder(),
    getInitializeMarketInstructionDataDecoder()
  );
}

export type InitializeMarketInput<
  TAccountPhoenixProgram extends string = string,
  TAccountLogAuthority extends string = string,
  TAccountMarket extends string = string,
  TAccountMarketCreator extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** Phoenix program */
  phoenixProgram: Address<TAccountPhoenixProgram>;
  /** Phoenix log authority */
  logAuthority: Address<TAccountLogAuthority>;
  /** This account holds the market state */
  market: Address<TAccountMarket>;
  /** The market_creator account must sign for the creation of new vaults */
  marketCreator:
    | Address<TAccountMarketCreator>
    | TransactionSigner<TAccountMarketCreator>;
  /** Base mint account */
  baseMint: Address<TAccountBaseMint>;
  /** Quote mint account */
  quoteMint: Address<TAccountQuoteMint>;
  /** Base vault PDA, seeds are [b'vault', market_address, base_mint_address] */
  baseVault: Address<TAccountBaseVault>;
  /** Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address] */
  quoteVault: Address<TAccountQuoteVault>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  marketSizeParams: InitializeMarketInstructionDataArgs['marketSizeParams'];
  numQuoteLotsPerQuoteUnit: InitializeMarketInstructionDataArgs['numQuoteLotsPerQuoteUnit'];
  tickSizeInQuoteLotsPerBaseUnit: InitializeMarketInstructionDataArgs['tickSizeInQuoteLotsPerBaseUnit'];
  numBaseLotsPerBaseUnit: InitializeMarketInstructionDataArgs['numBaseLotsPerBaseUnit'];
  takerFeeBps: InitializeMarketInstructionDataArgs['takerFeeBps'];
  feeCollector: InitializeMarketInstructionDataArgs['feeCollector'];
  rawBaseUnitsPerBaseUnit: InitializeMarketInstructionDataArgs['rawBaseUnitsPerBaseUnit'];
};

export function getInitializeMarketInstruction<
  TAccountPhoenixProgram extends string,
  TAccountLogAuthority extends string,
  TAccountMarket extends string,
  TAccountMarketCreator extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof PHOENIX_V1_PROGRAM_ADDRESS,
>(
  input: InitializeMarketInput<
    TAccountPhoenixProgram,
    TAccountLogAuthority,
    TAccountMarket,
    TAccountMarketCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeMarketInstruction<
  TProgramAddress,
  TAccountPhoenixProgram,
  TAccountLogAuthority,
  TAccountMarket,
  (typeof input)['marketCreator'] extends TransactionSigner<TAccountMarketCreator>
    ? WritableSignerAccount<TAccountMarketCreator> &
        IAccountSignerMeta<TAccountMarketCreator>
    : TAccountMarketCreator,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PHOENIX_V1_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    phoenixProgram: { value: input.phoenixProgram ?? null, isWritable: false },
    logAuthority: { value: input.logAuthority ?? null, isWritable: false },
    market: { value: input.market ?? null, isWritable: true },
    marketCreator: { value: input.marketCreator ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.phoenixProgram),
      getAccountMeta(accounts.logAuthority),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.marketCreator),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitializeMarketInstructionDataEncoder().encode(
      args as InitializeMarketInstructionDataArgs
    ),
  } as InitializeMarketInstruction<
    TProgramAddress,
    TAccountPhoenixProgram,
    TAccountLogAuthority,
    TAccountMarket,
    (typeof input)['marketCreator'] extends TransactionSigner<TAccountMarketCreator>
      ? WritableSignerAccount<TAccountMarketCreator> &
          IAccountSignerMeta<TAccountMarketCreator>
      : TAccountMarketCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedInitializeMarketInstruction<
  TProgram extends string = typeof PHOENIX_V1_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Phoenix program */
    phoenixProgram: TAccountMetas[0];
    /** Phoenix log authority */
    logAuthority: TAccountMetas[1];
    /** This account holds the market state */
    market: TAccountMetas[2];
    /** The market_creator account must sign for the creation of new vaults */
    marketCreator: TAccountMetas[3];
    /** Base mint account */
    baseMint: TAccountMetas[4];
    /** Quote mint account */
    quoteMint: TAccountMetas[5];
    /** Base vault PDA, seeds are [b'vault', market_address, base_mint_address] */
    baseVault: TAccountMetas[6];
    /** Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address] */
    quoteVault: TAccountMetas[7];
    /** System program */
    systemProgram: TAccountMetas[8];
    /** Token program */
    tokenProgram: TAccountMetas[9];
  };
  data: InitializeMarketInstructionData;
};

export function parseInitializeMarketInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeMarketInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      phoenixProgram: getNextAccount(),
      logAuthority: getNextAccount(),
      market: getNextAccount(),
      marketCreator: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getInitializeMarketInstructionDataDecoder().decode(instruction.data),
  };
}
