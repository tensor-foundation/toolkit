/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { PHOENIX_V1_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getMarketStatusDecoder,
  getMarketStatusEncoder,
  type MarketStatus,
  type MarketStatusArgs,
} from '../types';

export const CHANGE_MARKET_STATUS_DISCRIMINATOR = 103;

export function getChangeMarketStatusDiscriminatorBytes() {
  return getU8Encoder().encode(CHANGE_MARKET_STATUS_DISCRIMINATOR);
}

export type ChangeMarketStatusInstruction<
  TProgram extends string = typeof PHOENIX_V1_PROGRAM_ADDRESS,
  TAccountPhoenixProgram extends string | IAccountMeta<string> = string,
  TAccountLogAuthority extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountMarketAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPhoenixProgram extends string
        ? ReadonlyAccount<TAccountPhoenixProgram>
        : TAccountPhoenixProgram,
      TAccountLogAuthority extends string
        ? ReadonlyAccount<TAccountLogAuthority>
        : TAccountLogAuthority,
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountMarketAuthority extends string
        ? ReadonlyAccount<TAccountMarketAuthority>
        : TAccountMarketAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type ChangeMarketStatusInstructionData = {
  discriminator: number;
  marketStatus: MarketStatus;
};

export type ChangeMarketStatusInstructionDataArgs = {
  marketStatus: MarketStatusArgs;
};

export function getChangeMarketStatusInstructionDataEncoder(): Encoder<ChangeMarketStatusInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['marketStatus', getMarketStatusEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CHANGE_MARKET_STATUS_DISCRIMINATOR })
  );
}

export function getChangeMarketStatusInstructionDataDecoder(): Decoder<ChangeMarketStatusInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['marketStatus', getMarketStatusDecoder()],
  ]);
}

export function getChangeMarketStatusInstructionDataCodec(): Codec<
  ChangeMarketStatusInstructionDataArgs,
  ChangeMarketStatusInstructionData
> {
  return combineCodec(
    getChangeMarketStatusInstructionDataEncoder(),
    getChangeMarketStatusInstructionDataDecoder()
  );
}

export type ChangeMarketStatusInput<
  TAccountPhoenixProgram extends string = string,
  TAccountLogAuthority extends string = string,
  TAccountMarket extends string = string,
  TAccountMarketAuthority extends string = string,
> = {
  /** Phoenix program */
  phoenixProgram: Address<TAccountPhoenixProgram>;
  /** Phoenix log authority */
  logAuthority: Address<TAccountLogAuthority>;
  /** This account holds the market state */
  market: Address<TAccountMarket>;
  /** The market_authority account must sign to change market status */
  marketAuthority:
    | Address<TAccountMarketAuthority>
    | TransactionSigner<TAccountMarketAuthority>;
  marketStatus: ChangeMarketStatusInstructionDataArgs['marketStatus'];
};

export function getChangeMarketStatusInstruction<
  TAccountPhoenixProgram extends string,
  TAccountLogAuthority extends string,
  TAccountMarket extends string,
  TAccountMarketAuthority extends string,
  TProgramAddress extends Address = typeof PHOENIX_V1_PROGRAM_ADDRESS,
>(
  input: ChangeMarketStatusInput<
    TAccountPhoenixProgram,
    TAccountLogAuthority,
    TAccountMarket,
    TAccountMarketAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): ChangeMarketStatusInstruction<
  TProgramAddress,
  TAccountPhoenixProgram,
  TAccountLogAuthority,
  TAccountMarket,
  (typeof input)['marketAuthority'] extends TransactionSigner<TAccountMarketAuthority>
    ? ReadonlySignerAccount<TAccountMarketAuthority> &
        IAccountSignerMeta<TAccountMarketAuthority>
    : TAccountMarketAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? PHOENIX_V1_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    phoenixProgram: { value: input.phoenixProgram ?? null, isWritable: false },
    logAuthority: { value: input.logAuthority ?? null, isWritable: false },
    market: { value: input.market ?? null, isWritable: true },
    marketAuthority: {
      value: input.marketAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.phoenixProgram),
      getAccountMeta(accounts.logAuthority),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.marketAuthority),
    ],
    programAddress,
    data: getChangeMarketStatusInstructionDataEncoder().encode(
      args as ChangeMarketStatusInstructionDataArgs
    ),
  } as ChangeMarketStatusInstruction<
    TProgramAddress,
    TAccountPhoenixProgram,
    TAccountLogAuthority,
    TAccountMarket,
    (typeof input)['marketAuthority'] extends TransactionSigner<TAccountMarketAuthority>
      ? ReadonlySignerAccount<TAccountMarketAuthority> &
          IAccountSignerMeta<TAccountMarketAuthority>
      : TAccountMarketAuthority
  >;

  return instruction;
}

export type ParsedChangeMarketStatusInstruction<
  TProgram extends string = typeof PHOENIX_V1_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Phoenix program */
    phoenixProgram: TAccountMetas[0];
    /** Phoenix log authority */
    logAuthority: TAccountMetas[1];
    /** This account holds the market state */
    market: TAccountMetas[2];
    /** The market_authority account must sign to change market status */
    marketAuthority: TAccountMetas[3];
  };
  data: ChangeMarketStatusInstructionData;
};

export function parseChangeMarketStatusInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedChangeMarketStatusInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      phoenixProgram: getNextAccount(),
      logAuthority: getNextAccount(),
      market: getNextAccount(),
      marketAuthority: getNextAccount(),
    },
    data: getChangeMarketStatusInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
