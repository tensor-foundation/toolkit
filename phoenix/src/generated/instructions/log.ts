/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
} from '@solana/web3.js';
import { PHOENIX_V1_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const LOG_DISCRIMINATOR = 15;

export function getLogDiscriminatorBytes() {
  return getU8Encoder().encode(LOG_DISCRIMINATOR);
}

export type LogInstruction<
  TProgram extends string = typeof PHOENIX_V1_PROGRAM_ADDRESS,
  TAccountLogAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountLogAuthority extends string
        ? ReadonlyAccount<TAccountLogAuthority>
        : TAccountLogAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type LogInstructionData = { discriminator: number };

export type LogInstructionDataArgs = {};

export function getLogInstructionDataEncoder(): Encoder<LogInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: LOG_DISCRIMINATOR })
  );
}

export function getLogInstructionDataDecoder(): Decoder<LogInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getLogInstructionDataCodec(): Codec<
  LogInstructionDataArgs,
  LogInstructionData
> {
  return combineCodec(
    getLogInstructionDataEncoder(),
    getLogInstructionDataDecoder()
  );
}

export type LogInput<TAccountLogAuthority extends string = string> = {
  /** Log authority */
  logAuthority:
    | Address<TAccountLogAuthority>
    | TransactionSigner<TAccountLogAuthority>;
};

export function getLogInstruction<
  TAccountLogAuthority extends string,
  TProgramAddress extends Address = typeof PHOENIX_V1_PROGRAM_ADDRESS,
>(
  input: LogInput<TAccountLogAuthority>,
  config?: { programAddress?: TProgramAddress }
): LogInstruction<
  TProgramAddress,
  (typeof input)['logAuthority'] extends TransactionSigner<TAccountLogAuthority>
    ? ReadonlySignerAccount<TAccountLogAuthority> &
        IAccountSignerMeta<TAccountLogAuthority>
    : TAccountLogAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? PHOENIX_V1_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    logAuthority: { value: input.logAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.logAuthority)],
    programAddress,
    data: getLogInstructionDataEncoder().encode({}),
  } as LogInstruction<
    TProgramAddress,
    (typeof input)['logAuthority'] extends TransactionSigner<TAccountLogAuthority>
      ? ReadonlySignerAccount<TAccountLogAuthority> &
          IAccountSignerMeta<TAccountLogAuthority>
      : TAccountLogAuthority
  >;

  return instruction;
}

export type ParsedLogInstruction<
  TProgram extends string = typeof PHOENIX_V1_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Log authority */
    logAuthority: TAccountMetas[0];
  };
  data: LogInstructionData;
};

export function parseLogInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedLogInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      logAuthority: getNextAccount(),
    },
    data: getLogInstructionDataDecoder().decode(instruction.data),
  };
}
