/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

export const enum MplTokenMetadataProgramErrorCode {
  /** InstructionUnpackError */
  INSTRUCTION_UNPACK_ERROR = 0x0, // 0
  /** InstructionPackError */
  INSTRUCTION_PACK_ERROR = 0x1, // 1
  /** NotRentExempt: Lamport balance below rent-exempt threshold */
  NOT_RENT_EXEMPT = 0x2, // 2
  /** AlreadyInitialized: Already initialized */
  ALREADY_INITIALIZED = 0x3, // 3
  /** Uninitialized: Uninitialized */
  UNINITIALIZED = 0x4, // 4
  /** InvalidMetadataKey:  Metadata's key must match seed of ['metadata', program id, mint] provided */
  INVALID_METADATA_KEY = 0x5, // 5
  /** InvalidEditionKey: Edition's key must match seed of ['metadata', program id, name, 'edition'] provided */
  INVALID_EDITION_KEY = 0x6, // 6
  /** UpdateAuthorityIncorrect: Update Authority given does not match */
  UPDATE_AUTHORITY_INCORRECT = 0x7, // 7
  /** UpdateAuthorityIsNotSigner: Update Authority needs to be signer to update metadata */
  UPDATE_AUTHORITY_IS_NOT_SIGNER = 0x8, // 8
  /** NotMintAuthority: You must be the mint authority and signer on this transaction */
  NOT_MINT_AUTHORITY = 0x9, // 9
  /** InvalidMintAuthority: Mint authority provided does not match the authority on the mint */
  INVALID_MINT_AUTHORITY = 0xa, // 10
  /** NameTooLong: Name too long */
  NAME_TOO_LONG = 0xb, // 11
  /** SymbolTooLong: Symbol too long */
  SYMBOL_TOO_LONG = 0xc, // 12
  /** UriTooLong: URI too long */
  URI_TOO_LONG = 0xd, // 13
  /** UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner */
  UPDATE_AUTHORITY_MUST_BE_EQUAL_TO_METADATA_AUTHORITY_AND_SIGNER = 0xe, // 14
  /** MintMismatch: Mint given does not match mint on Metadata */
  MINT_MISMATCH = 0xf, // 15
  /** EditionsMustHaveExactlyOneToken: Editions must have exactly one token */
  EDITIONS_MUST_HAVE_EXACTLY_ONE_TOKEN = 0x10, // 16
  /** MaxEditionsMintedAlready */
  MAX_EDITIONS_MINTED_ALREADY = 0x11, // 17
  /** TokenMintToFailed */
  TOKEN_MINT_TO_FAILED = 0x12, // 18
  /** MasterRecordMismatch */
  MASTER_RECORD_MISMATCH = 0x13, // 19
  /** DestinationMintMismatch */
  DESTINATION_MINT_MISMATCH = 0x14, // 20
  /** EditionAlreadyMinted */
  EDITION_ALREADY_MINTED = 0x15, // 21
  /** PrintingMintDecimalsShouldBeZero */
  PRINTING_MINT_DECIMALS_SHOULD_BE_ZERO = 0x16, // 22
  /** OneTimePrintingAuthorizationMintDecimalsShouldBeZero */
  ONE_TIME_PRINTING_AUTHORIZATION_MINT_DECIMALS_SHOULD_BE_ZERO = 0x17, // 23
  /** EditionMintDecimalsShouldBeZero: EditionMintDecimalsShouldBeZero */
  EDITION_MINT_DECIMALS_SHOULD_BE_ZERO = 0x18, // 24
  /** TokenBurnFailed */
  TOKEN_BURN_FAILED = 0x19, // 25
  /** TokenAccountOneTimeAuthMintMismatch */
  TOKEN_ACCOUNT_ONE_TIME_AUTH_MINT_MISMATCH = 0x1a, // 26
  /** DerivedKeyInvalid: Derived key invalid */
  DERIVED_KEY_INVALID = 0x1b, // 27
  /** PrintingMintMismatch: The Printing mint does not match that on the master edition! */
  PRINTING_MINT_MISMATCH = 0x1c, // 28
  /** OneTimePrintingAuthMintMismatch: The One Time Printing Auth mint does not match that on the master edition! */
  ONE_TIME_PRINTING_AUTH_MINT_MISMATCH = 0x1d, // 29
  /** TokenAccountMintMismatch: The mint of the token account does not match the Printing mint! */
  TOKEN_ACCOUNT_MINT_MISMATCH = 0x1e, // 30
  /** TokenAccountMintMismatchV2: The mint of the token account does not match the master metadata mint! */
  TOKEN_ACCOUNT_MINT_MISMATCH_V2 = 0x1f, // 31
  /** NotEnoughTokens: Not enough tokens to mint a limited edition */
  NOT_ENOUGH_TOKENS = 0x20, // 32
  /** PrintingMintAuthorizationAccountMismatch */
  PRINTING_MINT_AUTHORIZATION_ACCOUNT_MISMATCH = 0x21, // 33
  /** AuthorizationTokenAccountOwnerMismatch */
  AUTHORIZATION_TOKEN_ACCOUNT_OWNER_MISMATCH = 0x22, // 34
  /** Disabled */
  DISABLED = 0x23, // 35
  /** CreatorsTooLong: Creators list too long */
  CREATORS_TOO_LONG = 0x24, // 36
  /** CreatorsMustBeAtleastOne: Creators must be at least one if set */
  CREATORS_MUST_BE_ATLEAST_ONE = 0x25, // 37
  /** MustBeOneOfCreators */
  MUST_BE_ONE_OF_CREATORS = 0x26, // 38
  /** NoCreatorsPresentOnMetadata: This metadata does not have creators */
  NO_CREATORS_PRESENT_ON_METADATA = 0x27, // 39
  /** CreatorNotFound: This creator address was not found */
  CREATOR_NOT_FOUND = 0x28, // 40
  /** InvalidBasisPoints: Basis points cannot be more than 10000 */
  INVALID_BASIS_POINTS = 0x29, // 41
  /** PrimarySaleCanOnlyBeFlippedToTrue: Primary sale can only be flipped to true and is immutable */
  PRIMARY_SALE_CAN_ONLY_BE_FLIPPED_TO_TRUE = 0x2a, // 42
  /** OwnerMismatch: Owner does not match that on the account given */
  OWNER_MISMATCH = 0x2b, // 43
  /** NoBalanceInAccountForAuthorization: This account has no tokens to be used for authorization */
  NO_BALANCE_IN_ACCOUNT_FOR_AUTHORIZATION = 0x2c, // 44
  /** ShareTotalMustBe100: Share total must equal 100 for creator array */
  SHARE_TOTAL_MUST_BE100 = 0x2d, // 45
  /** ReservationExists */
  RESERVATION_EXISTS = 0x2e, // 46
  /** ReservationDoesNotExist */
  RESERVATION_DOES_NOT_EXIST = 0x2f, // 47
  /** ReservationNotSet */
  RESERVATION_NOT_SET = 0x30, // 48
  /** ReservationAlreadyMade */
  RESERVATION_ALREADY_MADE = 0x31, // 49
  /** BeyondMaxAddressSize */
  BEYOND_MAX_ADDRESS_SIZE = 0x32, // 50
  /** NumericalOverflowError: NumericalOverflowError */
  NUMERICAL_OVERFLOW_ERROR = 0x33, // 51
  /** ReservationBreachesMaximumSupply */
  RESERVATION_BREACHES_MAXIMUM_SUPPLY = 0x34, // 52
  /** AddressNotInReservation */
  ADDRESS_NOT_IN_RESERVATION = 0x35, // 53
  /** CannotVerifyAnotherCreator: You cannot unilaterally verify another creator, they must sign */
  CANNOT_VERIFY_ANOTHER_CREATOR = 0x36, // 54
  /** CannotUnverifyAnotherCreator: You cannot unilaterally unverify another creator */
  CANNOT_UNVERIFY_ANOTHER_CREATOR = 0x37, // 55
  /** SpotMismatch */
  SPOT_MISMATCH = 0x38, // 56
  /** IncorrectOwner: Incorrect account owner */
  INCORRECT_OWNER = 0x39, // 57
  /** PrintingWouldBreachMaximumSupply */
  PRINTING_WOULD_BREACH_MAXIMUM_SUPPLY = 0x3a, // 58
  /** DataIsImmutable: Data is immutable */
  DATA_IS_IMMUTABLE = 0x3b, // 59
  /** DuplicateCreatorAddress: No duplicate creator addresses */
  DUPLICATE_CREATOR_ADDRESS = 0x3c, // 60
  /** ReservationSpotsRemainingShouldMatchTotalSpotsAtStart */
  RESERVATION_SPOTS_REMAINING_SHOULD_MATCH_TOTAL_SPOTS_AT_START = 0x3d, // 61
  /** InvalidTokenProgram: Invalid token program */
  INVALID_TOKEN_PROGRAM = 0x3e, // 62
  /** DataTypeMismatch: Data type mismatch */
  DATA_TYPE_MISMATCH = 0x3f, // 63
  /** BeyondAlottedAddressSize */
  BEYOND_ALOTTED_ADDRESS_SIZE = 0x40, // 64
  /** ReservationNotComplete */
  RESERVATION_NOT_COMPLETE = 0x41, // 65
  /** TriedToReplaceAnExistingReservation */
  TRIED_TO_REPLACE_AN_EXISTING_RESERVATION = 0x42, // 66
  /** InvalidOperation: Invalid operation */
  INVALID_OPERATION = 0x43, // 67
  /** InvalidOwner: Invalid Owner */
  INVALID_OWNER = 0x44, // 68
  /** PrintingMintSupplyMustBeZeroForConversion: Printing mint supply must be zero for conversion */
  PRINTING_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION = 0x45, // 69
  /** OneTimeAuthMintSupplyMustBeZeroForConversion: One Time Auth mint supply must be zero for conversion */
  ONE_TIME_AUTH_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION = 0x46, // 70
  /** InvalidEditionIndex: You tried to insert one edition too many into an edition mark pda */
  INVALID_EDITION_INDEX = 0x47, // 71
  /** ReservationArrayShouldBeSizeOne */
  RESERVATION_ARRAY_SHOULD_BE_SIZE_ONE = 0x48, // 72
  /** IsMutableCanOnlyBeFlippedToFalse: Is Mutable can only be flipped to false */
  IS_MUTABLE_CAN_ONLY_BE_FLIPPED_TO_FALSE = 0x49, // 73
  /** CollectionCannotBeVerifiedInThisInstruction: Collection cannot be verified in this instruction */
  COLLECTION_CANNOT_BE_VERIFIED_IN_THIS_INSTRUCTION = 0x4a, // 74
  /** Removed: This instruction was deprecated in a previous release and is now removed */
  REMOVED = 0x4b, // 75
  /** MustBeBurned */
  MUST_BE_BURNED = 0x4c, // 76
  /** InvalidUseMethod: This use method is invalid */
  INVALID_USE_METHOD = 0x4d, // 77
  /** CannotChangeUseMethodAfterFirstUse: Cannot Change Use Method after the first use */
  CANNOT_CHANGE_USE_METHOD_AFTER_FIRST_USE = 0x4e, // 78
  /** CannotChangeUsesAfterFirstUse: Cannot Change Remaining or Available uses after the first use */
  CANNOT_CHANGE_USES_AFTER_FIRST_USE = 0x4f, // 79
  /** CollectionNotFound: Collection Not Found on Metadata */
  COLLECTION_NOT_FOUND = 0x50, // 80
  /** InvalidCollectionUpdateAuthority: Collection Update Authority is invalid */
  INVALID_COLLECTION_UPDATE_AUTHORITY = 0x51, // 81
  /** CollectionMustBeAUniqueMasterEdition: Collection Must Be a Unique Master Edition v2 */
  COLLECTION_MUST_BE_A_UNIQUE_MASTER_EDITION = 0x52, // 82
  /** UseAuthorityRecordAlreadyExists: The Use Authority Record Already Exists, to modify it Revoke, then Approve */
  USE_AUTHORITY_RECORD_ALREADY_EXISTS = 0x53, // 83
  /** UseAuthorityRecordAlreadyRevoked: The Use Authority Record is empty or already revoked */
  USE_AUTHORITY_RECORD_ALREADY_REVOKED = 0x54, // 84
  /** Unusable: This token has no uses */
  UNUSABLE = 0x55, // 85
  /** NotEnoughUses: There are not enough Uses left on this token. */
  NOT_ENOUGH_USES = 0x56, // 86
  /** CollectionAuthorityRecordAlreadyExists: This Collection Authority Record Already Exists. */
  COLLECTION_AUTHORITY_RECORD_ALREADY_EXISTS = 0x57, // 87
  /** CollectionAuthorityDoesNotExist: This Collection Authority Record Does Not Exist. */
  COLLECTION_AUTHORITY_DOES_NOT_EXIST = 0x58, // 88
  /** InvalidUseAuthorityRecord: This Use Authority Record is invalid. */
  INVALID_USE_AUTHORITY_RECORD = 0x59, // 89
  /** InvalidCollectionAuthorityRecord */
  INVALID_COLLECTION_AUTHORITY_RECORD = 0x5a, // 90
  /** InvalidFreezeAuthority: Metadata does not match the freeze authority on the mint */
  INVALID_FREEZE_AUTHORITY = 0x5b, // 91
  /** InvalidDelegate: All tokens in this account have not been delegated to this user. */
  INVALID_DELEGATE = 0x5c, // 92
  /** CannotAdjustVerifiedCreator */
  CANNOT_ADJUST_VERIFIED_CREATOR = 0x5d, // 93
  /** CannotRemoveVerifiedCreator: Verified creators cannot be removed. */
  CANNOT_REMOVE_VERIFIED_CREATOR = 0x5e, // 94
  /** CannotWipeVerifiedCreators */
  CANNOT_WIPE_VERIFIED_CREATORS = 0x5f, // 95
  /** NotAllowedToChangeSellerFeeBasisPoints */
  NOT_ALLOWED_TO_CHANGE_SELLER_FEE_BASIS_POINTS = 0x60, // 96
  /** EditionOverrideCannotBeZero: Edition override cannot be zero */
  EDITION_OVERRIDE_CANNOT_BE_ZERO = 0x61, // 97
  /** InvalidUser: Invalid User */
  INVALID_USER = 0x62, // 98
  /** RevokeCollectionAuthoritySignerIncorrect: Revoke Collection Authority signer is incorrect */
  REVOKE_COLLECTION_AUTHORITY_SIGNER_INCORRECT = 0x63, // 99
  /** TokenCloseFailed */
  TOKEN_CLOSE_FAILED = 0x64, // 100
  /** UnsizedCollection: Can't use this function on unsized collection */
  UNSIZED_COLLECTION = 0x65, // 101
  /** SizedCollection: Can't use this function on a sized collection */
  SIZED_COLLECTION = 0x66, // 102
  /** MissingCollectionMetadata: Missing collection metadata account */
  MISSING_COLLECTION_METADATA = 0x67, // 103
  /** NotAMemberOfCollection: This NFT is not a member of the specified collection. */
  NOT_A_MEMBER_OF_COLLECTION = 0x68, // 104
  /** NotVerifiedMemberOfCollection: This NFT is not a verified member of the specified collection. */
  NOT_VERIFIED_MEMBER_OF_COLLECTION = 0x69, // 105
  /** NotACollectionParent: This NFT is not a collection parent NFT. */
  NOT_A_COLLECTION_PARENT = 0x6a, // 106
  /** CouldNotDetermineTokenStandard: Could not determine a TokenStandard type. */
  COULD_NOT_DETERMINE_TOKEN_STANDARD = 0x6b, // 107
  /** MissingEditionAccount: This mint account has an edition but none was provided. */
  MISSING_EDITION_ACCOUNT = 0x6c, // 108
  /** NotAMasterEdition: This edition is not a Master Edition */
  NOT_A_MASTER_EDITION = 0x6d, // 109
  /** MasterEditionHasPrints: This Master Edition has existing prints */
  MASTER_EDITION_HAS_PRINTS = 0x6e, // 110
  /** BorshDeserializationError */
  BORSH_DESERIALIZATION_ERROR = 0x6f, // 111
  /** CannotUpdateVerifiedCollection: Cannot update a verified collection in this command */
  CANNOT_UPDATE_VERIFIED_COLLECTION = 0x70, // 112
  /** CollectionMasterEditionAccountInvalid: Edition account doesnt match collection  */
  COLLECTION_MASTER_EDITION_ACCOUNT_INVALID = 0x71, // 113
  /** AlreadyVerified: Item is already verified. */
  ALREADY_VERIFIED = 0x72, // 114
  /** AlreadyUnverified */
  ALREADY_UNVERIFIED = 0x73, // 115
  /** NotAPrintEdition: This edition is not a Print Edition */
  NOT_A_PRINT_EDITION = 0x74, // 116
  /** InvalidMasterEdition: Invalid Master Edition */
  INVALID_MASTER_EDITION = 0x75, // 117
  /** InvalidPrintEdition: Invalid Print Edition */
  INVALID_PRINT_EDITION = 0x76, // 118
  /** InvalidEditionMarker: Invalid Edition Marker */
  INVALID_EDITION_MARKER = 0x77, // 119
  /** ReservationListDeprecated: Reservation List is Deprecated */
  RESERVATION_LIST_DEPRECATED = 0x78, // 120
  /** PrintEditionDoesNotMatchMasterEdition: Print Edition does not match Master Edition */
  PRINT_EDITION_DOES_NOT_MATCH_MASTER_EDITION = 0x79, // 121
  /** EditionNumberGreaterThanMaxSupply: Edition Number greater than max supply */
  EDITION_NUMBER_GREATER_THAN_MAX_SUPPLY = 0x7a, // 122
  /** MustUnverify: Must unverify before migrating collections. */
  MUST_UNVERIFY = 0x7b, // 123
  /** InvalidEscrowBumpSeed: Invalid Escrow Account Bump Seed */
  INVALID_ESCROW_BUMP_SEED = 0x7c, // 124
  /** MustBeEscrowAuthority: Must Escrow Authority */
  MUST_BE_ESCROW_AUTHORITY = 0x7d, // 125
  /** InvalidSystemProgram: Invalid System Program */
  INVALID_SYSTEM_PROGRAM = 0x7e, // 126
  /** MustBeNonFungible: Must be a Non Fungible Token */
  MUST_BE_NON_FUNGIBLE = 0x7f, // 127
  /** InsufficientTokens: Insufficient tokens for transfer */
  INSUFFICIENT_TOKENS = 0x80, // 128
  /** BorshSerializationError: Borsh Serialization Error */
  BORSH_SERIALIZATION_ERROR = 0x81, // 129
  /** NoFreezeAuthoritySet: Cannot create NFT with no Freeze Authority. */
  NO_FREEZE_AUTHORITY_SET = 0x82, // 130
  /** InvalidCollectionSizeChange: Invalid collection size change */
  INVALID_COLLECTION_SIZE_CHANGE = 0x83, // 131
  /** InvalidBubblegumSigner: Invalid bubblegum signer */
  INVALID_BUBBLEGUM_SIGNER = 0x84, // 132
  /** EscrowParentHasDelegate: Escrow parent cannot have a delegate */
  ESCROW_PARENT_HAS_DELEGATE = 0x85, // 133
  /** MintIsNotSigner: Mint needs to be signer to initialize the account */
  MINT_IS_NOT_SIGNER = 0x86, // 134
  /** InvalidTokenStandard: Invalid token standard */
  INVALID_TOKEN_STANDARD = 0x87, // 135
  /** InvalidMintForTokenStandard: Invalid mint account for specified token standard */
  INVALID_MINT_FOR_TOKEN_STANDARD = 0x88, // 136
  /** InvalidAuthorizationRules: Invalid authorization rules account */
  INVALID_AUTHORIZATION_RULES = 0x89, // 137
  /** MissingAuthorizationRules: Missing authorization rules account */
  MISSING_AUTHORIZATION_RULES = 0x8a, // 138
  /** MissingProgrammableConfig: Missing programmable configuration */
  MISSING_PROGRAMMABLE_CONFIG = 0x8b, // 139
  /** InvalidProgrammableConfig: Invalid programmable configuration */
  INVALID_PROGRAMMABLE_CONFIG = 0x8c, // 140
  /** DelegateAlreadyExists: Delegate already exists */
  DELEGATE_ALREADY_EXISTS = 0x8d, // 141
  /** DelegateNotFound: Delegate not found */
  DELEGATE_NOT_FOUND = 0x8e, // 142
  /** MissingAccountInBuilder: Required account not set in instruction builder */
  MISSING_ACCOUNT_IN_BUILDER = 0x8f, // 143
  /** MissingArgumentInBuilder: Required argument not set in instruction builder */
  MISSING_ARGUMENT_IN_BUILDER = 0x90, // 144
  /** FeatureNotSupported: Feature not supported currently */
  FEATURE_NOT_SUPPORTED = 0x91, // 145
  /** InvalidSystemWallet: Invalid system wallet */
  INVALID_SYSTEM_WALLET = 0x92, // 146
  /** OnlySaleDelegateCanTransfer: Only the sale delegate can transfer while its set */
  ONLY_SALE_DELEGATE_CAN_TRANSFER = 0x93, // 147
  /** MissingTokenAccount: Missing token account */
  MISSING_TOKEN_ACCOUNT = 0x94, // 148
  /** MissingSplTokenProgram: Missing SPL token program */
  MISSING_SPL_TOKEN_PROGRAM = 0x95, // 149
  /** MissingAuthorizationRulesProgram: Missing authorization rules program */
  MISSING_AUTHORIZATION_RULES_PROGRAM = 0x96, // 150
  /** InvalidDelegateRoleForTransfer: Invalid delegate role for transfer */
  INVALID_DELEGATE_ROLE_FOR_TRANSFER = 0x97, // 151
  /** InvalidTransferAuthority: Invalid transfer authority */
  INVALID_TRANSFER_AUTHORITY = 0x98, // 152
  /** InstructionNotSupported: Instruction not supported for ProgrammableNonFungible assets */
  INSTRUCTION_NOT_SUPPORTED = 0x99, // 153
  /** KeyMismatch: Public key does not match expected value */
  KEY_MISMATCH = 0x9a, // 154
  /** LockedToken: Token is locked */
  LOCKED_TOKEN = 0x9b, // 155
  /** UnlockedToken: Token is unlocked */
  UNLOCKED_TOKEN = 0x9c, // 156
  /** MissingDelegateRole: Missing delegate role */
  MISSING_DELEGATE_ROLE = 0x9d, // 157
  /** InvalidAuthorityType: Invalid authority type */
  INVALID_AUTHORITY_TYPE = 0x9e, // 158
  /** MissingTokenRecord: Missing token record account */
  MISSING_TOKEN_RECORD = 0x9f, // 159
  /** MintSupplyMustBeZero: Mint supply must be zero for programmable assets */
  MINT_SUPPLY_MUST_BE_ZERO = 0xa0, // 160
  /** DataIsEmptyOrZeroed: Data is empty or zeroed */
  DATA_IS_EMPTY_OR_ZEROED = 0xa1, // 161
  /** MissingTokenOwnerAccount: Missing token owner */
  MISSING_TOKEN_OWNER_ACCOUNT = 0xa2, // 162
  /** InvalidMasterEditionAccountLength: Master edition account has an invalid length */
  INVALID_MASTER_EDITION_ACCOUNT_LENGTH = 0xa3, // 163
  /** IncorrectTokenState: Incorrect token state */
  INCORRECT_TOKEN_STATE = 0xa4, // 164
  /** InvalidDelegateRole: Invalid delegate role */
  INVALID_DELEGATE_ROLE = 0xa5, // 165
  /** MissingPrintSupply: Print supply is required for non-fungibles */
  MISSING_PRINT_SUPPLY = 0xa6, // 166
  /** MissingMasterEditionAccount: Missing master edition account */
  MISSING_MASTER_EDITION_ACCOUNT = 0xa7, // 167
  /** AmountMustBeGreaterThanZero: Amount must be greater than zero */
  AMOUNT_MUST_BE_GREATER_THAN_ZERO = 0xa8, // 168
  /** InvalidDelegateArgs: Invalid delegate args */
  INVALID_DELEGATE_ARGS = 0xa9, // 169
  /** MissingLockedTransferAddress: Missing address for locked transfer */
  MISSING_LOCKED_TRANSFER_ADDRESS = 0xaa, // 170
  /** InvalidLockedTransferAddress: Invalid destination address for locked transfer */
  INVALID_LOCKED_TRANSFER_ADDRESS = 0xab, // 171
  /** DataIncrementLimitExceeded: Exceeded account realloc increase limit */
  DATA_INCREMENT_LIMIT_EXCEEDED = 0xac, // 172
  /** CannotUpdateAssetWithDelegate: Cannot update the rule set of a programmable asset that has a delegate */
  CANNOT_UPDATE_ASSET_WITH_DELEGATE = 0xad, // 173
  /** InvalidAmount: Invalid token amount for this operation or token standard */
  INVALID_AMOUNT = 0xae, // 174
  /** MissingMasterEditionMintAccount: Missing master edition mint account */
  MISSING_MASTER_EDITION_MINT_ACCOUNT = 0xaf, // 175
  /** MissingMasterEditionTokenAccount: Missing master edition token account */
  MISSING_MASTER_EDITION_TOKEN_ACCOUNT = 0xb0, // 176
  /** MissingEditionMarkerAccount: Missing edition marker account */
  MISSING_EDITION_MARKER_ACCOUNT = 0xb1, // 177
  /** CannotBurnWithDelegate: Cannot burn while persistent delegate is set */
  CANNOT_BURN_WITH_DELEGATE = 0xb2, // 178
  /** MissingEdition: Missing edition account */
  MISSING_EDITION = 0xb3, // 179
  /** InvalidAssociatedTokenAccountProgram: Invalid Associated Token Account Program */
  INVALID_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM = 0xb4, // 180
  /** InvalidInstructionsSysvar: Invalid InstructionsSysvar */
  INVALID_INSTRUCTIONS_SYSVAR = 0xb5, // 181
  /** InvalidParentAccounts: Invalid or Unneeded parent accounts */
  INVALID_PARENT_ACCOUNTS = 0xb6, // 182
  /** InvalidUpdateArgs: Authority cannot apply all update args */
  INVALID_UPDATE_ARGS = 0xb7, // 183
  /** InsufficientTokenBalance: Token account does not have enough tokens */
  INSUFFICIENT_TOKEN_BALANCE = 0xb8, // 184
  /** MissingCollectionMint: Missing collection account */
  MISSING_COLLECTION_MINT = 0xb9, // 185
  /** MissingCollectionMasterEdition: Missing collection master edition account */
  MISSING_COLLECTION_MASTER_EDITION = 0xba, // 186
  /** InvalidTokenRecord: Invalid token record account */
  INVALID_TOKEN_RECORD = 0xbb, // 187
  /** InvalidCloseAuthority: The close authority needs to be revoked by the Utility Delegate */
  INVALID_CLOSE_AUTHORITY = 0xbc, // 188
  /** InvalidInstruction: Invalid or removed instruction */
  INVALID_INSTRUCTION = 0xbd, // 189
  /** MissingDelegateRecord: Missing delegate record */
  MISSING_DELEGATE_RECORD = 0xbe, // 190
  /** InvalidFeeAccount */
  INVALID_FEE_ACCOUNT = 0xbf, // 191
  /** InvalidMetadataFlags */
  INVALID_METADATA_FLAGS = 0xc0, // 192
  /** CannotChangeUpdateAuthorityWithDelegate: Cannot change the update authority with a delegate */
  CANNOT_CHANGE_UPDATE_AUTHORITY_WITH_DELEGATE = 0xc1, // 193
  /** InvalidMintExtensionType: Invalid mint extension type */
  INVALID_MINT_EXTENSION_TYPE = 0xc2, // 194
  /** InvalidMintCloseAuthority: Invalid mint close authority */
  INVALID_MINT_CLOSE_AUTHORITY = 0xc3, // 195
  /** InvalidMetadataPointer: Invalid metadata pointer */
  INVALID_METADATA_POINTER = 0xc4, // 196
  /** InvalidTokenExtensionType: Invalid token extension type */
  INVALID_TOKEN_EXTENSION_TYPE = 0xc5, // 197
  /** MissingImmutableOwnerExtension: Missing immutable owner extension */
  MISSING_IMMUTABLE_OWNER_EXTENSION = 0xc6, // 198
}

export class MplTokenMetadataProgramError extends Error {
  override readonly name = 'MplTokenMetadataProgramError';

  readonly code: MplTokenMetadataProgramErrorCode;

  readonly cause: Error | undefined;

  constructor(
    code: MplTokenMetadataProgramErrorCode,
    name: string,
    message: string,
    cause?: Error
  ) {
    super(`${name} (${code}): ${message}`);
    this.code = code;
    this.cause = cause;
  }
}

let mplTokenMetadataProgramErrorCodeMap:
  | Record<MplTokenMetadataProgramErrorCode, [string, string]>
  | undefined;
if (__DEV__) {
  mplTokenMetadataProgramErrorCodeMap = {
    [MplTokenMetadataProgramErrorCode.INSTRUCTION_UNPACK_ERROR]: [
      'InstructionUnpackError',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.INSTRUCTION_PACK_ERROR]: [
      'InstructionPackError',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.NOT_RENT_EXEMPT]: [
      'NotRentExempt',
      `Lamport balance below rent-exempt threshold`,
    ],
    [MplTokenMetadataProgramErrorCode.ALREADY_INITIALIZED]: [
      'AlreadyInitialized',
      `Already initialized`,
    ],
    [MplTokenMetadataProgramErrorCode.UNINITIALIZED]: [
      'Uninitialized',
      `Uninitialized`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_METADATA_KEY]: [
      'InvalidMetadataKey',
      ` Metadata's key must match seed of ['metadata', program id, mint] provided`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_EDITION_KEY]: [
      'InvalidEditionKey',
      `Edition's key must match seed of ['metadata', program id, name, 'edition'] provided`,
    ],
    [MplTokenMetadataProgramErrorCode.UPDATE_AUTHORITY_INCORRECT]: [
      'UpdateAuthorityIncorrect',
      `Update Authority given does not match`,
    ],
    [MplTokenMetadataProgramErrorCode.UPDATE_AUTHORITY_IS_NOT_SIGNER]: [
      'UpdateAuthorityIsNotSigner',
      `Update Authority needs to be signer to update metadata`,
    ],
    [MplTokenMetadataProgramErrorCode.NOT_MINT_AUTHORITY]: [
      'NotMintAuthority',
      `You must be the mint authority and signer on this transaction`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_MINT_AUTHORITY]: [
      'InvalidMintAuthority',
      `Mint authority provided does not match the authority on the mint`,
    ],
    [MplTokenMetadataProgramErrorCode.NAME_TOO_LONG]: [
      'NameTooLong',
      `Name too long`,
    ],
    [MplTokenMetadataProgramErrorCode.SYMBOL_TOO_LONG]: [
      'SymbolTooLong',
      `Symbol too long`,
    ],
    [MplTokenMetadataProgramErrorCode.URI_TOO_LONG]: [
      'UriTooLong',
      `URI too long`,
    ],
    [MplTokenMetadataProgramErrorCode.UPDATE_AUTHORITY_MUST_BE_EQUAL_TO_METADATA_AUTHORITY_AND_SIGNER]:
      ['UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner', ``],
    [MplTokenMetadataProgramErrorCode.MINT_MISMATCH]: [
      'MintMismatch',
      `Mint given does not match mint on Metadata`,
    ],
    [MplTokenMetadataProgramErrorCode.EDITIONS_MUST_HAVE_EXACTLY_ONE_TOKEN]: [
      'EditionsMustHaveExactlyOneToken',
      `Editions must have exactly one token`,
    ],
    [MplTokenMetadataProgramErrorCode.MAX_EDITIONS_MINTED_ALREADY]: [
      'MaxEditionsMintedAlready',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.TOKEN_MINT_TO_FAILED]: [
      'TokenMintToFailed',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.MASTER_RECORD_MISMATCH]: [
      'MasterRecordMismatch',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.DESTINATION_MINT_MISMATCH]: [
      'DestinationMintMismatch',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.EDITION_ALREADY_MINTED]: [
      'EditionAlreadyMinted',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.PRINTING_MINT_DECIMALS_SHOULD_BE_ZERO]: [
      'PrintingMintDecimalsShouldBeZero',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.ONE_TIME_PRINTING_AUTHORIZATION_MINT_DECIMALS_SHOULD_BE_ZERO]:
      ['OneTimePrintingAuthorizationMintDecimalsShouldBeZero', ``],
    [MplTokenMetadataProgramErrorCode.EDITION_MINT_DECIMALS_SHOULD_BE_ZERO]: [
      'EditionMintDecimalsShouldBeZero',
      `EditionMintDecimalsShouldBeZero`,
    ],
    [MplTokenMetadataProgramErrorCode.TOKEN_BURN_FAILED]: [
      'TokenBurnFailed',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.TOKEN_ACCOUNT_ONE_TIME_AUTH_MINT_MISMATCH]:
      ['TokenAccountOneTimeAuthMintMismatch', ``],
    [MplTokenMetadataProgramErrorCode.DERIVED_KEY_INVALID]: [
      'DerivedKeyInvalid',
      `Derived key invalid`,
    ],
    [MplTokenMetadataProgramErrorCode.PRINTING_MINT_MISMATCH]: [
      'PrintingMintMismatch',
      `The Printing mint does not match that on the master edition!`,
    ],
    [MplTokenMetadataProgramErrorCode.ONE_TIME_PRINTING_AUTH_MINT_MISMATCH]: [
      'OneTimePrintingAuthMintMismatch',
      `The One Time Printing Auth mint does not match that on the master edition!`,
    ],
    [MplTokenMetadataProgramErrorCode.TOKEN_ACCOUNT_MINT_MISMATCH]: [
      'TokenAccountMintMismatch',
      `The mint of the token account does not match the Printing mint!`,
    ],
    [MplTokenMetadataProgramErrorCode.TOKEN_ACCOUNT_MINT_MISMATCH_V2]: [
      'TokenAccountMintMismatchV2',
      `The mint of the token account does not match the master metadata mint!`,
    ],
    [MplTokenMetadataProgramErrorCode.NOT_ENOUGH_TOKENS]: [
      'NotEnoughTokens',
      `Not enough tokens to mint a limited edition`,
    ],
    [MplTokenMetadataProgramErrorCode.PRINTING_MINT_AUTHORIZATION_ACCOUNT_MISMATCH]:
      ['PrintingMintAuthorizationAccountMismatch', ``],
    [MplTokenMetadataProgramErrorCode.AUTHORIZATION_TOKEN_ACCOUNT_OWNER_MISMATCH]:
      ['AuthorizationTokenAccountOwnerMismatch', ``],
    [MplTokenMetadataProgramErrorCode.DISABLED]: ['Disabled', ``],
    [MplTokenMetadataProgramErrorCode.CREATORS_TOO_LONG]: [
      'CreatorsTooLong',
      `Creators list too long`,
    ],
    [MplTokenMetadataProgramErrorCode.CREATORS_MUST_BE_ATLEAST_ONE]: [
      'CreatorsMustBeAtleastOne',
      `Creators must be at least one if set`,
    ],
    [MplTokenMetadataProgramErrorCode.MUST_BE_ONE_OF_CREATORS]: [
      'MustBeOneOfCreators',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.NO_CREATORS_PRESENT_ON_METADATA]: [
      'NoCreatorsPresentOnMetadata',
      `This metadata does not have creators`,
    ],
    [MplTokenMetadataProgramErrorCode.CREATOR_NOT_FOUND]: [
      'CreatorNotFound',
      `This creator address was not found`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_BASIS_POINTS]: [
      'InvalidBasisPoints',
      `Basis points cannot be more than 10000`,
    ],
    [MplTokenMetadataProgramErrorCode.PRIMARY_SALE_CAN_ONLY_BE_FLIPPED_TO_TRUE]:
      [
        'PrimarySaleCanOnlyBeFlippedToTrue',
        `Primary sale can only be flipped to true and is immutable`,
      ],
    [MplTokenMetadataProgramErrorCode.OWNER_MISMATCH]: [
      'OwnerMismatch',
      `Owner does not match that on the account given`,
    ],
    [MplTokenMetadataProgramErrorCode.NO_BALANCE_IN_ACCOUNT_FOR_AUTHORIZATION]:
      [
        'NoBalanceInAccountForAuthorization',
        `This account has no tokens to be used for authorization`,
      ],
    [MplTokenMetadataProgramErrorCode.SHARE_TOTAL_MUST_BE100]: [
      'ShareTotalMustBe100',
      `Share total must equal 100 for creator array`,
    ],
    [MplTokenMetadataProgramErrorCode.RESERVATION_EXISTS]: [
      'ReservationExists',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.RESERVATION_DOES_NOT_EXIST]: [
      'ReservationDoesNotExist',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.RESERVATION_NOT_SET]: [
      'ReservationNotSet',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.RESERVATION_ALREADY_MADE]: [
      'ReservationAlreadyMade',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.BEYOND_MAX_ADDRESS_SIZE]: [
      'BeyondMaxAddressSize',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.NUMERICAL_OVERFLOW_ERROR]: [
      'NumericalOverflowError',
      `NumericalOverflowError`,
    ],
    [MplTokenMetadataProgramErrorCode.RESERVATION_BREACHES_MAXIMUM_SUPPLY]: [
      'ReservationBreachesMaximumSupply',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.ADDRESS_NOT_IN_RESERVATION]: [
      'AddressNotInReservation',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.CANNOT_VERIFY_ANOTHER_CREATOR]: [
      'CannotVerifyAnotherCreator',
      `You cannot unilaterally verify another creator, they must sign`,
    ],
    [MplTokenMetadataProgramErrorCode.CANNOT_UNVERIFY_ANOTHER_CREATOR]: [
      'CannotUnverifyAnotherCreator',
      `You cannot unilaterally unverify another creator`,
    ],
    [MplTokenMetadataProgramErrorCode.SPOT_MISMATCH]: ['SpotMismatch', ``],
    [MplTokenMetadataProgramErrorCode.INCORRECT_OWNER]: [
      'IncorrectOwner',
      `Incorrect account owner`,
    ],
    [MplTokenMetadataProgramErrorCode.PRINTING_WOULD_BREACH_MAXIMUM_SUPPLY]: [
      'PrintingWouldBreachMaximumSupply',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.DATA_IS_IMMUTABLE]: [
      'DataIsImmutable',
      `Data is immutable`,
    ],
    [MplTokenMetadataProgramErrorCode.DUPLICATE_CREATOR_ADDRESS]: [
      'DuplicateCreatorAddress',
      `No duplicate creator addresses`,
    ],
    [MplTokenMetadataProgramErrorCode.RESERVATION_SPOTS_REMAINING_SHOULD_MATCH_TOTAL_SPOTS_AT_START]:
      ['ReservationSpotsRemainingShouldMatchTotalSpotsAtStart', ``],
    [MplTokenMetadataProgramErrorCode.INVALID_TOKEN_PROGRAM]: [
      'InvalidTokenProgram',
      `Invalid token program`,
    ],
    [MplTokenMetadataProgramErrorCode.DATA_TYPE_MISMATCH]: [
      'DataTypeMismatch',
      `Data type mismatch`,
    ],
    [MplTokenMetadataProgramErrorCode.BEYOND_ALOTTED_ADDRESS_SIZE]: [
      'BeyondAlottedAddressSize',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.RESERVATION_NOT_COMPLETE]: [
      'ReservationNotComplete',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.TRIED_TO_REPLACE_AN_EXISTING_RESERVATION]:
      ['TriedToReplaceAnExistingReservation', ``],
    [MplTokenMetadataProgramErrorCode.INVALID_OPERATION]: [
      'InvalidOperation',
      `Invalid operation`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_OWNER]: [
      'InvalidOwner',
      `Invalid Owner`,
    ],
    [MplTokenMetadataProgramErrorCode.PRINTING_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION]:
      [
        'PrintingMintSupplyMustBeZeroForConversion',
        `Printing mint supply must be zero for conversion`,
      ],
    [MplTokenMetadataProgramErrorCode.ONE_TIME_AUTH_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION]:
      [
        'OneTimeAuthMintSupplyMustBeZeroForConversion',
        `One Time Auth mint supply must be zero for conversion`,
      ],
    [MplTokenMetadataProgramErrorCode.INVALID_EDITION_INDEX]: [
      'InvalidEditionIndex',
      `You tried to insert one edition too many into an edition mark pda`,
    ],
    [MplTokenMetadataProgramErrorCode.RESERVATION_ARRAY_SHOULD_BE_SIZE_ONE]: [
      'ReservationArrayShouldBeSizeOne',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.IS_MUTABLE_CAN_ONLY_BE_FLIPPED_TO_FALSE]:
      [
        'IsMutableCanOnlyBeFlippedToFalse',
        `Is Mutable can only be flipped to false`,
      ],
    [MplTokenMetadataProgramErrorCode.COLLECTION_CANNOT_BE_VERIFIED_IN_THIS_INSTRUCTION]:
      [
        'CollectionCannotBeVerifiedInThisInstruction',
        `Collection cannot be verified in this instruction`,
      ],
    [MplTokenMetadataProgramErrorCode.REMOVED]: [
      'Removed',
      `This instruction was deprecated in a previous release and is now removed`,
    ],
    [MplTokenMetadataProgramErrorCode.MUST_BE_BURNED]: ['MustBeBurned', ``],
    [MplTokenMetadataProgramErrorCode.INVALID_USE_METHOD]: [
      'InvalidUseMethod',
      `This use method is invalid`,
    ],
    [MplTokenMetadataProgramErrorCode.CANNOT_CHANGE_USE_METHOD_AFTER_FIRST_USE]:
      [
        'CannotChangeUseMethodAfterFirstUse',
        `Cannot Change Use Method after the first use`,
      ],
    [MplTokenMetadataProgramErrorCode.CANNOT_CHANGE_USES_AFTER_FIRST_USE]: [
      'CannotChangeUsesAfterFirstUse',
      `Cannot Change Remaining or Available uses after the first use`,
    ],
    [MplTokenMetadataProgramErrorCode.COLLECTION_NOT_FOUND]: [
      'CollectionNotFound',
      `Collection Not Found on Metadata`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_COLLECTION_UPDATE_AUTHORITY]: [
      'InvalidCollectionUpdateAuthority',
      `Collection Update Authority is invalid`,
    ],
    [MplTokenMetadataProgramErrorCode.COLLECTION_MUST_BE_A_UNIQUE_MASTER_EDITION]:
      [
        'CollectionMustBeAUniqueMasterEdition',
        `Collection Must Be a Unique Master Edition v2`,
      ],
    [MplTokenMetadataProgramErrorCode.USE_AUTHORITY_RECORD_ALREADY_EXISTS]: [
      'UseAuthorityRecordAlreadyExists',
      `The Use Authority Record Already Exists, to modify it Revoke, then Approve`,
    ],
    [MplTokenMetadataProgramErrorCode.USE_AUTHORITY_RECORD_ALREADY_REVOKED]: [
      'UseAuthorityRecordAlreadyRevoked',
      `The Use Authority Record is empty or already revoked`,
    ],
    [MplTokenMetadataProgramErrorCode.UNUSABLE]: [
      'Unusable',
      `This token has no uses`,
    ],
    [MplTokenMetadataProgramErrorCode.NOT_ENOUGH_USES]: [
      'NotEnoughUses',
      `There are not enough Uses left on this token.`,
    ],
    [MplTokenMetadataProgramErrorCode.COLLECTION_AUTHORITY_RECORD_ALREADY_EXISTS]:
      [
        'CollectionAuthorityRecordAlreadyExists',
        `This Collection Authority Record Already Exists.`,
      ],
    [MplTokenMetadataProgramErrorCode.COLLECTION_AUTHORITY_DOES_NOT_EXIST]: [
      'CollectionAuthorityDoesNotExist',
      `This Collection Authority Record Does Not Exist.`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_USE_AUTHORITY_RECORD]: [
      'InvalidUseAuthorityRecord',
      `This Use Authority Record is invalid.`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_COLLECTION_AUTHORITY_RECORD]: [
      'InvalidCollectionAuthorityRecord',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_FREEZE_AUTHORITY]: [
      'InvalidFreezeAuthority',
      `Metadata does not match the freeze authority on the mint`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_DELEGATE]: [
      'InvalidDelegate',
      `All tokens in this account have not been delegated to this user.`,
    ],
    [MplTokenMetadataProgramErrorCode.CANNOT_ADJUST_VERIFIED_CREATOR]: [
      'CannotAdjustVerifiedCreator',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.CANNOT_REMOVE_VERIFIED_CREATOR]: [
      'CannotRemoveVerifiedCreator',
      `Verified creators cannot be removed.`,
    ],
    [MplTokenMetadataProgramErrorCode.CANNOT_WIPE_VERIFIED_CREATORS]: [
      'CannotWipeVerifiedCreators',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.NOT_ALLOWED_TO_CHANGE_SELLER_FEE_BASIS_POINTS]:
      ['NotAllowedToChangeSellerFeeBasisPoints', ``],
    [MplTokenMetadataProgramErrorCode.EDITION_OVERRIDE_CANNOT_BE_ZERO]: [
      'EditionOverrideCannotBeZero',
      `Edition override cannot be zero`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_USER]: [
      'InvalidUser',
      `Invalid User`,
    ],
    [MplTokenMetadataProgramErrorCode.REVOKE_COLLECTION_AUTHORITY_SIGNER_INCORRECT]:
      [
        'RevokeCollectionAuthoritySignerIncorrect',
        `Revoke Collection Authority signer is incorrect`,
      ],
    [MplTokenMetadataProgramErrorCode.TOKEN_CLOSE_FAILED]: [
      'TokenCloseFailed',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.UNSIZED_COLLECTION]: [
      'UnsizedCollection',
      `Can't use this function on unsized collection`,
    ],
    [MplTokenMetadataProgramErrorCode.SIZED_COLLECTION]: [
      'SizedCollection',
      `Can't use this function on a sized collection`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_COLLECTION_METADATA]: [
      'MissingCollectionMetadata',
      `Missing collection metadata account`,
    ],
    [MplTokenMetadataProgramErrorCode.NOT_A_MEMBER_OF_COLLECTION]: [
      'NotAMemberOfCollection',
      `This NFT is not a member of the specified collection.`,
    ],
    [MplTokenMetadataProgramErrorCode.NOT_VERIFIED_MEMBER_OF_COLLECTION]: [
      'NotVerifiedMemberOfCollection',
      `This NFT is not a verified member of the specified collection.`,
    ],
    [MplTokenMetadataProgramErrorCode.NOT_A_COLLECTION_PARENT]: [
      'NotACollectionParent',
      `This NFT is not a collection parent NFT.`,
    ],
    [MplTokenMetadataProgramErrorCode.COULD_NOT_DETERMINE_TOKEN_STANDARD]: [
      'CouldNotDetermineTokenStandard',
      `Could not determine a TokenStandard type.`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_EDITION_ACCOUNT]: [
      'MissingEditionAccount',
      `This mint account has an edition but none was provided.`,
    ],
    [MplTokenMetadataProgramErrorCode.NOT_A_MASTER_EDITION]: [
      'NotAMasterEdition',
      `This edition is not a Master Edition`,
    ],
    [MplTokenMetadataProgramErrorCode.MASTER_EDITION_HAS_PRINTS]: [
      'MasterEditionHasPrints',
      `This Master Edition has existing prints`,
    ],
    [MplTokenMetadataProgramErrorCode.BORSH_DESERIALIZATION_ERROR]: [
      'BorshDeserializationError',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.CANNOT_UPDATE_VERIFIED_COLLECTION]: [
      'CannotUpdateVerifiedCollection',
      `Cannot update a verified collection in this command`,
    ],
    [MplTokenMetadataProgramErrorCode.COLLECTION_MASTER_EDITION_ACCOUNT_INVALID]:
      [
        'CollectionMasterEditionAccountInvalid',
        `Edition account doesnt match collection `,
      ],
    [MplTokenMetadataProgramErrorCode.ALREADY_VERIFIED]: [
      'AlreadyVerified',
      `Item is already verified.`,
    ],
    [MplTokenMetadataProgramErrorCode.ALREADY_UNVERIFIED]: [
      'AlreadyUnverified',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.NOT_A_PRINT_EDITION]: [
      'NotAPrintEdition',
      `This edition is not a Print Edition`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_MASTER_EDITION]: [
      'InvalidMasterEdition',
      `Invalid Master Edition`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_PRINT_EDITION]: [
      'InvalidPrintEdition',
      `Invalid Print Edition`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_EDITION_MARKER]: [
      'InvalidEditionMarker',
      `Invalid Edition Marker`,
    ],
    [MplTokenMetadataProgramErrorCode.RESERVATION_LIST_DEPRECATED]: [
      'ReservationListDeprecated',
      `Reservation List is Deprecated`,
    ],
    [MplTokenMetadataProgramErrorCode.PRINT_EDITION_DOES_NOT_MATCH_MASTER_EDITION]:
      [
        'PrintEditionDoesNotMatchMasterEdition',
        `Print Edition does not match Master Edition`,
      ],
    [MplTokenMetadataProgramErrorCode.EDITION_NUMBER_GREATER_THAN_MAX_SUPPLY]: [
      'EditionNumberGreaterThanMaxSupply',
      `Edition Number greater than max supply`,
    ],
    [MplTokenMetadataProgramErrorCode.MUST_UNVERIFY]: [
      'MustUnverify',
      `Must unverify before migrating collections.`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_ESCROW_BUMP_SEED]: [
      'InvalidEscrowBumpSeed',
      `Invalid Escrow Account Bump Seed`,
    ],
    [MplTokenMetadataProgramErrorCode.MUST_BE_ESCROW_AUTHORITY]: [
      'MustBeEscrowAuthority',
      `Must Escrow Authority`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_SYSTEM_PROGRAM]: [
      'InvalidSystemProgram',
      `Invalid System Program`,
    ],
    [MplTokenMetadataProgramErrorCode.MUST_BE_NON_FUNGIBLE]: [
      'MustBeNonFungible',
      `Must be a Non Fungible Token`,
    ],
    [MplTokenMetadataProgramErrorCode.INSUFFICIENT_TOKENS]: [
      'InsufficientTokens',
      `Insufficient tokens for transfer`,
    ],
    [MplTokenMetadataProgramErrorCode.BORSH_SERIALIZATION_ERROR]: [
      'BorshSerializationError',
      `Borsh Serialization Error`,
    ],
    [MplTokenMetadataProgramErrorCode.NO_FREEZE_AUTHORITY_SET]: [
      'NoFreezeAuthoritySet',
      `Cannot create NFT with no Freeze Authority.`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_COLLECTION_SIZE_CHANGE]: [
      'InvalidCollectionSizeChange',
      `Invalid collection size change`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_BUBBLEGUM_SIGNER]: [
      'InvalidBubblegumSigner',
      `Invalid bubblegum signer`,
    ],
    [MplTokenMetadataProgramErrorCode.ESCROW_PARENT_HAS_DELEGATE]: [
      'EscrowParentHasDelegate',
      `Escrow parent cannot have a delegate`,
    ],
    [MplTokenMetadataProgramErrorCode.MINT_IS_NOT_SIGNER]: [
      'MintIsNotSigner',
      `Mint needs to be signer to initialize the account`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_TOKEN_STANDARD]: [
      'InvalidTokenStandard',
      `Invalid token standard`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_MINT_FOR_TOKEN_STANDARD]: [
      'InvalidMintForTokenStandard',
      `Invalid mint account for specified token standard`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_AUTHORIZATION_RULES]: [
      'InvalidAuthorizationRules',
      `Invalid authorization rules account`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_AUTHORIZATION_RULES]: [
      'MissingAuthorizationRules',
      `Missing authorization rules account`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_PROGRAMMABLE_CONFIG]: [
      'MissingProgrammableConfig',
      `Missing programmable configuration`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_PROGRAMMABLE_CONFIG]: [
      'InvalidProgrammableConfig',
      `Invalid programmable configuration`,
    ],
    [MplTokenMetadataProgramErrorCode.DELEGATE_ALREADY_EXISTS]: [
      'DelegateAlreadyExists',
      `Delegate already exists`,
    ],
    [MplTokenMetadataProgramErrorCode.DELEGATE_NOT_FOUND]: [
      'DelegateNotFound',
      `Delegate not found`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_ACCOUNT_IN_BUILDER]: [
      'MissingAccountInBuilder',
      `Required account not set in instruction builder`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_ARGUMENT_IN_BUILDER]: [
      'MissingArgumentInBuilder',
      `Required argument not set in instruction builder`,
    ],
    [MplTokenMetadataProgramErrorCode.FEATURE_NOT_SUPPORTED]: [
      'FeatureNotSupported',
      `Feature not supported currently`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_SYSTEM_WALLET]: [
      'InvalidSystemWallet',
      `Invalid system wallet`,
    ],
    [MplTokenMetadataProgramErrorCode.ONLY_SALE_DELEGATE_CAN_TRANSFER]: [
      'OnlySaleDelegateCanTransfer',
      `Only the sale delegate can transfer while its set`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_TOKEN_ACCOUNT]: [
      'MissingTokenAccount',
      `Missing token account`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_SPL_TOKEN_PROGRAM]: [
      'MissingSplTokenProgram',
      `Missing SPL token program`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_AUTHORIZATION_RULES_PROGRAM]: [
      'MissingAuthorizationRulesProgram',
      `Missing authorization rules program`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_DELEGATE_ROLE_FOR_TRANSFER]: [
      'InvalidDelegateRoleForTransfer',
      `Invalid delegate role for transfer`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_TRANSFER_AUTHORITY]: [
      'InvalidTransferAuthority',
      `Invalid transfer authority`,
    ],
    [MplTokenMetadataProgramErrorCode.INSTRUCTION_NOT_SUPPORTED]: [
      'InstructionNotSupported',
      `Instruction not supported for ProgrammableNonFungible assets`,
    ],
    [MplTokenMetadataProgramErrorCode.KEY_MISMATCH]: [
      'KeyMismatch',
      `Public key does not match expected value`,
    ],
    [MplTokenMetadataProgramErrorCode.LOCKED_TOKEN]: [
      'LockedToken',
      `Token is locked`,
    ],
    [MplTokenMetadataProgramErrorCode.UNLOCKED_TOKEN]: [
      'UnlockedToken',
      `Token is unlocked`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_DELEGATE_ROLE]: [
      'MissingDelegateRole',
      `Missing delegate role`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_AUTHORITY_TYPE]: [
      'InvalidAuthorityType',
      `Invalid authority type`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_TOKEN_RECORD]: [
      'MissingTokenRecord',
      `Missing token record account`,
    ],
    [MplTokenMetadataProgramErrorCode.MINT_SUPPLY_MUST_BE_ZERO]: [
      'MintSupplyMustBeZero',
      `Mint supply must be zero for programmable assets`,
    ],
    [MplTokenMetadataProgramErrorCode.DATA_IS_EMPTY_OR_ZEROED]: [
      'DataIsEmptyOrZeroed',
      `Data is empty or zeroed`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_TOKEN_OWNER_ACCOUNT]: [
      'MissingTokenOwnerAccount',
      `Missing token owner`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_MASTER_EDITION_ACCOUNT_LENGTH]: [
      'InvalidMasterEditionAccountLength',
      `Master edition account has an invalid length`,
    ],
    [MplTokenMetadataProgramErrorCode.INCORRECT_TOKEN_STATE]: [
      'IncorrectTokenState',
      `Incorrect token state`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_DELEGATE_ROLE]: [
      'InvalidDelegateRole',
      `Invalid delegate role`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_PRINT_SUPPLY]: [
      'MissingPrintSupply',
      `Print supply is required for non-fungibles`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_MASTER_EDITION_ACCOUNT]: [
      'MissingMasterEditionAccount',
      `Missing master edition account`,
    ],
    [MplTokenMetadataProgramErrorCode.AMOUNT_MUST_BE_GREATER_THAN_ZERO]: [
      'AmountMustBeGreaterThanZero',
      `Amount must be greater than zero`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_DELEGATE_ARGS]: [
      'InvalidDelegateArgs',
      `Invalid delegate args`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_LOCKED_TRANSFER_ADDRESS]: [
      'MissingLockedTransferAddress',
      `Missing address for locked transfer`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_LOCKED_TRANSFER_ADDRESS]: [
      'InvalidLockedTransferAddress',
      `Invalid destination address for locked transfer`,
    ],
    [MplTokenMetadataProgramErrorCode.DATA_INCREMENT_LIMIT_EXCEEDED]: [
      'DataIncrementLimitExceeded',
      `Exceeded account realloc increase limit`,
    ],
    [MplTokenMetadataProgramErrorCode.CANNOT_UPDATE_ASSET_WITH_DELEGATE]: [
      'CannotUpdateAssetWithDelegate',
      `Cannot update the rule set of a programmable asset that has a delegate`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_AMOUNT]: [
      'InvalidAmount',
      `Invalid token amount for this operation or token standard`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_MASTER_EDITION_MINT_ACCOUNT]: [
      'MissingMasterEditionMintAccount',
      `Missing master edition mint account`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_MASTER_EDITION_TOKEN_ACCOUNT]: [
      'MissingMasterEditionTokenAccount',
      `Missing master edition token account`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_EDITION_MARKER_ACCOUNT]: [
      'MissingEditionMarkerAccount',
      `Missing edition marker account`,
    ],
    [MplTokenMetadataProgramErrorCode.CANNOT_BURN_WITH_DELEGATE]: [
      'CannotBurnWithDelegate',
      `Cannot burn while persistent delegate is set`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_EDITION]: [
      'MissingEdition',
      `Missing edition account`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM]:
      [
        'InvalidAssociatedTokenAccountProgram',
        `Invalid Associated Token Account Program`,
      ],
    [MplTokenMetadataProgramErrorCode.INVALID_INSTRUCTIONS_SYSVAR]: [
      'InvalidInstructionsSysvar',
      `Invalid InstructionsSysvar`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_PARENT_ACCOUNTS]: [
      'InvalidParentAccounts',
      `Invalid or Unneeded parent accounts`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_UPDATE_ARGS]: [
      'InvalidUpdateArgs',
      `Authority cannot apply all update args`,
    ],
    [MplTokenMetadataProgramErrorCode.INSUFFICIENT_TOKEN_BALANCE]: [
      'InsufficientTokenBalance',
      `Token account does not have enough tokens`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_COLLECTION_MINT]: [
      'MissingCollectionMint',
      `Missing collection account`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_COLLECTION_MASTER_EDITION]: [
      'MissingCollectionMasterEdition',
      `Missing collection master edition account`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_TOKEN_RECORD]: [
      'InvalidTokenRecord',
      `Invalid token record account`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_CLOSE_AUTHORITY]: [
      'InvalidCloseAuthority',
      `The close authority needs to be revoked by the Utility Delegate`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_INSTRUCTION]: [
      'InvalidInstruction',
      `Invalid or removed instruction`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_DELEGATE_RECORD]: [
      'MissingDelegateRecord',
      `Missing delegate record`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_FEE_ACCOUNT]: [
      'InvalidFeeAccount',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_METADATA_FLAGS]: [
      'InvalidMetadataFlags',
      ``,
    ],
    [MplTokenMetadataProgramErrorCode.CANNOT_CHANGE_UPDATE_AUTHORITY_WITH_DELEGATE]:
      [
        'CannotChangeUpdateAuthorityWithDelegate',
        `Cannot change the update authority with a delegate`,
      ],
    [MplTokenMetadataProgramErrorCode.INVALID_MINT_EXTENSION_TYPE]: [
      'InvalidMintExtensionType',
      `Invalid mint extension type`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_MINT_CLOSE_AUTHORITY]: [
      'InvalidMintCloseAuthority',
      `Invalid mint close authority`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_METADATA_POINTER]: [
      'InvalidMetadataPointer',
      `Invalid metadata pointer`,
    ],
    [MplTokenMetadataProgramErrorCode.INVALID_TOKEN_EXTENSION_TYPE]: [
      'InvalidTokenExtensionType',
      `Invalid token extension type`,
    ],
    [MplTokenMetadataProgramErrorCode.MISSING_IMMUTABLE_OWNER_EXTENSION]: [
      'MissingImmutableOwnerExtension',
      `Missing immutable owner extension`,
    ],
  };
}

export function getMplTokenMetadataProgramErrorFromCode(
  code: MplTokenMetadataProgramErrorCode,
  cause?: Error
): MplTokenMetadataProgramError {
  if (__DEV__) {
    return new MplTokenMetadataProgramError(
      code,
      ...(
        mplTokenMetadataProgramErrorCodeMap as Record<
          MplTokenMetadataProgramErrorCode,
          [string, string]
        >
      )[code],
      cause
    );
  }

  return new MplTokenMetadataProgramError(
    code,
    'Unknown',
    'Error message not available in production bundles. Compile with __DEV__ set to true to see more information.',
    cause
  );
}
