/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  GetDataEnumKind,
  GetDataEnumKindContent,
  combineCodec,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  mapEncoder,
} from '@solana/codecs';

export type BurnArgs = { __kind: 'V1'; amount: bigint };

export type BurnArgsArgs = { __kind: 'V1'; amount?: number | bigint };

export function getBurnArgsEncoder(): Encoder<BurnArgsArgs> {
  return getDataEnumEncoder([
    [
      'V1',
      mapEncoder(getStructEncoder([['amount', getU64Encoder()]]), (value) => ({
        ...value,
        amount: value.amount ?? 1,
      })),
    ],
  ]);
}

export function getBurnArgsDecoder(): Decoder<BurnArgs> {
  return getDataEnumDecoder([
    ['V1', getStructDecoder([['amount', getU64Decoder()]])],
  ]);
}

export function getBurnArgsCodec(): Codec<BurnArgsArgs, BurnArgs> {
  return combineCodec(getBurnArgsEncoder(), getBurnArgsDecoder());
}

// Data Enum Helpers.
export function burnArgs(
  kind: 'V1',
  data: GetDataEnumKindContent<BurnArgsArgs, 'V1'>
): GetDataEnumKind<BurnArgsArgs, 'V1'>;
export function burnArgs<K extends BurnArgsArgs['__kind']>(
  kind: K,
  data?: any
): Extract<BurnArgsArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isBurnArgs<K extends BurnArgs['__kind']>(
  kind: K,
  value: BurnArgs
): value is BurnArgs & { __kind: K } {
  return value.__kind === kind;
}
