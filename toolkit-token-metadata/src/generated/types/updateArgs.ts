/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  GetDataEnumKind,
  GetDataEnumKindContent,
  Option,
  OptionOrNullable,
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  mapEncoder,
  none,
} from '@solana/codecs';
import {
  AuthorizationData,
  AuthorizationDataArgs,
  CollectionDetailsToggle,
  CollectionDetailsToggleArgs,
  CollectionToggle,
  CollectionToggleArgs,
  Data,
  DataArgs,
  RuleSetToggle,
  RuleSetToggleArgs,
  TokenStandard,
  TokenStandardArgs,
  UsesToggle,
  UsesToggleArgs,
  collectionDetailsToggle,
  collectionToggle,
  getAuthorizationDataDecoder,
  getAuthorizationDataEncoder,
  getCollectionDetailsToggleDecoder,
  getCollectionDetailsToggleEncoder,
  getCollectionToggleDecoder,
  getCollectionToggleEncoder,
  getDataDecoder,
  getDataEncoder,
  getRuleSetToggleDecoder,
  getRuleSetToggleEncoder,
  getTokenStandardDecoder,
  getTokenStandardEncoder,
  getUsesToggleDecoder,
  getUsesToggleEncoder,
  ruleSetToggle,
  usesToggle,
} from '.';

export type UpdateArgs =
  | {
      __kind: 'V1';
      newUpdateAuthority: Option<Address>;
      data: Option<Data>;
      primarySaleHappened: Option<boolean>;
      isMutable: Option<boolean>;
      collection: CollectionToggle;
      collectionDetails: CollectionDetailsToggle;
      uses: UsesToggle;
      ruleSet: RuleSetToggle;
      authorizationData: Option<AuthorizationData>;
    }
  | {
      __kind: 'AsUpdateAuthorityV2';
      newUpdateAuthority: Option<Address>;
      data: Option<Data>;
      primarySaleHappened: Option<boolean>;
      isMutable: Option<boolean>;
      collection: CollectionToggle;
      collectionDetails: CollectionDetailsToggle;
      uses: UsesToggle;
      ruleSet: RuleSetToggle;
      tokenStandard: Option<TokenStandard>;
      authorizationData: Option<AuthorizationData>;
    }
  | {
      __kind: 'AsAuthorityItemDelegateV2';
      newUpdateAuthority: Option<Address>;
      primarySaleHappened: Option<boolean>;
      isMutable: Option<boolean>;
      tokenStandard: Option<TokenStandard>;
      authorizationData: Option<AuthorizationData>;
    }
  | {
      __kind: 'AsCollectionDelegateV2';
      collection: CollectionToggle;
      authorizationData: Option<AuthorizationData>;
    }
  | {
      __kind: 'AsDataDelegateV2';
      data: Option<Data>;
      authorizationData: Option<AuthorizationData>;
    }
  | {
      __kind: 'AsProgrammableConfigDelegateV2';
      ruleSet: RuleSetToggle;
      authorizationData: Option<AuthorizationData>;
    }
  | {
      __kind: 'AsDataItemDelegateV2';
      data: Option<Data>;
      authorizationData: Option<AuthorizationData>;
    }
  | {
      __kind: 'AsCollectionItemDelegateV2';
      collection: CollectionToggle;
      authorizationData: Option<AuthorizationData>;
    }
  | {
      __kind: 'AsProgrammableConfigItemDelegateV2';
      ruleSet: RuleSetToggle;
      authorizationData: Option<AuthorizationData>;
    };

export type UpdateArgsArgs =
  | {
      __kind: 'V1';
      newUpdateAuthority?: OptionOrNullable<Address>;
      data?: OptionOrNullable<DataArgs>;
      primarySaleHappened?: OptionOrNullable<boolean>;
      isMutable?: OptionOrNullable<boolean>;
      collection?: CollectionToggleArgs;
      collectionDetails?: CollectionDetailsToggleArgs;
      uses?: UsesToggleArgs;
      ruleSet?: RuleSetToggleArgs;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'AsUpdateAuthorityV2';
      newUpdateAuthority?: OptionOrNullable<Address>;
      data?: OptionOrNullable<DataArgs>;
      primarySaleHappened?: OptionOrNullable<boolean>;
      isMutable?: OptionOrNullable<boolean>;
      collection?: CollectionToggleArgs;
      collectionDetails?: CollectionDetailsToggleArgs;
      uses?: UsesToggleArgs;
      ruleSet?: RuleSetToggleArgs;
      tokenStandard?: OptionOrNullable<TokenStandardArgs>;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'AsAuthorityItemDelegateV2';
      newUpdateAuthority?: OptionOrNullable<Address>;
      primarySaleHappened?: OptionOrNullable<boolean>;
      isMutable?: OptionOrNullable<boolean>;
      tokenStandard?: OptionOrNullable<TokenStandardArgs>;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'AsCollectionDelegateV2';
      collection?: CollectionToggleArgs;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'AsDataDelegateV2';
      data?: OptionOrNullable<DataArgs>;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'AsProgrammableConfigDelegateV2';
      ruleSet?: RuleSetToggleArgs;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'AsDataItemDelegateV2';
      data?: OptionOrNullable<DataArgs>;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'AsCollectionItemDelegateV2';
      collection?: CollectionToggleArgs;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    }
  | {
      __kind: 'AsProgrammableConfigItemDelegateV2';
      ruleSet?: RuleSetToggleArgs;
      authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
    };

export function getUpdateArgsEncoder(): Encoder<UpdateArgsArgs> {
  return getDataEnumEncoder([
    [
      'V1',
      mapEncoder(
        getStructEncoder([
          ['newUpdateAuthority', getOptionEncoder(getAddressEncoder())],
          ['data', getOptionEncoder(getDataEncoder())],
          ['primarySaleHappened', getOptionEncoder(getBooleanEncoder())],
          ['isMutable', getOptionEncoder(getBooleanEncoder())],
          ['collection', getCollectionToggleEncoder()],
          ['collectionDetails', getCollectionDetailsToggleEncoder()],
          ['uses', getUsesToggleEncoder()],
          ['ruleSet', getRuleSetToggleEncoder()],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          newUpdateAuthority: value.newUpdateAuthority ?? none(),
          data: value.data ?? none(),
          primarySaleHappened: value.primarySaleHappened ?? none(),
          isMutable: value.isMutable ?? none(),
          collection: value.collection ?? collectionToggle('None'),
          collectionDetails:
            value.collectionDetails ?? collectionDetailsToggle('None'),
          uses: value.uses ?? usesToggle('None'),
          ruleSet: value.ruleSet ?? ruleSetToggle('None'),
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'AsUpdateAuthorityV2',
      mapEncoder(
        getStructEncoder([
          ['newUpdateAuthority', getOptionEncoder(getAddressEncoder())],
          ['data', getOptionEncoder(getDataEncoder())],
          ['primarySaleHappened', getOptionEncoder(getBooleanEncoder())],
          ['isMutable', getOptionEncoder(getBooleanEncoder())],
          ['collection', getCollectionToggleEncoder()],
          ['collectionDetails', getCollectionDetailsToggleEncoder()],
          ['uses', getUsesToggleEncoder()],
          ['ruleSet', getRuleSetToggleEncoder()],
          ['tokenStandard', getOptionEncoder(getTokenStandardEncoder())],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          newUpdateAuthority: value.newUpdateAuthority ?? none(),
          data: value.data ?? none(),
          primarySaleHappened: value.primarySaleHappened ?? none(),
          isMutable: value.isMutable ?? none(),
          collection: value.collection ?? collectionToggle('None'),
          collectionDetails:
            value.collectionDetails ?? collectionDetailsToggle('None'),
          uses: value.uses ?? usesToggle('None'),
          ruleSet: value.ruleSet ?? ruleSetToggle('None'),
          tokenStandard: value.tokenStandard ?? none(),
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'AsAuthorityItemDelegateV2',
      mapEncoder(
        getStructEncoder([
          ['newUpdateAuthority', getOptionEncoder(getAddressEncoder())],
          ['primarySaleHappened', getOptionEncoder(getBooleanEncoder())],
          ['isMutable', getOptionEncoder(getBooleanEncoder())],
          ['tokenStandard', getOptionEncoder(getTokenStandardEncoder())],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          newUpdateAuthority: value.newUpdateAuthority ?? none(),
          primarySaleHappened: value.primarySaleHappened ?? none(),
          isMutable: value.isMutable ?? none(),
          tokenStandard: value.tokenStandard ?? none(),
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'AsCollectionDelegateV2',
      mapEncoder(
        getStructEncoder([
          ['collection', getCollectionToggleEncoder()],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          collection: value.collection ?? collectionToggle('None'),
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'AsDataDelegateV2',
      mapEncoder(
        getStructEncoder([
          ['data', getOptionEncoder(getDataEncoder())],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          data: value.data ?? none(),
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'AsProgrammableConfigDelegateV2',
      mapEncoder(
        getStructEncoder([
          ['ruleSet', getRuleSetToggleEncoder()],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          ruleSet: value.ruleSet ?? ruleSetToggle('None'),
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'AsDataItemDelegateV2',
      mapEncoder(
        getStructEncoder([
          ['data', getOptionEncoder(getDataEncoder())],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          data: value.data ?? none(),
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'AsCollectionItemDelegateV2',
      mapEncoder(
        getStructEncoder([
          ['collection', getCollectionToggleEncoder()],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          collection: value.collection ?? collectionToggle('None'),
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
    [
      'AsProgrammableConfigItemDelegateV2',
      mapEncoder(
        getStructEncoder([
          ['ruleSet', getRuleSetToggleEncoder()],
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          ruleSet: value.ruleSet ?? ruleSetToggle('None'),
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
  ]);
}

export function getUpdateArgsDecoder(): Decoder<UpdateArgs> {
  return getDataEnumDecoder([
    [
      'V1',
      getStructDecoder([
        ['newUpdateAuthority', getOptionDecoder(getAddressDecoder())],
        ['data', getOptionDecoder(getDataDecoder())],
        ['primarySaleHappened', getOptionDecoder(getBooleanDecoder())],
        ['isMutable', getOptionDecoder(getBooleanDecoder())],
        ['collection', getCollectionToggleDecoder()],
        ['collectionDetails', getCollectionDetailsToggleDecoder()],
        ['uses', getUsesToggleDecoder()],
        ['ruleSet', getRuleSetToggleDecoder()],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'AsUpdateAuthorityV2',
      getStructDecoder([
        ['newUpdateAuthority', getOptionDecoder(getAddressDecoder())],
        ['data', getOptionDecoder(getDataDecoder())],
        ['primarySaleHappened', getOptionDecoder(getBooleanDecoder())],
        ['isMutable', getOptionDecoder(getBooleanDecoder())],
        ['collection', getCollectionToggleDecoder()],
        ['collectionDetails', getCollectionDetailsToggleDecoder()],
        ['uses', getUsesToggleDecoder()],
        ['ruleSet', getRuleSetToggleDecoder()],
        ['tokenStandard', getOptionDecoder(getTokenStandardDecoder())],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'AsAuthorityItemDelegateV2',
      getStructDecoder([
        ['newUpdateAuthority', getOptionDecoder(getAddressDecoder())],
        ['primarySaleHappened', getOptionDecoder(getBooleanDecoder())],
        ['isMutable', getOptionDecoder(getBooleanDecoder())],
        ['tokenStandard', getOptionDecoder(getTokenStandardDecoder())],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'AsCollectionDelegateV2',
      getStructDecoder([
        ['collection', getCollectionToggleDecoder()],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'AsDataDelegateV2',
      getStructDecoder([
        ['data', getOptionDecoder(getDataDecoder())],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'AsProgrammableConfigDelegateV2',
      getStructDecoder([
        ['ruleSet', getRuleSetToggleDecoder()],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'AsDataItemDelegateV2',
      getStructDecoder([
        ['data', getOptionDecoder(getDataDecoder())],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'AsCollectionItemDelegateV2',
      getStructDecoder([
        ['collection', getCollectionToggleDecoder()],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
    [
      'AsProgrammableConfigItemDelegateV2',
      getStructDecoder([
        ['ruleSet', getRuleSetToggleDecoder()],
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
  ]);
}

export function getUpdateArgsCodec(): Codec<UpdateArgsArgs, UpdateArgs> {
  return combineCodec(getUpdateArgsEncoder(), getUpdateArgsDecoder());
}

// Data Enum Helpers.
export function updateArgs(
  kind: 'V1',
  data: GetDataEnumKindContent<UpdateArgsArgs, 'V1'>
): GetDataEnumKind<UpdateArgsArgs, 'V1'>;
export function updateArgs(
  kind: 'AsUpdateAuthorityV2',
  data: GetDataEnumKindContent<UpdateArgsArgs, 'AsUpdateAuthorityV2'>
): GetDataEnumKind<UpdateArgsArgs, 'AsUpdateAuthorityV2'>;
export function updateArgs(
  kind: 'AsAuthorityItemDelegateV2',
  data: GetDataEnumKindContent<UpdateArgsArgs, 'AsAuthorityItemDelegateV2'>
): GetDataEnumKind<UpdateArgsArgs, 'AsAuthorityItemDelegateV2'>;
export function updateArgs(
  kind: 'AsCollectionDelegateV2',
  data: GetDataEnumKindContent<UpdateArgsArgs, 'AsCollectionDelegateV2'>
): GetDataEnumKind<UpdateArgsArgs, 'AsCollectionDelegateV2'>;
export function updateArgs(
  kind: 'AsDataDelegateV2',
  data: GetDataEnumKindContent<UpdateArgsArgs, 'AsDataDelegateV2'>
): GetDataEnumKind<UpdateArgsArgs, 'AsDataDelegateV2'>;
export function updateArgs(
  kind: 'AsProgrammableConfigDelegateV2',
  data: GetDataEnumKindContent<UpdateArgsArgs, 'AsProgrammableConfigDelegateV2'>
): GetDataEnumKind<UpdateArgsArgs, 'AsProgrammableConfigDelegateV2'>;
export function updateArgs(
  kind: 'AsDataItemDelegateV2',
  data: GetDataEnumKindContent<UpdateArgsArgs, 'AsDataItemDelegateV2'>
): GetDataEnumKind<UpdateArgsArgs, 'AsDataItemDelegateV2'>;
export function updateArgs(
  kind: 'AsCollectionItemDelegateV2',
  data: GetDataEnumKindContent<UpdateArgsArgs, 'AsCollectionItemDelegateV2'>
): GetDataEnumKind<UpdateArgsArgs, 'AsCollectionItemDelegateV2'>;
export function updateArgs(
  kind: 'AsProgrammableConfigItemDelegateV2',
  data: GetDataEnumKindContent<
    UpdateArgsArgs,
    'AsProgrammableConfigItemDelegateV2'
  >
): GetDataEnumKind<UpdateArgsArgs, 'AsProgrammableConfigItemDelegateV2'>;
export function updateArgs<K extends UpdateArgsArgs['__kind']>(
  kind: K,
  data?: any
): Extract<UpdateArgsArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isUpdateArgs<K extends UpdateArgs['__kind']>(
  kind: K,
  value: UpdateArgs
): value is UpdateArgs & { __kind: K } {
  return value.__kind === kind;
}
