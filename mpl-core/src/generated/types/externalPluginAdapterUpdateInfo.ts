/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/web3.js';
import {
  DataStoreUpdateInfo,
  DataStoreUpdateInfoArgs,
  LifecycleHookUpdateInfo,
  LifecycleHookUpdateInfoArgs,
  OracleUpdateInfo,
  OracleUpdateInfoArgs,
  getDataStoreUpdateInfoDecoder,
  getDataStoreUpdateInfoEncoder,
  getLifecycleHookUpdateInfoDecoder,
  getLifecycleHookUpdateInfoEncoder,
  getOracleUpdateInfoDecoder,
  getOracleUpdateInfoEncoder,
} from '.';

export type ExternalPluginAdapterUpdateInfo =
  | { __kind: 'LifecycleHook'; fields: readonly [LifecycleHookUpdateInfo] }
  | { __kind: 'Oracle'; fields: readonly [OracleUpdateInfo] }
  | { __kind: 'DataStore'; fields: readonly [DataStoreUpdateInfo] };

export type ExternalPluginAdapterUpdateInfoArgs =
  | { __kind: 'LifecycleHook'; fields: readonly [LifecycleHookUpdateInfoArgs] }
  | { __kind: 'Oracle'; fields: readonly [OracleUpdateInfoArgs] }
  | { __kind: 'DataStore'; fields: readonly [DataStoreUpdateInfoArgs] };

export function getExternalPluginAdapterUpdateInfoEncoder(): Encoder<ExternalPluginAdapterUpdateInfoArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'LifecycleHook',
      getStructEncoder([
        ['fields', getTupleEncoder([getLifecycleHookUpdateInfoEncoder()])],
      ]),
    ],
    [
      'Oracle',
      getStructEncoder([
        ['fields', getTupleEncoder([getOracleUpdateInfoEncoder()])],
      ]),
    ],
    [
      'DataStore',
      getStructEncoder([
        ['fields', getTupleEncoder([getDataStoreUpdateInfoEncoder()])],
      ]),
    ],
  ]);
}

export function getExternalPluginAdapterUpdateInfoDecoder(): Decoder<ExternalPluginAdapterUpdateInfo> {
  return getDiscriminatedUnionDecoder([
    [
      'LifecycleHook',
      getStructDecoder([
        ['fields', getTupleDecoder([getLifecycleHookUpdateInfoDecoder()])],
      ]),
    ],
    [
      'Oracle',
      getStructDecoder([
        ['fields', getTupleDecoder([getOracleUpdateInfoDecoder()])],
      ]),
    ],
    [
      'DataStore',
      getStructDecoder([
        ['fields', getTupleDecoder([getDataStoreUpdateInfoDecoder()])],
      ]),
    ],
  ]);
}

export function getExternalPluginAdapterUpdateInfoCodec(): Codec<
  ExternalPluginAdapterUpdateInfoArgs,
  ExternalPluginAdapterUpdateInfo
> {
  return combineCodec(
    getExternalPluginAdapterUpdateInfoEncoder(),
    getExternalPluginAdapterUpdateInfoDecoder()
  );
}

// Data Enum Helpers.
export function externalPluginAdapterUpdateInfo(
  kind: 'LifecycleHook',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterUpdateInfoArgs,
    '__kind',
    'LifecycleHook'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterUpdateInfoArgs,
  '__kind',
  'LifecycleHook'
>;
export function externalPluginAdapterUpdateInfo(
  kind: 'Oracle',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterUpdateInfoArgs,
    '__kind',
    'Oracle'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterUpdateInfoArgs,
  '__kind',
  'Oracle'
>;
export function externalPluginAdapterUpdateInfo(
  kind: 'DataStore',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterUpdateInfoArgs,
    '__kind',
    'DataStore'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterUpdateInfoArgs,
  '__kind',
  'DataStore'
>;
export function externalPluginAdapterUpdateInfo<
  K extends ExternalPluginAdapterUpdateInfoArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isExternalPluginAdapterUpdateInfo<
  K extends ExternalPluginAdapterUpdateInfo['__kind'],
>(
  kind: K,
  value: ExternalPluginAdapterUpdateInfo
): value is ExternalPluginAdapterUpdateInfo & { __kind: K } {
  return value.__kind === kind;
}
