/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/web3.js';
import {
  DataStoreInitInfo,
  DataStoreInitInfoArgs,
  LifecycleHookInitInfo,
  LifecycleHookInitInfoArgs,
  OracleInitInfo,
  OracleInitInfoArgs,
  getDataStoreInitInfoDecoder,
  getDataStoreInitInfoEncoder,
  getLifecycleHookInitInfoDecoder,
  getLifecycleHookInitInfoEncoder,
  getOracleInitInfoDecoder,
  getOracleInitInfoEncoder,
} from '.';

export type ExternalPluginAdapterInitInfo =
  | { __kind: 'LifecycleHook'; fields: readonly [LifecycleHookInitInfo] }
  | { __kind: 'Oracle'; fields: readonly [OracleInitInfo] }
  | { __kind: 'DataStore'; fields: readonly [DataStoreInitInfo] };

export type ExternalPluginAdapterInitInfoArgs =
  | { __kind: 'LifecycleHook'; fields: readonly [LifecycleHookInitInfoArgs] }
  | { __kind: 'Oracle'; fields: readonly [OracleInitInfoArgs] }
  | { __kind: 'DataStore'; fields: readonly [DataStoreInitInfoArgs] };

export function getExternalPluginAdapterInitInfoEncoder(): Encoder<ExternalPluginAdapterInitInfoArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'LifecycleHook',
      getStructEncoder([
        ['fields', getTupleEncoder([getLifecycleHookInitInfoEncoder()])],
      ]),
    ],
    [
      'Oracle',
      getStructEncoder([
        ['fields', getTupleEncoder([getOracleInitInfoEncoder()])],
      ]),
    ],
    [
      'DataStore',
      getStructEncoder([
        ['fields', getTupleEncoder([getDataStoreInitInfoEncoder()])],
      ]),
    ],
  ]);
}

export function getExternalPluginAdapterInitInfoDecoder(): Decoder<ExternalPluginAdapterInitInfo> {
  return getDiscriminatedUnionDecoder([
    [
      'LifecycleHook',
      getStructDecoder([
        ['fields', getTupleDecoder([getLifecycleHookInitInfoDecoder()])],
      ]),
    ],
    [
      'Oracle',
      getStructDecoder([
        ['fields', getTupleDecoder([getOracleInitInfoDecoder()])],
      ]),
    ],
    [
      'DataStore',
      getStructDecoder([
        ['fields', getTupleDecoder([getDataStoreInitInfoDecoder()])],
      ]),
    ],
  ]);
}

export function getExternalPluginAdapterInitInfoCodec(): Codec<
  ExternalPluginAdapterInitInfoArgs,
  ExternalPluginAdapterInitInfo
> {
  return combineCodec(
    getExternalPluginAdapterInitInfoEncoder(),
    getExternalPluginAdapterInitInfoDecoder()
  );
}

// Data Enum Helpers.
export function externalPluginAdapterInitInfo(
  kind: 'LifecycleHook',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterInitInfoArgs,
    '__kind',
    'LifecycleHook'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterInitInfoArgs,
  '__kind',
  'LifecycleHook'
>;
export function externalPluginAdapterInitInfo(
  kind: 'Oracle',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterInitInfoArgs,
    '__kind',
    'Oracle'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterInitInfoArgs,
  '__kind',
  'Oracle'
>;
export function externalPluginAdapterInitInfo(
  kind: 'DataStore',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterInitInfoArgs,
    '__kind',
    'DataStore'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterInitInfoArgs,
  '__kind',
  'DataStore'
>;
export function externalPluginAdapterInitInfo<
  K extends ExternalPluginAdapterInitInfoArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isExternalPluginAdapterInitInfo<
  K extends ExternalPluginAdapterInitInfo['__kind'],
>(
  kind: K,
  value: ExternalPluginAdapterInitInfo
): value is ExternalPluginAdapterInitInfo & { __kind: K } {
  return value.__kind === kind;
}
