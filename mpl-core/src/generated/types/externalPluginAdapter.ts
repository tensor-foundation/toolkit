/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/web3.js';
import {
  DataStore,
  DataStoreArgs,
  LifecycleHook,
  LifecycleHookArgs,
  Oracle,
  OracleArgs,
  getDataStoreDecoder,
  getDataStoreEncoder,
  getLifecycleHookDecoder,
  getLifecycleHookEncoder,
  getOracleDecoder,
  getOracleEncoder,
} from '.';

export type ExternalPluginAdapter =
  | { __kind: 'LifecycleHook'; fields: readonly [LifecycleHook] }
  | { __kind: 'Oracle'; fields: readonly [Oracle] }
  | { __kind: 'DataStore'; fields: readonly [DataStore] };

export type ExternalPluginAdapterArgs =
  | { __kind: 'LifecycleHook'; fields: readonly [LifecycleHookArgs] }
  | { __kind: 'Oracle'; fields: readonly [OracleArgs] }
  | { __kind: 'DataStore'; fields: readonly [DataStoreArgs] };

export function getExternalPluginAdapterEncoder(): Encoder<ExternalPluginAdapterArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'LifecycleHook',
      getStructEncoder([
        ['fields', getTupleEncoder([getLifecycleHookEncoder()])],
      ]),
    ],
    [
      'Oracle',
      getStructEncoder([['fields', getTupleEncoder([getOracleEncoder()])]]),
    ],
    [
      'DataStore',
      getStructEncoder([['fields', getTupleEncoder([getDataStoreEncoder()])]]),
    ],
  ]);
}

export function getExternalPluginAdapterDecoder(): Decoder<ExternalPluginAdapter> {
  return getDiscriminatedUnionDecoder([
    [
      'LifecycleHook',
      getStructDecoder([
        ['fields', getTupleDecoder([getLifecycleHookDecoder()])],
      ]),
    ],
    [
      'Oracle',
      getStructDecoder([['fields', getTupleDecoder([getOracleDecoder()])]]),
    ],
    [
      'DataStore',
      getStructDecoder([['fields', getTupleDecoder([getDataStoreDecoder()])]]),
    ],
  ]);
}

export function getExternalPluginAdapterCodec(): Codec<
  ExternalPluginAdapterArgs,
  ExternalPluginAdapter
> {
  return combineCodec(
    getExternalPluginAdapterEncoder(),
    getExternalPluginAdapterDecoder()
  );
}

// Data Enum Helpers.
export function externalPluginAdapter(
  kind: 'LifecycleHook',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterArgs,
    '__kind',
    'LifecycleHook'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterArgs,
  '__kind',
  'LifecycleHook'
>;
export function externalPluginAdapter(
  kind: 'Oracle',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterArgs,
    '__kind',
    'Oracle'
  >['fields']
): GetDiscriminatedUnionVariant<ExternalPluginAdapterArgs, '__kind', 'Oracle'>;
export function externalPluginAdapter(
  kind: 'DataStore',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterArgs,
    '__kind',
    'DataStore'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterArgs,
  '__kind',
  'DataStore'
>;
export function externalPluginAdapter<
  K extends ExternalPluginAdapterArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isExternalPluginAdapter<
  K extends ExternalPluginAdapter['__kind'],
>(
  kind: K,
  value: ExternalPluginAdapter
): value is ExternalPluginAdapter & { __kind: K } {
  return value.__kind === kind;
}
