/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
} from '@solana/web3.js';
import { Key, KeyArgs, getKeyDecoder, getKeyEncoder } from '../types';

export type CollectionV1 = {
  key: Key;
  updateAuthority: Address;
  name: string;
  uri: string;
  numMinted: number;
  currentSize: number;
};

export type CollectionV1Args = {
  key: KeyArgs;
  updateAuthority: Address;
  name: string;
  uri: string;
  numMinted: number;
  currentSize: number;
};

export function getCollectionV1Encoder(): Encoder<CollectionV1Args> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['updateAuthority', getAddressEncoder()],
    ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['numMinted', getU32Encoder()],
    ['currentSize', getU32Encoder()],
  ]);
}

export function getCollectionV1Decoder(): Decoder<CollectionV1> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['updateAuthority', getAddressDecoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['numMinted', getU32Decoder()],
    ['currentSize', getU32Decoder()],
  ]);
}

export function getCollectionV1Codec(): Codec<CollectionV1Args, CollectionV1> {
  return combineCodec(getCollectionV1Encoder(), getCollectionV1Decoder());
}

export function decodeCollectionV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CollectionV1, TAddress>;
export function decodeCollectionV1<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CollectionV1, TAddress>;
export function decodeCollectionV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<CollectionV1, TAddress> | MaybeAccount<CollectionV1, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCollectionV1Decoder()
  );
}

export async function fetchCollectionV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CollectionV1, TAddress>> {
  const maybeAccount = await fetchMaybeCollectionV1(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCollectionV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CollectionV1, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCollectionV1(maybeAccount);
}

export async function fetchAllCollectionV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CollectionV1>[]> {
  const maybeAccounts = await fetchAllMaybeCollectionV1(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCollectionV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CollectionV1>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCollectionV1(maybeAccount));
}
