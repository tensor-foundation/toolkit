/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
} from '@solana/web3.js';
import {
  getKeyDecoder,
  getKeyEncoder,
  getUpdateAuthorityDecoder,
  getUpdateAuthorityEncoder,
  type Key,
  type KeyArgs,
  type UpdateAuthority,
  type UpdateAuthorityArgs,
} from '../types';

export type AssetV1 = {
  key: Key;
  owner: Address;
  updateAuthority: UpdateAuthority;
  name: string;
  uri: string;
  seq: Option<bigint>;
};

export type AssetV1Args = {
  key: KeyArgs;
  owner: Address;
  updateAuthority: UpdateAuthorityArgs;
  name: string;
  uri: string;
  seq: OptionOrNullable<number | bigint>;
};

export function getAssetV1Encoder(): Encoder<AssetV1Args> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['owner', getAddressEncoder()],
    ['updateAuthority', getUpdateAuthorityEncoder()],
    ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['seq', getOptionEncoder(getU64Encoder())],
  ]);
}

export function getAssetV1Decoder(): Decoder<AssetV1> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['owner', getAddressDecoder()],
    ['updateAuthority', getUpdateAuthorityDecoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['seq', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getAssetV1Codec(): Codec<AssetV1Args, AssetV1> {
  return combineCodec(getAssetV1Encoder(), getAssetV1Decoder());
}

export function decodeAssetV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AssetV1, TAddress>;
export function decodeAssetV1<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AssetV1, TAddress>;
export function decodeAssetV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<AssetV1, TAddress> | MaybeAccount<AssetV1, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAssetV1Decoder()
  );
}

export async function fetchAssetV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AssetV1, TAddress>> {
  const maybeAccount = await fetchMaybeAssetV1(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAssetV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AssetV1, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAssetV1(maybeAccount);
}

export async function fetchAllAssetV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AssetV1>[]> {
  const maybeAccounts = await fetchAllMaybeAssetV1(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAssetV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AssetV1>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAssetV1(maybeAccount));
}
