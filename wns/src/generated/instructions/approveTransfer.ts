/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  IAccountMeta,
  IAccountSignerMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from '@solana/web3.js';
import { WEN_NEW_STANDARD_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type ApproveTransferInstruction<
  TProgram extends string = typeof WEN_NEW_STANDARD_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountApproveAccount extends string | IAccountMeta<string> = string,
  TAccountPaymentMint extends string | IAccountMeta<string> = string,
  TAccountDistributionTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountAuthorityTokenAccount extends string | IAccountMeta<string> = string,
  TAccountDistributionAccount extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountDistributionProgram extends
    | string
    | IAccountMeta<string> = 'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountPaymentTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountApproveAccount extends string
        ? WritableAccount<TAccountApproveAccount>
        : TAccountApproveAccount,
      TAccountPaymentMint extends string
        ? ReadonlyAccount<TAccountPaymentMint>
        : TAccountPaymentMint,
      TAccountDistributionTokenAccount extends string
        ? WritableAccount<TAccountDistributionTokenAccount>
        : TAccountDistributionTokenAccount,
      TAccountAuthorityTokenAccount extends string
        ? WritableAccount<TAccountAuthorityTokenAccount>
        : TAccountAuthorityTokenAccount,
      TAccountDistributionAccount extends string
        ? WritableAccount<TAccountDistributionAccount>
        : TAccountDistributionAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountDistributionProgram extends string
        ? ReadonlyAccount<TAccountDistributionProgram>
        : TAccountDistributionProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountPaymentTokenProgram extends string
        ? ReadonlyAccount<TAccountPaymentTokenProgram>
        : TAccountPaymentTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ApproveTransferInstructionData = {
  discriminator: ReadonlyUint8Array;
  buyAmount: bigint;
};

export type ApproveTransferInstructionDataArgs = { buyAmount: number | bigint };

export function getApproveTransferInstructionDataEncoder(): Encoder<ApproveTransferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['buyAmount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([198, 217, 247, 150, 208, 60, 169, 244]),
    })
  );
}

export function getApproveTransferInstructionDataDecoder(): Decoder<ApproveTransferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['buyAmount', getU64Decoder()],
  ]);
}

export function getApproveTransferInstructionDataCodec(): Codec<
  ApproveTransferInstructionDataArgs,
  ApproveTransferInstructionData
> {
  return combineCodec(
    getApproveTransferInstructionDataEncoder(),
    getApproveTransferInstructionDataDecoder()
  );
}

export type ApproveTransferInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountApproveAccount extends string = string,
  TAccountPaymentMint extends string = string,
  TAccountDistributionTokenAccount extends string = string,
  TAccountAuthorityTokenAccount extends string = string,
  TAccountDistributionAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountDistributionProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountPaymentTokenProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  approveAccount: Address<TAccountApproveAccount>;
  paymentMint: Address<TAccountPaymentMint>;
  distributionTokenAccount?: Address<TAccountDistributionTokenAccount>;
  authorityTokenAccount?: Address<TAccountAuthorityTokenAccount>;
  distributionAccount: Address<TAccountDistributionAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  distributionProgram?: Address<TAccountDistributionProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  paymentTokenProgram?: Address<TAccountPaymentTokenProgram>;
  buyAmount: ApproveTransferInstructionDataArgs['buyAmount'];
};

export function getApproveTransferInstruction<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountApproveAccount extends string,
  TAccountPaymentMint extends string,
  TAccountDistributionTokenAccount extends string,
  TAccountAuthorityTokenAccount extends string,
  TAccountDistributionAccount extends string,
  TAccountSystemProgram extends string,
  TAccountDistributionProgram extends string,
  TAccountTokenProgram extends string,
  TAccountPaymentTokenProgram extends string,
>(
  input: ApproveTransferInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountMint,
    TAccountApproveAccount,
    TAccountPaymentMint,
    TAccountDistributionTokenAccount,
    TAccountAuthorityTokenAccount,
    TAccountDistributionAccount,
    TAccountSystemProgram,
    TAccountDistributionProgram,
    TAccountTokenProgram,
    TAccountPaymentTokenProgram
  >
): ApproveTransferInstruction<
  typeof WEN_NEW_STANDARD_PROGRAM_ADDRESS,
  TAccountPayer,
  TAccountAuthority,
  TAccountMint,
  TAccountApproveAccount,
  TAccountPaymentMint,
  TAccountDistributionTokenAccount,
  TAccountAuthorityTokenAccount,
  TAccountDistributionAccount,
  TAccountSystemProgram,
  TAccountDistributionProgram,
  TAccountTokenProgram,
  TAccountPaymentTokenProgram
> {
  // Program address.
  const programAddress = WEN_NEW_STANDARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    approveAccount: { value: input.approveAccount ?? null, isWritable: true },
    paymentMint: { value: input.paymentMint ?? null, isWritable: false },
    distributionTokenAccount: {
      value: input.distributionTokenAccount ?? null,
      isWritable: true,
    },
    authorityTokenAccount: {
      value: input.authorityTokenAccount ?? null,
      isWritable: true,
    },
    distributionAccount: {
      value: input.distributionAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    distributionProgram: {
      value: input.distributionProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    paymentTokenProgram: {
      value: input.paymentTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.distributionProgram.value) {
    accounts.distributionProgram.value =
      'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay' as Address<'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.approveAccount),
      getAccountMeta(accounts.paymentMint),
      getAccountMeta(accounts.distributionTokenAccount),
      getAccountMeta(accounts.authorityTokenAccount),
      getAccountMeta(accounts.distributionAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.distributionProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.paymentTokenProgram),
    ],
    programAddress,
    data: getApproveTransferInstructionDataEncoder().encode(
      args as ApproveTransferInstructionDataArgs
    ),
  } as ApproveTransferInstruction<
    typeof WEN_NEW_STANDARD_PROGRAM_ADDRESS,
    TAccountPayer,
    TAccountAuthority,
    TAccountMint,
    TAccountApproveAccount,
    TAccountPaymentMint,
    TAccountDistributionTokenAccount,
    TAccountAuthorityTokenAccount,
    TAccountDistributionAccount,
    TAccountSystemProgram,
    TAccountDistributionProgram,
    TAccountTokenProgram,
    TAccountPaymentTokenProgram
  >;

  return instruction;
}

export type ParsedApproveTransferInstruction<
  TProgram extends string = typeof WEN_NEW_STANDARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    authority: TAccountMetas[1];
    mint: TAccountMetas[2];
    approveAccount: TAccountMetas[3];
    paymentMint: TAccountMetas[4];
    distributionTokenAccount?: TAccountMetas[5] | undefined;
    authorityTokenAccount?: TAccountMetas[6] | undefined;
    distributionAccount: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    distributionProgram: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    paymentTokenProgram?: TAccountMetas[11] | undefined;
  };
  data: ApproveTransferInstructionData;
};

export function parseApproveTransferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedApproveTransferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === WEN_NEW_STANDARD_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      authority: getNextAccount(),
      mint: getNextAccount(),
      approveAccount: getNextAccount(),
      paymentMint: getNextAccount(),
      distributionTokenAccount: getNextOptionalAccount(),
      authorityTokenAccount: getNextOptionalAccount(),
      distributionAccount: getNextAccount(),
      systemProgram: getNextAccount(),
      distributionProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      paymentTokenProgram: getNextOptionalAccount(),
    },
    data: getApproveTransferInstructionDataDecoder().decode(instruction.data),
  };
}
