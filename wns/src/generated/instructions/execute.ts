/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from '@solana/web3.js';
import { WEN_NEW_STANDARD_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type ExecuteInstruction<
  TProgram extends string = typeof WEN_NEW_STANDARD_PROGRAM_ADDRESS,
  TAccountSourceAccount extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountDestinationAccount extends string | IAccountMeta<string> = string,
  TAccountOwnerDelegate extends string | IAccountMeta<string> = string,
  TAccountExtraMetasAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSourceAccount extends string
        ? ReadonlyAccount<TAccountSourceAccount>
        : TAccountSourceAccount,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountDestinationAccount extends string
        ? ReadonlyAccount<TAccountDestinationAccount>
        : TAccountDestinationAccount,
      TAccountOwnerDelegate extends string
        ? ReadonlyAccount<TAccountOwnerDelegate>
        : TAccountOwnerDelegate,
      TAccountExtraMetasAccount extends string
        ? ReadonlyAccount<TAccountExtraMetasAccount>
        : TAccountExtraMetasAccount,
      ...TRemainingAccounts,
    ]
  >;

export type ExecuteInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type ExecuteInstructionDataArgs = { amount: number | bigint };

export function getExecuteInstructionDataEncoder(): Encoder<ExecuteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([105, 37, 101, 197, 75, 251, 102, 26]),
    })
  );
}

export function getExecuteInstructionDataDecoder(): Decoder<ExecuteInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getExecuteInstructionDataCodec(): Codec<
  ExecuteInstructionDataArgs,
  ExecuteInstructionData
> {
  return combineCodec(
    getExecuteInstructionDataEncoder(),
    getExecuteInstructionDataDecoder()
  );
}

export type ExecuteInput<
  TAccountSourceAccount extends string = string,
  TAccountMint extends string = string,
  TAccountDestinationAccount extends string = string,
  TAccountOwnerDelegate extends string = string,
  TAccountExtraMetasAccount extends string = string,
> = {
  sourceAccount: Address<TAccountSourceAccount>;
  mint: Address<TAccountMint>;
  destinationAccount: Address<TAccountDestinationAccount>;
  ownerDelegate: Address<TAccountOwnerDelegate>;
  extraMetasAccount: Address<TAccountExtraMetasAccount>;
  amount: ExecuteInstructionDataArgs['amount'];
};

export function getExecuteInstruction<
  TAccountSourceAccount extends string,
  TAccountMint extends string,
  TAccountDestinationAccount extends string,
  TAccountOwnerDelegate extends string,
  TAccountExtraMetasAccount extends string,
>(
  input: ExecuteInput<
    TAccountSourceAccount,
    TAccountMint,
    TAccountDestinationAccount,
    TAccountOwnerDelegate,
    TAccountExtraMetasAccount
  >
): ExecuteInstruction<
  typeof WEN_NEW_STANDARD_PROGRAM_ADDRESS,
  TAccountSourceAccount,
  TAccountMint,
  TAccountDestinationAccount,
  TAccountOwnerDelegate,
  TAccountExtraMetasAccount
> {
  // Program address.
  const programAddress = WEN_NEW_STANDARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    sourceAccount: { value: input.sourceAccount ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    destinationAccount: {
      value: input.destinationAccount ?? null,
      isWritable: false,
    },
    ownerDelegate: { value: input.ownerDelegate ?? null, isWritable: false },
    extraMetasAccount: {
      value: input.extraMetasAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.sourceAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.destinationAccount),
      getAccountMeta(accounts.ownerDelegate),
      getAccountMeta(accounts.extraMetasAccount),
    ],
    programAddress,
    data: getExecuteInstructionDataEncoder().encode(
      args as ExecuteInstructionDataArgs
    ),
  } as ExecuteInstruction<
    typeof WEN_NEW_STANDARD_PROGRAM_ADDRESS,
    TAccountSourceAccount,
    TAccountMint,
    TAccountDestinationAccount,
    TAccountOwnerDelegate,
    TAccountExtraMetasAccount
  >;

  return instruction;
}

export type ParsedExecuteInstruction<
  TProgram extends string = typeof WEN_NEW_STANDARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    sourceAccount: TAccountMetas[0];
    mint: TAccountMetas[1];
    destinationAccount: TAccountMetas[2];
    ownerDelegate: TAccountMetas[3];
    extraMetasAccount: TAccountMetas[4];
  };
  data: ExecuteInstructionData;
};

export function parseExecuteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedExecuteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      sourceAccount: getNextAccount(),
      mint: getNextAccount(),
      destinationAccount: getNextAccount(),
      ownerDelegate: getNextAccount(),
      extraMetasAccount: getNextAccount(),
    },
    data: getExecuteInstructionDataDecoder().decode(instruction.data),
  };
}
